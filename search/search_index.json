{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bamboo Supported Interfaces WSGI ASGI v3.0 (HTTP, WebSocket and Lifespan) Installing Python: >= 3.7 $ python -m pip install bamboo-core Usage \u4ee5\u4e0b\u306f\u7c21\u5358\u306a\u5b9f\u88c5\u4f8b\u3067\u3059\uff0e from bamboo import WSGIApp , WSGIEndpoint , WSGITestExecutor app = WSGIApp () @app . route ( \"hello\" ) class MockEndpoint ( WSGIEndpoint ): def do_GET ( self ) -> None : self . send_body ( b \"Hello, World!\" ) if __name__ == \"__main__\" : WSGITestExecutor . debug ( app ) \u4e0a\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u5f8c\uff0c\u30d6\u30e9\u30a6\u30b6\u3067 http://localhost:8000/hello \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff0e API documentation API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f \u3053\u3061\u3089 \uff0e Examples upsidedown \u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u9006\u9806\u306b\u53cd\u8ee2\u3055\u305b\u3066\u8fd4\u3059\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\uff0e image_traffic \u30a2\u30af\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u9759\u7684\u306a\u753b\u50cf\u3092\u8fd4\u3059\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\uff0e tweets CLI \u30d9\u30fc\u30b9\u306e\u7c21\u6613\u7684\u306a Twitter \u306e\u3088\u3046\u306a\u6295\u7a3f\u30a2\u30d7\u30ea\u3067\u3059\uff0e\u8a8d\u8a3c\u6a5f\u80fd\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u305b\u3093\uff0e","title":"Home"},{"location":"#bamboo","text":"","title":"Bamboo"},{"location":"#supported-interfaces","text":"WSGI ASGI v3.0 (HTTP, WebSocket and Lifespan)","title":"Supported Interfaces"},{"location":"#installing","text":"Python: >= 3.7 $ python -m pip install bamboo-core","title":"Installing"},{"location":"#usage","text":"\u4ee5\u4e0b\u306f\u7c21\u5358\u306a\u5b9f\u88c5\u4f8b\u3067\u3059\uff0e from bamboo import WSGIApp , WSGIEndpoint , WSGITestExecutor app = WSGIApp () @app . route ( \"hello\" ) class MockEndpoint ( WSGIEndpoint ): def do_GET ( self ) -> None : self . send_body ( b \"Hello, World!\" ) if __name__ == \"__main__\" : WSGITestExecutor . debug ( app ) \u4e0a\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u5f8c\uff0c\u30d6\u30e9\u30a6\u30b6\u3067 http://localhost:8000/hello \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\uff0e","title":"Usage"},{"location":"#api-documentation","text":"API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f \u3053\u3061\u3089 \uff0e","title":"API documentation"},{"location":"#examples","text":"","title":"Examples"},{"location":"#upsidedown","text":"\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u9006\u9806\u306b\u53cd\u8ee2\u3055\u305b\u3066\u8fd4\u3059\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\uff0e","title":"upsidedown"},{"location":"#image_traffic","text":"\u30a2\u30af\u30bb\u30b9\u306b\u5bfe\u3057\u3066\u9759\u7684\u306a\u753b\u50cf\u3092\u8fd4\u3059\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\uff0e","title":"image_traffic"},{"location":"#tweets","text":"CLI \u30d9\u30fc\u30b9\u306e\u7c21\u6613\u7684\u306a Twitter \u306e\u3088\u3046\u306a\u6295\u7a3f\u30a2\u30d7\u30ea\u3067\u3059\uff0e\u8a8d\u8a3c\u6a5f\u80fd\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u305b\u3093\uff0e","title":"tweets"},{"location":"background/","text":"Background","title":"Background"},{"location":"background/#background","text":"","title":"Background"},{"location":"advanced/dapr/","text":"dapr \u3068\u306e\u9023\u643a","title":"dapr \u3068\u306e\u9023\u643a"},{"location":"advanced/dapr/#dapr","text":"","title":"dapr \u3068\u306e\u9023\u643a"},{"location":"advanced/db_integration/","text":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u306e\u7d71\u5408","title":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u306e\u7d71\u5408"},{"location":"advanced/db_integration/#_1","text":"","title":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3068\u306e\u7d71\u5408"},{"location":"advanced/flowchart/","text":"\u30d5\u30ed\u30fc\u30c1\u30e3\u30fc\u30c8\u3092\u63cf\u304f","title":"\u30d5\u30ed\u30fc\u30c1\u30e3\u30fc\u30c8\u3092\u63cf\u304f"},{"location":"advanced/flowchart/#_1","text":"","title":"\u30d5\u30ed\u30fc\u30c1\u30e3\u30fc\u30c8\u3092\u63cf\u304f"},{"location":"advanced/microservices/","text":"\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3","title":"\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3"},{"location":"advanced/microservices/#_1","text":"","title":"\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3"},{"location":"advanced/packaging/","text":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30f3\u30b0","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30f3\u30b0"},{"location":"advanced/packaging/#_1","text":"","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u30f3\u30b0"},{"location":"api/bamboo/api/","text":"api base ApiData Base class to describe input/output data format on Endpoints as APIs. Subclasses of this class can be used an argument of data_format decorator for callbacks on Endpoints. If input/output parameters of the data_format are specified, the decorator validates if raw data, typically a bytes object, has expected data format. Subclasses of this class can define their own data formats in __init__ methods. Developers should implement __init__ methods of the subclasses such that each objects has data with expected formats by implementors. Note This class is an abstract class. So, don't initilize it and specify it as an argument of the data_format decorator. Subclasses of this class should validate if raw data given to __init__ methods has expected formats. If the validation failes, the classes MUST raise ValidataionFailedError to announce the failure to the data_format decorator. __validate__ ( raw , content_type ) classmethod special Parameters: Name Type Description Default raw bytes Raw data to be validated. required content_type ContentType Values of Content-Type header. required Source code in bamboo/api/base.py @classmethod @abstractmethod def __validate__ ( cls , raw : bytes , content_type : ContentType ) -> ApiData : \"\"\" Args: raw : Raw data to be validated. content_type : Values of `Content-Type` header. \"\"\" pass ApiValidationFailedError Raised if type validation of data failes. BinaryApiData API data with no format. This class can be used to describe raw data with no data format. So, any received data from clients is acceptable on the class. Examples: class MockEndpoint ( Endpoint ): @data_format ( input = BinaryApiData , output = None ) def do_GET ( self , rec_body : BinaryApiData ) -> None : # get raw data of request body raw_data = rec_body . raw raw : bytes property readonly Raw data of input binary. __init__ ( self , data ) special Parameters: Name Type Description Default data bytes Binary data. required Source code in bamboo/api/base.py def __init__ ( self , data : bytes ) -> None : \"\"\" Args: data: Binary data. \"\"\" self . _data = data __validate__ ( raw , content_type ) classmethod special Parameters: Name Type Description Default raw bytes Raw data to be validated. required content_type ContentType Values of Content-Type header. required Returns: Type Description BinaryApiData The BinaryApiData object validated succcessfully. Note In objects of this class, content_type is not used even if any content_type is specified. Source code in bamboo/api/base.py @classmethod def __validate__ ( cls , raw : bytes , content_type : ContentType ) -> BinaryApiData : \"\"\" Args: raw: Raw data to be validated. content_type: Values of `Content-Type` header. Returns: The BinaryApiData object validated succcessfully. Note: In objects of this class, `content_type` is not used even if any `content_type` is specified. \"\"\" if not isinstance ( raw , bytes ): raise ApiValidationFailedError ( f \"'raw' must be a 'bytes'.\" ) return cls ( raw ) form FormApiData API data with x-www-form-urlencoded This class can be used to describe data with x-www-form-urlencoded format. This class should be inheritted and its several class-attributes should be defined in the subclass. Developer must define type hints of the class-attributes, which are used to validate if raw data has format the type hints define. In this class, the type hints must be only str . Otherwise, TypeError will be raised. Examples: Defining subclass of this class class UserCredentials ( FormApiData ): user_id : str password : str Validating received data class MockEndpoint ( Endpoint ): @data_format ( input = UserCredentials , output = None ) def do_GET ( self , rec_body : UserCredentials ) -> None : # Do something... # Example authenticate ( rec_body . user_id , rec_body . password ) __init__ ( self , ** data ) special Parameters: Name Type Description Default raw Raw data to be validated. required content_type Values of Content-Type header. required Source code in bamboo/api/form.py def __init__ ( self , ** data : str ) -> None : \"\"\" Args: raw: Raw data to be validated. content_type: Values of `Content-Type` header. \"\"\" mapped = _build_dict ( self . __class__ , ** data ) self . __dict__ . update ( mapped . __dict__ ) __init_subclass__ () classmethod special This method is called when a class is subclassed. The default implementation does nothing. It may be overridden to extend subclasses. Source code in bamboo/api/form.py def __init_subclass__ ( cls ) -> None : _has_valid_annotations ( cls ) __validate__ ( raw , content_type ) classmethod special Parameters: Name Type Description Default raw bytes Raw data to be validated. required content_type ContentType Values of Content-Type header. required Returns: Type Description FormApiData The FormApiData object validated successfully. Source code in bamboo/api/form.py @classmethod def __validate__ ( cls , raw : bytes , content_type : ContentType , ) -> FormApiData : \"\"\" Args: raw: Raw data to be validated. content_type: Values of `Content-Type` header. Returns: The FormApiData object validated successfully. \"\"\" if content_type . charset is None : content_type . charset = \"UTF-8\" if not cls . verify_content_type ( content_type ): raise ApiValidationFailedError ( \"Media type of 'Content-Type' header is not \" f \" { MediaTypes . x_www_form_urlencoded } , \" f \"but { content_type . media_type } .\" ) try : raw = raw . decode ( encoding = content_type . charset ) except UnicodeDecodeError as e : raise ApiValidationFailedError ( \"Decoding raw data failed. The encoding was expected \" f \" { content_type . charset } , but not corresponded.\" ) from e return _build_form_api ( cls , raw ) json JsonApiData API data with JSON format. This class can be used to describe data with JSON format. This class should be inheritted and its several class-attributes should be defined in the subclass. Developers must define type hints of the class-attribtues, which are used to validate if raw data has format the type hints define. Examples: Defining subclass of this class class User ( JsonApiData ): name : str email : str age : int class MockApiData ( JsonApiData ): users : List [ User ] Validating received data class MockEndpoint ( Endpoint ): @data_format ( input = MockApiData , output = None ) def do_GET ( self , rec_body : MockApiData ) -> None : # Do something... # Example for user in rec_body . users : print ( f \"user name : { user . name } \" ) __init_subclass__ () classmethod special This method is called when a class is subclassed. The default implementation does nothing. It may be overridden to extend subclasses. Source code in bamboo/api/json.py def __init_subclass__ ( cls ) -> None : _has_valid_annotations ( cls ) __validate__ ( raw , content_type ) classmethod special Parameters: Name Type Description Default raw bytes Raw data to be validated. required content_type ContentType Values of Content-Type header. required Source code in bamboo/api/json.py @classmethod def __validate__ ( cls , raw : bytes , content_type : ContentType ) -> JsonApiData : \"\"\" Args: raw: Raw data to be validated. content_type: Values of `Content-Type` header. \"\"\" if content_type . charset is None : content_type . charset = \"UTF-8\" if not cls . verify_content_type ( content_type ): raise ApiValidationFailedError ( \"Media type of 'Content-Type' header was not \" f \" { MediaTypes . json } , but { content_type . media_type } .\" ) try : raw = raw . decode ( encoding = content_type . charset ) data = json . loads ( raw ) except UnicodeDecodeError : raise ApiValidationFailedError ( \"Decoding raw data failed. The encoding was expected \" f \" { content_type . charset } , but not corresponded.\" ) except json . decoder . JSONDecodeError : raise ApiValidationFailedError ( \"Decoding raw data failed.\" \"The raw data had invalid JSON format.\" ) return cls ( ** data )","title":"api"},{"location":"api/bamboo/api/#api","text":"","title":"api"},{"location":"api/bamboo/api/#bamboo.api.base","text":"","title":"base"},{"location":"api/bamboo/api/#bamboo.api.base.ApiData","text":"Base class to describe input/output data format on Endpoints as APIs. Subclasses of this class can be used an argument of data_format decorator for callbacks on Endpoints. If input/output parameters of the data_format are specified, the decorator validates if raw data, typically a bytes object, has expected data format. Subclasses of this class can define their own data formats in __init__ methods. Developers should implement __init__ methods of the subclasses such that each objects has data with expected formats by implementors. Note This class is an abstract class. So, don't initilize it and specify it as an argument of the data_format decorator. Subclasses of this class should validate if raw data given to __init__ methods has expected formats. If the validation failes, the classes MUST raise ValidataionFailedError to announce the failure to the data_format decorator.","title":"ApiData"},{"location":"api/bamboo/api/#bamboo.api.base.ApiData.__validate__","text":"Parameters: Name Type Description Default raw bytes Raw data to be validated. required content_type ContentType Values of Content-Type header. required Source code in bamboo/api/base.py @classmethod @abstractmethod def __validate__ ( cls , raw : bytes , content_type : ContentType ) -> ApiData : \"\"\" Args: raw : Raw data to be validated. content_type : Values of `Content-Type` header. \"\"\" pass","title":"__validate__()"},{"location":"api/bamboo/api/#bamboo.api.base.ApiValidationFailedError","text":"Raised if type validation of data failes.","title":"ApiValidationFailedError"},{"location":"api/bamboo/api/#bamboo.api.base.BinaryApiData","text":"API data with no format. This class can be used to describe raw data with no data format. So, any received data from clients is acceptable on the class. Examples: class MockEndpoint ( Endpoint ): @data_format ( input = BinaryApiData , output = None ) def do_GET ( self , rec_body : BinaryApiData ) -> None : # get raw data of request body raw_data = rec_body . raw","title":"BinaryApiData"},{"location":"api/bamboo/api/#bamboo.api.base.BinaryApiData.raw","text":"Raw data of input binary.","title":"raw"},{"location":"api/bamboo/api/#bamboo.api.base.BinaryApiData.__init__","text":"Parameters: Name Type Description Default data bytes Binary data. required Source code in bamboo/api/base.py def __init__ ( self , data : bytes ) -> None : \"\"\" Args: data: Binary data. \"\"\" self . _data = data","title":"__init__()"},{"location":"api/bamboo/api/#bamboo.api.base.BinaryApiData.__validate__","text":"Parameters: Name Type Description Default raw bytes Raw data to be validated. required content_type ContentType Values of Content-Type header. required Returns: Type Description BinaryApiData The BinaryApiData object validated succcessfully. Note In objects of this class, content_type is not used even if any content_type is specified. Source code in bamboo/api/base.py @classmethod def __validate__ ( cls , raw : bytes , content_type : ContentType ) -> BinaryApiData : \"\"\" Args: raw: Raw data to be validated. content_type: Values of `Content-Type` header. Returns: The BinaryApiData object validated succcessfully. Note: In objects of this class, `content_type` is not used even if any `content_type` is specified. \"\"\" if not isinstance ( raw , bytes ): raise ApiValidationFailedError ( f \"'raw' must be a 'bytes'.\" ) return cls ( raw )","title":"__validate__()"},{"location":"api/bamboo/api/#bamboo.api.form","text":"","title":"form"},{"location":"api/bamboo/api/#bamboo.api.form.FormApiData","text":"API data with x-www-form-urlencoded This class can be used to describe data with x-www-form-urlencoded format. This class should be inheritted and its several class-attributes should be defined in the subclass. Developer must define type hints of the class-attributes, which are used to validate if raw data has format the type hints define. In this class, the type hints must be only str . Otherwise, TypeError will be raised. Examples: Defining subclass of this class class UserCredentials ( FormApiData ): user_id : str password : str Validating received data class MockEndpoint ( Endpoint ): @data_format ( input = UserCredentials , output = None ) def do_GET ( self , rec_body : UserCredentials ) -> None : # Do something... # Example authenticate ( rec_body . user_id , rec_body . password )","title":"FormApiData"},{"location":"api/bamboo/api/#bamboo.api.form.FormApiData.__init__","text":"Parameters: Name Type Description Default raw Raw data to be validated. required content_type Values of Content-Type header. required Source code in bamboo/api/form.py def __init__ ( self , ** data : str ) -> None : \"\"\" Args: raw: Raw data to be validated. content_type: Values of `Content-Type` header. \"\"\" mapped = _build_dict ( self . __class__ , ** data ) self . __dict__ . update ( mapped . __dict__ )","title":"__init__()"},{"location":"api/bamboo/api/#bamboo.api.form.FormApiData.__init_subclass__","text":"This method is called when a class is subclassed. The default implementation does nothing. It may be overridden to extend subclasses. Source code in bamboo/api/form.py def __init_subclass__ ( cls ) -> None : _has_valid_annotations ( cls )","title":"__init_subclass__()"},{"location":"api/bamboo/api/#bamboo.api.form.FormApiData.__validate__","text":"Parameters: Name Type Description Default raw bytes Raw data to be validated. required content_type ContentType Values of Content-Type header. required Returns: Type Description FormApiData The FormApiData object validated successfully. Source code in bamboo/api/form.py @classmethod def __validate__ ( cls , raw : bytes , content_type : ContentType , ) -> FormApiData : \"\"\" Args: raw: Raw data to be validated. content_type: Values of `Content-Type` header. Returns: The FormApiData object validated successfully. \"\"\" if content_type . charset is None : content_type . charset = \"UTF-8\" if not cls . verify_content_type ( content_type ): raise ApiValidationFailedError ( \"Media type of 'Content-Type' header is not \" f \" { MediaTypes . x_www_form_urlencoded } , \" f \"but { content_type . media_type } .\" ) try : raw = raw . decode ( encoding = content_type . charset ) except UnicodeDecodeError as e : raise ApiValidationFailedError ( \"Decoding raw data failed. The encoding was expected \" f \" { content_type . charset } , but not corresponded.\" ) from e return _build_form_api ( cls , raw )","title":"__validate__()"},{"location":"api/bamboo/api/#bamboo.api.json","text":"","title":"json"},{"location":"api/bamboo/api/#bamboo.api.json.JsonApiData","text":"API data with JSON format. This class can be used to describe data with JSON format. This class should be inheritted and its several class-attributes should be defined in the subclass. Developers must define type hints of the class-attribtues, which are used to validate if raw data has format the type hints define. Examples: Defining subclass of this class class User ( JsonApiData ): name : str email : str age : int class MockApiData ( JsonApiData ): users : List [ User ] Validating received data class MockEndpoint ( Endpoint ): @data_format ( input = MockApiData , output = None ) def do_GET ( self , rec_body : MockApiData ) -> None : # Do something... # Example for user in rec_body . users : print ( f \"user name : { user . name } \" )","title":"JsonApiData"},{"location":"api/bamboo/api/#bamboo.api.json.JsonApiData.__init_subclass__","text":"This method is called when a class is subclassed. The default implementation does nothing. It may be overridden to extend subclasses. Source code in bamboo/api/json.py def __init_subclass__ ( cls ) -> None : _has_valid_annotations ( cls )","title":"__init_subclass__()"},{"location":"api/bamboo/api/#bamboo.api.json.JsonApiData.__validate__","text":"Parameters: Name Type Description Default raw bytes Raw data to be validated. required content_type ContentType Values of Content-Type header. required Source code in bamboo/api/json.py @classmethod def __validate__ ( cls , raw : bytes , content_type : ContentType ) -> JsonApiData : \"\"\" Args: raw: Raw data to be validated. content_type: Values of `Content-Type` header. \"\"\" if content_type . charset is None : content_type . charset = \"UTF-8\" if not cls . verify_content_type ( content_type ): raise ApiValidationFailedError ( \"Media type of 'Content-Type' header was not \" f \" { MediaTypes . json } , but { content_type . media_type } .\" ) try : raw = raw . decode ( encoding = content_type . charset ) data = json . loads ( raw ) except UnicodeDecodeError : raise ApiValidationFailedError ( \"Decoding raw data failed. The encoding was expected \" f \" { content_type . charset } , but not corresponded.\" ) except json . decoder . JSONDecodeError : raise ApiValidationFailedError ( \"Decoding raw data failed.\" \"The raw data had invalid JSON format.\" ) return cls ( ** data )","title":"__validate__()"},{"location":"api/bamboo/app/","text":"app AppBase Base class of all application in Bamboo. Bamboo has two core concepts called application and endpoint, and this class implements basic behavior of the former, e.g. containing multiple endpoints, routing requests from URIs to endpoints and so on. Note This class is an abstract class. Consider using its subclasses. Attributes: Name Type Description TAG_VERSION str Tag used when versions of Endpoint s are inserted in front of paths of URIs. If you want, you can override the value and set new favorite tag. By default, the tag is 'v'. tree : Uri2Endpoints_t property readonly Tree of the application's endpoints. __init__ ( self , error_404 = DefaultNotFoundErrInfo ()) special Parameters: Name Type Description Default error_404 ErrInfo Error sending if a request to not registered URI or HTTP method comes. DefaultNotFoundErrInfo() Source code in bamboo/app.py def __init__ ( self , error_404 : ErrInfo = DEFAULT_NOT_FOUND_ERROR ) -> None : \"\"\" Args: error_404: Error sending if a request to not registered URI or HTTP method comes. \"\"\" self . _router : Router [ Endpoint_t ] = Router () self . _error_404 = error_404 graft ( self , * apps , * , onto = ()) Graft other applications as branches of the application's tree. Parameters: Name Type Description Default *apps AppBase Branch applications. () onto t.Tuple[StaticLocation_t, ...] Root path of the branches. () Source code in bamboo/app.py def graft ( self , * apps : AppBase , onto : t . Tuple [ StaticLocation_t , ... ] = () ) -> None : \"\"\"Graft other applications as branches of the application's tree. Args: *apps: Branch applications. onto: Root path of the branches. \"\"\" for app in apps : for locs , endpoint in app . _router . _raw_uri2endpoint . items (): locs = onto + locs ver_config = VersionConfig ( endpoint ) version = ver_config . get ( app ) ver_config . set ( self , version = version ) if len ( version ): version = tuple ( f \" { self . TAG_VERSION }{ v } \" for v in version ) self . _router . register ( locs , endpoint , version = version ) route ( self , * locs , * , version = None ) Register combination of URI and Endpoint for routing. Parameters: Name Type Description Default *locs Location_t Locations of path of the URI bound with the Endpoint . () version t.Union[int, t.Tuple[int], None] Version of the Endpoint . None Returns: Type Description t.Callable[[t.Type[Endpoint_t]], t.Type[Endpoint_t]] Decorator to add combination of URI and Endpoint . Examples: app = App () # Set path of URI as `test/data/image` and the version as 1 @app . route ( \"test\" , \"data\" , \"image\" , version = 1 ) class MockEndpoint ( Endpoint ): def do_GET ( self ) -> None : # Do something... Source code in bamboo/app.py def route ( self , * locs : Location_t , version : t . Union [ int , t . Tuple [ int ], None ] = None ) -> t . Callable [[ t . Type [ Endpoint_t ]], t . Type [ Endpoint_t ]]: \"\"\"Register combination of URI and `Endpoint` for routing. Args: *locs: Locations of path of the URI bound with the `Endpoint`. version : Version of the `Endpoint`. Returns: Decorator to add combination of URI and `Endpoint`. Examples: ```python app = App() # Set path of URI as `test/data/image` and the version as 1 @app.route(\"test\", \"data\", \"image\", version=1) class MockEndpoint(Endpoint): def do_GET(self) -> None: # Do something... ``` \"\"\" def register_endpoint ( endpoint : t . Type [ Endpoint_t ], ) -> t . Type [ Endpoint_t ]: if not issubclass ( endpoint , self . __avalidable_endpoints ): raise TypeError ( f \" { endpoint . __name__ } is not avalidable in \" f \"the { self . __class__ . __name__ } .\" ) locs_normalized = tuple ([ loc for loc in locs if loc ]) # version setting ver_config = VersionConfig ( endpoint ) ver_config . set ( self , version ) # router setting _version = ver_config . get ( self ) assert _version is not None if len ( _version ): _version = tuple ( f \" { self . TAG_VERSION }{ v } \" for v in _version ) self . _router . register ( locs_normalized , endpoint , version = _version ) return endpoint return register_endpoint search_uris ( self , endpoint ) Retrieve all URI patterns of Endpoint . Note This method uses bamboo.Router.search_uris() method inner. For more information, see the API document. Parameters: Name Type Description Default endpoint t.Type[Endpoint_t] Endpoint whose URIs to be searched. required Returns: Type Description t.List[Uri_t] Result of searching. Source code in bamboo/app.py def search_uris ( self , endpoint : t . Type [ Endpoint_t ]) -> t . List [ Uri_t ]: \"\"\"Retrieve all URI patterns of `Endpoint`. Note: This method uses `bamboo.Router.search_uris()` method inner. For more information, see the API document. Args: endpoint: `Endpoint` whose URIs to be searched. Returns: Result of searching. \"\"\" return self . _router . search_uris ( endpoint ) set_parcel ( self , endpoint , * parcel ) Set parcel to an endpoint. This method enables to give objects to Endpoint objects dynamically. A parcel is a set of objects delivered via the method, and the Endpoint object of its destination receives it at EndpointBase.setup() method. Note For more information about the bamboo.EndpointBase.setup() , see the API document. Parameters: Name Type Description Default endpoint t.Type[Endpoint_t] Endpoint the parcel to be set. required *parcel t.Any Pacel to be given to the Endpoint . () Source code in bamboo/app.py def set_parcel ( self , endpoint : t . Type [ Endpoint_t ], * parcel : t . Any , ) -> AppBase : \"\"\"Set parcel to an endpoint. This method enables to give objects to `Endpoint` objects dynamically. A parcel is a set of objects delivered via the method, and the `Endpoint` object of its destination receives it at `EndpointBase.setup()` method. Note: For more information about the `bamboo.EndpointBase.setup()`, see the API document. Args: endpoint: `Endpoint` the `parcel` to be set. *parcel: Pacel to be given to the `Endpoint`. \"\"\" parcel_config = ParcelConfig ( endpoint ) parcel_config . set ( self , parcel ) return self validate ( self , uri ) Validate specified uri and retrieve corresponding Endpoint class. Note This method uses bamboo.Router.validate() method inner. For more information, see the API document. Parameters: Name Type Description Default uri str Path of URI to be validated. required Returns: Type Description t.Tuple[t.Tuple[str, ...], t.Optional[t.Type[Endpoint_t]]] Pair of values of flexible locations and Endpoint class if specified uri is valid, otherwise, pari of empty tuple and None. Source code in bamboo/app.py def validate ( self , uri : str , ) -> t . Tuple [ t . Tuple [ str , ... ], t . Optional [ t . Type [ Endpoint_t ]]]: \"\"\"Validate specified `uri` and retrieve corresponding `Endpoint` class. Note: This method uses `bamboo.Router.validate()` method inner. For more information, see the API document. Args: uri: Path of URI to be validated. Returns: Pair of values of flexible locations and `Endpoint` class if specified `uri` is valid, otherwise, pari of empty tuple and None. \"\"\" return self . _router . validate ( uri ) ASGIApp Application compliant with the ASGI. This class is a subclass of AppBase calss and implements the callbable compliant with the ASGI. Note This class can be used only for ASGI server. If you want to use any WSGI servers, consider using WSGIApp . This class can also route only ASGIHTTPEndpoint s and ASGIWebSocketEndpoint s. If you want to another type of endpoint, consider implementation class of its corresponding application. __call__ ( self , scope , recv , send ) async special Handle requests compliant with the ASGI. Parameters: Name Type Description Default scope t.Dict[str, t.Any] Connection scope in the ASGI. required recv ASGIRecv_t Awaitable callable to receive new event data. required send ASGISend_t Awaitable callable to send new event data. required Source code in bamboo/app.py async def __call__ ( self , scope : t . Dict [ str , t . Any ], recv : ASGIRecv_t , send : ASGISend_t , ) -> None : \"\"\"Handle requests compliant with the ASGI. Args: scope: Connection scope in the ASGI. recv: Awaitable callable to receive new event data. send: Awaitable callable to send new event data. \"\"\" typ = scope . get ( \"type\" ) if typ == ASGIProtocols . http : await self . handle_http ( scope , recv , send ) elif typ == ASGIProtocols . websocket : await self . handle_websocket ( scope , recv , send ) elif typ == ASGIProtocols . lifespan : await self . handle_lifespan ( scope , recv , send ) else : raise NotImplementedError __init__ ( self , error_404 = DefaultNotFoundErrInfo (), lifespan_handler =< function default_lifespan_handler at 0x7f28f4f14200 > ) special Parameters: Name Type Description Default error_404 ErrInfo Error sending if a request to not registered URI or HTTP method comes. DefaultNotFoundErrInfo() lifespan_handler LifespanHandler_t A callback with the type LifespanHandler_t . <function default_lifespan_handler at 0x7f28f4f14200> Source code in bamboo/app.py def __init__ ( self , error_404 : ErrInfo = DEFAULT_NOT_FOUND_ERROR , lifespan_handler : LifespanHandler_t = default_lifespan_handler , ) -> None : \"\"\" Args: error_404: Error sending if a request to not registered URI or HTTP method comes. lifespan_handler: A callback with the type `LifespanHandler_t`. \"\"\" super () . __init__ ( error_404 = error_404 ) self . _lifespan_handler = lifespan_handler apply_lifespan_handler ( self , lifespan_handler ) Apply a handler for the Lifespan protocol. This method sets a callback with the type LifespanHandler_t to handle requests with the Lifespan protocol. This method should be called only if one intends to set one's custom callback. Parameters: Name Type Description Default lifespan_handler LifespanHandler_t A callback with the type LifespanHandler_t . required Source code in bamboo/app.py def apply_lifespan_handler ( self , lifespan_handler : LifespanHandler_t , ) -> None : \"\"\"Apply a handler for the Lifespan protocol. This method sets a callback with the type `LifespanHandler_t` to handle requests with the Lifespan protocol. This method should be called only if one intends to set one's custom callback. Args: lifespan_handler: A callback with the type `LifespanHandler_t`. \"\"\" self . _lifespan_handler = lifespan_handler handle_http ( self , scope , recv , send ) async Handle requests with the HTTP protocol. This method only handles requests with the HTTP and is used in the __call__() method for the ASGI application. Therefore one doesn't have to call this method if one just runs the application. Parameters: Name Type Description Default scope t.Dict[str, t.Any] Connection scope in the ASGI. required recv ASGIRecv_t Awaitable callable to receive new event data. required send ASGISend_t Awaitable callable to send new event data. required Source code in bamboo/app.py async def handle_http ( self , scope : t . Dict [ str , t . Any ], recv : ASGIRecv_t , send : ASGISend_t , ) -> None : \"\"\"Handle requests with the HTTP protocol. This method only handles requests with the HTTP and is used in the `__call__()` method for the ASGI application. Therefore one doesn't have to call this method if one just runs the application. Args: scope: Connection scope in the ASGI. recv: Awaitable callable to receive new event data. send: Awaitable callable to send new event data. \"\"\" method = scope . get ( \"method\" ) path = scope . get ( \"path\" ) sendstart = get_http_sendstart ( send ) sendbody = get_http_sendbody ( send ) send_errinfo = get_http_send_errinfo ( send ) flexible_locs , endpoint_class = self . validate ( path ) if endpoint_class is None : await send_errinfo ( self . _error_404 , ()) return parcel_config = ParcelConfig ( endpoint_class ) parcel = parcel_config . get ( self ) pre_callback = endpoint_class . _get_pre_response_method ( method ) callback = endpoint_class . _get_response_method ( method ) if callback is None : await send_errinfo ( self . _error_404 , ()) return endpoint = endpoint_class ( self , scope , recv , flexible_locs ) # NOTE # Subclasses of the ErrInfo must be raised in pre-response # methods or response methods. Otherwise, the errors behave # like ordinary exception objects. try : endpoint . setup ( * parcel ) if pre_callback : await pre_callback ( endpoint ) await callback ( endpoint ) except ErrInfo as e : await send_errinfo ( e , endpoint . _res_headers ) return # NOTE # Other exceptions not inheriting the ErrInfo class # are not to be catched here. else : status = endpoint . _res_status headers = endpoint . _res_headers body = endpoint . _res_body await sendstart ( status , headers ) await sendbody ( body ) handle_lifespan ( self , scope , recv , send ) async Handle requests with the Lifespan protocol. This method only handles requests with the Lifespan and is used in the __call__() method for the ASGI application. Therefore one doesn't have to call this method if one just runs the application. Parameters: Name Type Description Default scope t.Dict[str, t.Any] Connection scope in the ASGI. required recv ASGIRecv_t Awaitable callable to receive new event data. required send ASGISend_t Awaitable callable to send new event data. required Source code in bamboo/app.py async def handle_lifespan ( self , scope : t . Dict [ str , t . Any ], recv : ASGIRecv_t , send : ASGISend_t , ) -> None : \"\"\"Handle requests with the Lifespan protocol. This method only handles requests with the Lifespan and is used in the `__call__()` method for the ASGI application. Therefore one doesn't have to call this method if one just runs the application. Args: scope: Connection scope in the ASGI. recv: Awaitable callable to receive new event data. send: Awaitable callable to send new event data. \"\"\" await self . _lifespan_handler ( scope , recv , send ) handle_websocket ( self , scope , recv , send ) async Handle requests with the WebSocket protocol. This method only handles requests with the WebSocket and is used in the __call__() method for the ASGI application. Therefore one doesn't have to call this method if one just runs the application. Parameters: Name Type Description Default scope t.Dict[str, t.Any] Connection scope in the ASGI. required recv ASGIRecv_t Awaitable callable to receive new event data. required send ASGISend_t Awaitable callable to send new event data. required Source code in bamboo/app.py async def handle_websocket ( self , scope : t . Dict [ str , t . Any ], recv : ASGIRecv_t , send : ASGISend_t , ) -> None : \"\"\"Handle requests with the WebSocket protocol. This method only handles requests with the WebSocket and is used in the `__call__()` method for the ASGI application. Therefore one doesn't have to call this method if one just runs the application. Args: scope: Connection scope in the ASGI. recv: Awaitable callable to receive new event data. send: Awaitable callable to send new event data. \"\"\" path = scope . get ( \"path\" ) flexible_locs , endpoint_class = self . validate ( path ) if endpoint_class is None : await self . send_404 ( send ) return parcel_config = ParcelConfig ( endpoint_class ) parcel = parcel_config . get ( self ) endpoint = endpoint_class ( self , scope , flexible_locs , * parcel ) # Establish connection msg = await recv () assert msg [ \"type\" ] == ASGIWebSocketEvents . connect accept = get_websock_accept ( send ) await endpoint . do_ACCEPT ( accept ) # Main communications recvmsg = get_websock_recvmsg ( recv ) sendmsg = get_websock_sendmsg ( send ) close = get_websock_close ( send ) await endpoint . do_COMMUNICATE ( recvmsg , sendmsg , close ) route ( self , * locs , * , version = None ) Register combination of URI and Endpoint for routing. Parameters: Name Type Description Default *locs Location_t Locations of path of the URI bound with the Endpoint . () version t.Union[int, t.Tuple[int], None] Version of the Endpoint . None Returns: Type Description t.Callable[[t.Type[ASGIEndpointBase]], t.Type[ASGIEndpointBase]] Decorator to add combination of URI and Endpoint . Examples: app = App () # Set path of URI as `test/data/image` and the version as 1 @app . route ( \"test\" , \"data\" , \"image\" , version = 1 ) class MockEndpoint ( Endpoint ): def do_GET ( self ) -> None : # Do something... Source code in bamboo/app.py def route ( self , * locs : Location_t , version : t . Union [ int , t . Tuple [ int ], None ] = None , ) -> t . Callable [[ t . Type [ ASGIEndpointBase ]], t . Type [ ASGIEndpointBase ]]: return super () . route ( * locs , version = version ) search_uris ( self , endpoint ) Retrieve all URI patterns of Endpoint . Note This method uses bamboo.Router.search_uris() method inner. For more information, see the API document. Parameters: Name Type Description Default endpoint t.Type[ASGIHTTPEndpoint] Endpoint whose URIs to be searched. required Returns: Type Description t.List[Uri_t] Result of searching. Source code in bamboo/app.py def search_uris ( self , endpoint : t . Type [ ASGIHTTPEndpoint ], ) -> t . List [ Uri_t ]: return super () . search_uris ( endpoint ) set_parcel ( self , endpoint , * parcel ) Set parcel to an endpoint. This method enables to give objects to Endpoint objects dynamically. A parcel is a set of objects delivered via the method, and the Endpoint object of its destination receives it at EndpointBase.setup() method. Note For more information about the bamboo.EndpointBase.setup() , see the API document. Parameters: Name Type Description Default endpoint t.Type[ASGIEndpointBase] Endpoint the parcel to be set. required *parcel t.Any Pacel to be given to the Endpoint . () Source code in bamboo/app.py def set_parcel ( self , endpoint : t . Type [ ASGIEndpointBase ], * parcel : t . Any , ) -> ASGIApp : super () . set_parcel ( endpoint , * parcel ) return self validate ( self , uri ) Validate specified uri and retrieve corresponding Endpoint class. Note This method uses bamboo.Router.validate() method inner. For more information, see the API document. Parameters: Name Type Description Default uri str Path of URI to be validated. required Returns: Type Description t.Tuple[t.Tuple[str, ...], t.Optional[t.Type[ASGIEndpointBase]]] Pair of values of flexible locations and Endpoint class if specified uri is valid, otherwise, pari of empty tuple and None. Source code in bamboo/app.py def validate ( self , uri : str , ) -> t . Tuple [ t . Tuple [ str , ... ], t . Optional [ t . Type [ ASGIEndpointBase ]]]: return super () . validate ( uri ) ParcelConfig Operator class for parcel of Endpoint . This class can be used to get and set parcel of Endpoint safely. __init__ ( self , endpoint ) special Parameters: Name Type Description Default endpoint t.Type[EndpointBase] Endpoint whose parcel is to be manipulated. required Source code in bamboo/app.py def __init__ ( self , endpoint : t . Type [ EndpointBase ]) -> None : \"\"\" Args: endpoint : `Endpoint` whose parcel is to be manipulated. \"\"\" self . _endpoint_class = endpoint get ( self , app ) Retrieve parcel belonging to specified app . Parameters: Name Type Description Default app AppBase Application including the internal Endpoint required Returns: Type Description Parcel_t Parcel set to Endpoint , if not set yet, then None . Source code in bamboo/app.py def get ( self , app : AppBase ) -> Parcel_t : \"\"\"Retrieve parcel belonging to specified `app`. Args: app: Application including the internal `Endpoint` Returns: Parcel set to `Endpoint`, if not set yet, then `None`. \"\"\" if hasattr ( self . _endpoint_class , ATTR_PARCEL ): registered = getattr ( self . _endpoint_class , ATTR_PARCEL ) return registered . get ( app ) return () get_all ( self ) Retrieve parcels belonging to all AppBase objects. Returns: Type Description t.List[t.Tuple[AppBase, Parcel_t]] List of tuples of AppBase objects and their parcels. Source code in bamboo/app.py def get_all ( self ) -> t . List [ t . Tuple [ AppBase , Parcel_t ]]: \"\"\"Retrieve parcels belonging to all `AppBase` objects. Returns: List of tuples of `AppBase` objects and their parcels. \"\"\" if hasattr ( self . _endpoint_class , ATTR_PARCEL ): registered = getattr ( self . _endpoint_class , ATTR_PARCEL ) return [( app , parcel ) for app , parcel in registered . items ()] return [] set ( self , app , parcel ) Ser parcel of Endpoint . Parameters: Name Type Description Default app AppBase Application including the internal Endpoint . required parcel Parcel_t Parcel to be set. required Source code in bamboo/app.py def set ( self , app : AppBase , parcel : Parcel_t ) -> None : \"\"\"Ser parcel of `Endpoint`. Args: app: Application including the internal `Endpoint`. parcel: Parcel to be set. \"\"\" if not hasattr ( self . _endpoint_class , ATTR_PARCEL ): setattr ( self . _endpoint_class , ATTR_PARCEL , {}) registered = getattr ( self . _endpoint_class , ATTR_PARCEL ) registered [ app ] = parcel VersionConfig Operator class for version of Endpoint . This class can be used to get and set version of Endpoint safely. __init__ ( self , endpoint ) special Parameters: Name Type Description Default endpoint t.Type[EndpointBase] Endpoint whose version is to be manipulated required Source code in bamboo/app.py def __init__ ( self , endpoint : t . Type [ EndpointBase ]) -> None : \"\"\" Args: endpoint: `Endpoint` whose version is to be manipulated \"\"\" self . _endpoint_class = endpoint get ( self , app ) Retrieve version belonging to specified app . Parameters: Name Type Description Default app AppBase Application including the internal Endpoint . required Returns: Type Description t.Optional[Version_t] Version set to Endpoint , if not set yet, then None. Source code in bamboo/app.py def get ( self , app : AppBase ) -> t . Optional [ Version_t ]: \"\"\"Retrieve version belonging to specified `app`. Args: app: Application including the internal `Endpoint`. Returns: Version set to `Endpoint`, if not set yet, then None. \"\"\" if hasattr ( self . _endpoint_class , ATTR_VERSION ): registered = getattr ( self . _endpoint_class , ATTR_VERSION ) return registered . get ( app ) return None get_all ( self ) Retrieve versions belonging to all AppBase objects. Returns: Type Description t.List[t.Tuple[AppBase, Version_t]] List of tuples of AppBase objects and their versions. Source code in bamboo/app.py def get_all ( self ) -> t . List [ t . Tuple [ AppBase , Version_t ]]: \"\"\"Retrieve versions belonging to all `AppBase` objects. Returns: List of tuples of `AppBase` objects and their versions. \"\"\" if hasattr ( self . _endpoint_class , ATTR_VERSION ): registered = getattr ( self . _endpoint_class , ATTR_VERSION ) return [( app , version ) for app , version in registered . items ()] return [] set ( self , app , version = None ) Set version of Endpoint . Parameters: Name Type Description Default app AppBase Application including the internal Endpoint . required version t.Union[int, t.Tuple[int], None] Version to be set. None force If forcing to set the version . required Exceptions: Type Description ValueError Raised if version of the Endpoint has already been set. Source code in bamboo/app.py def set ( self , app : AppBase , version : t . Union [ int , t . Tuple [ int ], None ] = None , ) -> None : \"\"\"Set version of `Endpoint`. Args: app: Application including the internal `Endpoint`. version: Version to be set. force: If forcing to set the `version`. Raises: ValueError: Raised if version of the `Endpoint` has already been set. \"\"\" if not hasattr ( self . _endpoint_class , ATTR_VERSION ): setattr ( self . _endpoint_class , ATTR_VERSION , {}) registered = getattr ( self . _endpoint_class , ATTR_VERSION ) # Format to fit the type Version_t if version is None : version = () if isinstance ( version , int ): version = ( version ,) registered [ app ] = version WSGIApp Application compliant with the WSGI. This class is a subclass of AppBase calss and implements the callbable compliant with the WSGI. Note This class can be used only for WSGI server. If you want to use any ASGI servers, consider using ASGIHTTPApp . This class can also route only WSGIEndpoint s. If you want to another type of endpoint, consider implementation class of its corresponding application. route ( self , * locs , * , version = None ) Register combination of URI and Endpoint for routing. Parameters: Name Type Description Default *locs Location_t Locations of path of the URI bound with the Endpoint . () version t.Union[int, t.Tuple[int], None] Version of the Endpoint . None Returns: Type Description t.Callable[[t.Type[WSGIEndpoint]], t.Type[WSGIEndpoint]] Decorator to add combination of URI and Endpoint . Examples: app = App () # Set path of URI as `test/data/image` and the version as 1 @app . route ( \"test\" , \"data\" , \"image\" , version = 1 ) class MockEndpoint ( Endpoint ): def do_GET ( self ) -> None : # Do something... Source code in bamboo/app.py def route ( self , * locs : Location_t , version : t . Union [ int , t . Tuple [ int ], None ] = None ) -> t . Callable [[ t . Type [ WSGIEndpoint ]], t . Type [ WSGIEndpoint ]]: return super () . route ( * locs , version = version ) search_uris ( self , endpoint ) Retrieve all URI patterns of Endpoint . Note This method uses bamboo.Router.search_uris() method inner. For more information, see the API document. Parameters: Name Type Description Default endpoint t.Type[WSGIEndpoint] Endpoint whose URIs to be searched. required Returns: Type Description t.List[Uri_t] Result of searching. Source code in bamboo/app.py def search_uris ( self , endpoint : t . Type [ WSGIEndpoint ]) -> t . List [ Uri_t ]: return super () . search_uris ( endpoint ) send_404 ( self , start_response ) Send 404 error code, i.e. Resource Not Found error. Parameters: Name Type Description Default start_response WSGIStartRespoint_t start_response callable given from the WSGI application. required Returns: Type Description BufferedConcatIterator Response body of the error. Source code in bamboo/app.py def send_404 ( self , start_response : WSGIStartRespoint_t , ) -> BufferedConcatIterator : \"\"\"Send `404` error code, i.e. `Resource Not Found` error. Args: start_response: `start_response` callable given from the WSGI application. Returns: Response body of the error. \"\"\" status , headers , res_body = self . _error_404 . get_all_form () start_response ( status . wsgi , headers ) return res_body set_parcel ( self , endpoint , * parcel ) Set parcel to an endpoint. This method enables to give objects to Endpoint objects dynamically. A parcel is a set of objects delivered via the method, and the Endpoint object of its destination receives it at EndpointBase.setup() method. Note For more information about the bamboo.EndpointBase.setup() , see the API document. Parameters: Name Type Description Default endpoint t.Type[WSGIEndpoint] Endpoint the parcel to be set. required *parcel t.Any Pacel to be given to the Endpoint . () Source code in bamboo/app.py def set_parcel ( self , endpoint : t . Type [ WSGIEndpoint ], * parcel : t . Any ) -> WSGIApp : super () . set_parcel ( endpoint , * parcel ) return self validate ( self , uri ) Validate specified uri and retrieve corresponding Endpoint class. Note This method uses bamboo.Router.validate() method inner. For more information, see the API document. Parameters: Name Type Description Default uri str Path of URI to be validated. required Returns: Type Description t.Tuple[t.Tuple[str, ...], t.Optional[t.Type[WSGIEndpoint]]] Pair of values of flexible locations and Endpoint class if specified uri is valid, otherwise, pari of empty tuple and None. Source code in bamboo/app.py def validate ( self , uri : str ) -> t . Tuple [ t . Tuple [ str , ... ], t . Optional [ t . Type [ WSGIEndpoint ]]]: return super () . validate ( uri )","title":"app"},{"location":"api/bamboo/app/#app","text":"","title":"app"},{"location":"api/bamboo/app/#bamboo.app.AppBase","text":"Base class of all application in Bamboo. Bamboo has two core concepts called application and endpoint, and this class implements basic behavior of the former, e.g. containing multiple endpoints, routing requests from URIs to endpoints and so on. Note This class is an abstract class. Consider using its subclasses. Attributes: Name Type Description TAG_VERSION str Tag used when versions of Endpoint s are inserted in front of paths of URIs. If you want, you can override the value and set new favorite tag. By default, the tag is 'v'.","title":"AppBase"},{"location":"api/bamboo/app/#bamboo.app.AppBase.tree","text":"Tree of the application's endpoints.","title":"tree"},{"location":"api/bamboo/app/#bamboo.app.AppBase.__init__","text":"Parameters: Name Type Description Default error_404 ErrInfo Error sending if a request to not registered URI or HTTP method comes. DefaultNotFoundErrInfo() Source code in bamboo/app.py def __init__ ( self , error_404 : ErrInfo = DEFAULT_NOT_FOUND_ERROR ) -> None : \"\"\" Args: error_404: Error sending if a request to not registered URI or HTTP method comes. \"\"\" self . _router : Router [ Endpoint_t ] = Router () self . _error_404 = error_404","title":"__init__()"},{"location":"api/bamboo/app/#bamboo.app.AppBase.graft","text":"Graft other applications as branches of the application's tree. Parameters: Name Type Description Default *apps AppBase Branch applications. () onto t.Tuple[StaticLocation_t, ...] Root path of the branches. () Source code in bamboo/app.py def graft ( self , * apps : AppBase , onto : t . Tuple [ StaticLocation_t , ... ] = () ) -> None : \"\"\"Graft other applications as branches of the application's tree. Args: *apps: Branch applications. onto: Root path of the branches. \"\"\" for app in apps : for locs , endpoint in app . _router . _raw_uri2endpoint . items (): locs = onto + locs ver_config = VersionConfig ( endpoint ) version = ver_config . get ( app ) ver_config . set ( self , version = version ) if len ( version ): version = tuple ( f \" { self . TAG_VERSION }{ v } \" for v in version ) self . _router . register ( locs , endpoint , version = version )","title":"graft()"},{"location":"api/bamboo/app/#bamboo.app.AppBase.route","text":"Register combination of URI and Endpoint for routing. Parameters: Name Type Description Default *locs Location_t Locations of path of the URI bound with the Endpoint . () version t.Union[int, t.Tuple[int], None] Version of the Endpoint . None Returns: Type Description t.Callable[[t.Type[Endpoint_t]], t.Type[Endpoint_t]] Decorator to add combination of URI and Endpoint . Examples: app = App () # Set path of URI as `test/data/image` and the version as 1 @app . route ( \"test\" , \"data\" , \"image\" , version = 1 ) class MockEndpoint ( Endpoint ): def do_GET ( self ) -> None : # Do something... Source code in bamboo/app.py def route ( self , * locs : Location_t , version : t . Union [ int , t . Tuple [ int ], None ] = None ) -> t . Callable [[ t . Type [ Endpoint_t ]], t . Type [ Endpoint_t ]]: \"\"\"Register combination of URI and `Endpoint` for routing. Args: *locs: Locations of path of the URI bound with the `Endpoint`. version : Version of the `Endpoint`. Returns: Decorator to add combination of URI and `Endpoint`. Examples: ```python app = App() # Set path of URI as `test/data/image` and the version as 1 @app.route(\"test\", \"data\", \"image\", version=1) class MockEndpoint(Endpoint): def do_GET(self) -> None: # Do something... ``` \"\"\" def register_endpoint ( endpoint : t . Type [ Endpoint_t ], ) -> t . Type [ Endpoint_t ]: if not issubclass ( endpoint , self . __avalidable_endpoints ): raise TypeError ( f \" { endpoint . __name__ } is not avalidable in \" f \"the { self . __class__ . __name__ } .\" ) locs_normalized = tuple ([ loc for loc in locs if loc ]) # version setting ver_config = VersionConfig ( endpoint ) ver_config . set ( self , version ) # router setting _version = ver_config . get ( self ) assert _version is not None if len ( _version ): _version = tuple ( f \" { self . TAG_VERSION }{ v } \" for v in _version ) self . _router . register ( locs_normalized , endpoint , version = _version ) return endpoint return register_endpoint","title":"route()"},{"location":"api/bamboo/app/#bamboo.app.AppBase.search_uris","text":"Retrieve all URI patterns of Endpoint . Note This method uses bamboo.Router.search_uris() method inner. For more information, see the API document. Parameters: Name Type Description Default endpoint t.Type[Endpoint_t] Endpoint whose URIs to be searched. required Returns: Type Description t.List[Uri_t] Result of searching. Source code in bamboo/app.py def search_uris ( self , endpoint : t . Type [ Endpoint_t ]) -> t . List [ Uri_t ]: \"\"\"Retrieve all URI patterns of `Endpoint`. Note: This method uses `bamboo.Router.search_uris()` method inner. For more information, see the API document. Args: endpoint: `Endpoint` whose URIs to be searched. Returns: Result of searching. \"\"\" return self . _router . search_uris ( endpoint )","title":"search_uris()"},{"location":"api/bamboo/app/#bamboo.app.AppBase.set_parcel","text":"Set parcel to an endpoint. This method enables to give objects to Endpoint objects dynamically. A parcel is a set of objects delivered via the method, and the Endpoint object of its destination receives it at EndpointBase.setup() method. Note For more information about the bamboo.EndpointBase.setup() , see the API document. Parameters: Name Type Description Default endpoint t.Type[Endpoint_t] Endpoint the parcel to be set. required *parcel t.Any Pacel to be given to the Endpoint . () Source code in bamboo/app.py def set_parcel ( self , endpoint : t . Type [ Endpoint_t ], * parcel : t . Any , ) -> AppBase : \"\"\"Set parcel to an endpoint. This method enables to give objects to `Endpoint` objects dynamically. A parcel is a set of objects delivered via the method, and the `Endpoint` object of its destination receives it at `EndpointBase.setup()` method. Note: For more information about the `bamboo.EndpointBase.setup()`, see the API document. Args: endpoint: `Endpoint` the `parcel` to be set. *parcel: Pacel to be given to the `Endpoint`. \"\"\" parcel_config = ParcelConfig ( endpoint ) parcel_config . set ( self , parcel ) return self","title":"set_parcel()"},{"location":"api/bamboo/app/#bamboo.app.AppBase.validate","text":"Validate specified uri and retrieve corresponding Endpoint class. Note This method uses bamboo.Router.validate() method inner. For more information, see the API document. Parameters: Name Type Description Default uri str Path of URI to be validated. required Returns: Type Description t.Tuple[t.Tuple[str, ...], t.Optional[t.Type[Endpoint_t]]] Pair of values of flexible locations and Endpoint class if specified uri is valid, otherwise, pari of empty tuple and None. Source code in bamboo/app.py def validate ( self , uri : str , ) -> t . Tuple [ t . Tuple [ str , ... ], t . Optional [ t . Type [ Endpoint_t ]]]: \"\"\"Validate specified `uri` and retrieve corresponding `Endpoint` class. Note: This method uses `bamboo.Router.validate()` method inner. For more information, see the API document. Args: uri: Path of URI to be validated. Returns: Pair of values of flexible locations and `Endpoint` class if specified `uri` is valid, otherwise, pari of empty tuple and None. \"\"\" return self . _router . validate ( uri )","title":"validate()"},{"location":"api/bamboo/app/#bamboo.app.ASGIApp","text":"Application compliant with the ASGI. This class is a subclass of AppBase calss and implements the callbable compliant with the ASGI. Note This class can be used only for ASGI server. If you want to use any WSGI servers, consider using WSGIApp . This class can also route only ASGIHTTPEndpoint s and ASGIWebSocketEndpoint s. If you want to another type of endpoint, consider implementation class of its corresponding application.","title":"ASGIApp"},{"location":"api/bamboo/app/#bamboo.app.ASGIApp.__call__","text":"Handle requests compliant with the ASGI. Parameters: Name Type Description Default scope t.Dict[str, t.Any] Connection scope in the ASGI. required recv ASGIRecv_t Awaitable callable to receive new event data. required send ASGISend_t Awaitable callable to send new event data. required Source code in bamboo/app.py async def __call__ ( self , scope : t . Dict [ str , t . Any ], recv : ASGIRecv_t , send : ASGISend_t , ) -> None : \"\"\"Handle requests compliant with the ASGI. Args: scope: Connection scope in the ASGI. recv: Awaitable callable to receive new event data. send: Awaitable callable to send new event data. \"\"\" typ = scope . get ( \"type\" ) if typ == ASGIProtocols . http : await self . handle_http ( scope , recv , send ) elif typ == ASGIProtocols . websocket : await self . handle_websocket ( scope , recv , send ) elif typ == ASGIProtocols . lifespan : await self . handle_lifespan ( scope , recv , send ) else : raise NotImplementedError","title":"__call__()"},{"location":"api/bamboo/app/#bamboo.app.ASGIApp.__init__","text":"Parameters: Name Type Description Default error_404 ErrInfo Error sending if a request to not registered URI or HTTP method comes. DefaultNotFoundErrInfo() lifespan_handler LifespanHandler_t A callback with the type LifespanHandler_t . <function default_lifespan_handler at 0x7f28f4f14200> Source code in bamboo/app.py def __init__ ( self , error_404 : ErrInfo = DEFAULT_NOT_FOUND_ERROR , lifespan_handler : LifespanHandler_t = default_lifespan_handler , ) -> None : \"\"\" Args: error_404: Error sending if a request to not registered URI or HTTP method comes. lifespan_handler: A callback with the type `LifespanHandler_t`. \"\"\" super () . __init__ ( error_404 = error_404 ) self . _lifespan_handler = lifespan_handler","title":"__init__()"},{"location":"api/bamboo/app/#bamboo.app.ASGIApp.apply_lifespan_handler","text":"Apply a handler for the Lifespan protocol. This method sets a callback with the type LifespanHandler_t to handle requests with the Lifespan protocol. This method should be called only if one intends to set one's custom callback. Parameters: Name Type Description Default lifespan_handler LifespanHandler_t A callback with the type LifespanHandler_t . required Source code in bamboo/app.py def apply_lifespan_handler ( self , lifespan_handler : LifespanHandler_t , ) -> None : \"\"\"Apply a handler for the Lifespan protocol. This method sets a callback with the type `LifespanHandler_t` to handle requests with the Lifespan protocol. This method should be called only if one intends to set one's custom callback. Args: lifespan_handler: A callback with the type `LifespanHandler_t`. \"\"\" self . _lifespan_handler = lifespan_handler","title":"apply_lifespan_handler()"},{"location":"api/bamboo/app/#bamboo.app.ASGIApp.handle_http","text":"Handle requests with the HTTP protocol. This method only handles requests with the HTTP and is used in the __call__() method for the ASGI application. Therefore one doesn't have to call this method if one just runs the application. Parameters: Name Type Description Default scope t.Dict[str, t.Any] Connection scope in the ASGI. required recv ASGIRecv_t Awaitable callable to receive new event data. required send ASGISend_t Awaitable callable to send new event data. required Source code in bamboo/app.py async def handle_http ( self , scope : t . Dict [ str , t . Any ], recv : ASGIRecv_t , send : ASGISend_t , ) -> None : \"\"\"Handle requests with the HTTP protocol. This method only handles requests with the HTTP and is used in the `__call__()` method for the ASGI application. Therefore one doesn't have to call this method if one just runs the application. Args: scope: Connection scope in the ASGI. recv: Awaitable callable to receive new event data. send: Awaitable callable to send new event data. \"\"\" method = scope . get ( \"method\" ) path = scope . get ( \"path\" ) sendstart = get_http_sendstart ( send ) sendbody = get_http_sendbody ( send ) send_errinfo = get_http_send_errinfo ( send ) flexible_locs , endpoint_class = self . validate ( path ) if endpoint_class is None : await send_errinfo ( self . _error_404 , ()) return parcel_config = ParcelConfig ( endpoint_class ) parcel = parcel_config . get ( self ) pre_callback = endpoint_class . _get_pre_response_method ( method ) callback = endpoint_class . _get_response_method ( method ) if callback is None : await send_errinfo ( self . _error_404 , ()) return endpoint = endpoint_class ( self , scope , recv , flexible_locs ) # NOTE # Subclasses of the ErrInfo must be raised in pre-response # methods or response methods. Otherwise, the errors behave # like ordinary exception objects. try : endpoint . setup ( * parcel ) if pre_callback : await pre_callback ( endpoint ) await callback ( endpoint ) except ErrInfo as e : await send_errinfo ( e , endpoint . _res_headers ) return # NOTE # Other exceptions not inheriting the ErrInfo class # are not to be catched here. else : status = endpoint . _res_status headers = endpoint . _res_headers body = endpoint . _res_body await sendstart ( status , headers ) await sendbody ( body )","title":"handle_http()"},{"location":"api/bamboo/app/#bamboo.app.ASGIApp.handle_lifespan","text":"Handle requests with the Lifespan protocol. This method only handles requests with the Lifespan and is used in the __call__() method for the ASGI application. Therefore one doesn't have to call this method if one just runs the application. Parameters: Name Type Description Default scope t.Dict[str, t.Any] Connection scope in the ASGI. required recv ASGIRecv_t Awaitable callable to receive new event data. required send ASGISend_t Awaitable callable to send new event data. required Source code in bamboo/app.py async def handle_lifespan ( self , scope : t . Dict [ str , t . Any ], recv : ASGIRecv_t , send : ASGISend_t , ) -> None : \"\"\"Handle requests with the Lifespan protocol. This method only handles requests with the Lifespan and is used in the `__call__()` method for the ASGI application. Therefore one doesn't have to call this method if one just runs the application. Args: scope: Connection scope in the ASGI. recv: Awaitable callable to receive new event data. send: Awaitable callable to send new event data. \"\"\" await self . _lifespan_handler ( scope , recv , send )","title":"handle_lifespan()"},{"location":"api/bamboo/app/#bamboo.app.ASGIApp.handle_websocket","text":"Handle requests with the WebSocket protocol. This method only handles requests with the WebSocket and is used in the __call__() method for the ASGI application. Therefore one doesn't have to call this method if one just runs the application. Parameters: Name Type Description Default scope t.Dict[str, t.Any] Connection scope in the ASGI. required recv ASGIRecv_t Awaitable callable to receive new event data. required send ASGISend_t Awaitable callable to send new event data. required Source code in bamboo/app.py async def handle_websocket ( self , scope : t . Dict [ str , t . Any ], recv : ASGIRecv_t , send : ASGISend_t , ) -> None : \"\"\"Handle requests with the WebSocket protocol. This method only handles requests with the WebSocket and is used in the `__call__()` method for the ASGI application. Therefore one doesn't have to call this method if one just runs the application. Args: scope: Connection scope in the ASGI. recv: Awaitable callable to receive new event data. send: Awaitable callable to send new event data. \"\"\" path = scope . get ( \"path\" ) flexible_locs , endpoint_class = self . validate ( path ) if endpoint_class is None : await self . send_404 ( send ) return parcel_config = ParcelConfig ( endpoint_class ) parcel = parcel_config . get ( self ) endpoint = endpoint_class ( self , scope , flexible_locs , * parcel ) # Establish connection msg = await recv () assert msg [ \"type\" ] == ASGIWebSocketEvents . connect accept = get_websock_accept ( send ) await endpoint . do_ACCEPT ( accept ) # Main communications recvmsg = get_websock_recvmsg ( recv ) sendmsg = get_websock_sendmsg ( send ) close = get_websock_close ( send ) await endpoint . do_COMMUNICATE ( recvmsg , sendmsg , close )","title":"handle_websocket()"},{"location":"api/bamboo/app/#bamboo.app.ASGIApp.route","text":"Register combination of URI and Endpoint for routing. Parameters: Name Type Description Default *locs Location_t Locations of path of the URI bound with the Endpoint . () version t.Union[int, t.Tuple[int], None] Version of the Endpoint . None Returns: Type Description t.Callable[[t.Type[ASGIEndpointBase]], t.Type[ASGIEndpointBase]] Decorator to add combination of URI and Endpoint . Examples: app = App () # Set path of URI as `test/data/image` and the version as 1 @app . route ( \"test\" , \"data\" , \"image\" , version = 1 ) class MockEndpoint ( Endpoint ): def do_GET ( self ) -> None : # Do something... Source code in bamboo/app.py def route ( self , * locs : Location_t , version : t . Union [ int , t . Tuple [ int ], None ] = None , ) -> t . Callable [[ t . Type [ ASGIEndpointBase ]], t . Type [ ASGIEndpointBase ]]: return super () . route ( * locs , version = version )","title":"route()"},{"location":"api/bamboo/app/#bamboo.app.ASGIApp.search_uris","text":"Retrieve all URI patterns of Endpoint . Note This method uses bamboo.Router.search_uris() method inner. For more information, see the API document. Parameters: Name Type Description Default endpoint t.Type[ASGIHTTPEndpoint] Endpoint whose URIs to be searched. required Returns: Type Description t.List[Uri_t] Result of searching. Source code in bamboo/app.py def search_uris ( self , endpoint : t . Type [ ASGIHTTPEndpoint ], ) -> t . List [ Uri_t ]: return super () . search_uris ( endpoint )","title":"search_uris()"},{"location":"api/bamboo/app/#bamboo.app.ASGIApp.set_parcel","text":"Set parcel to an endpoint. This method enables to give objects to Endpoint objects dynamically. A parcel is a set of objects delivered via the method, and the Endpoint object of its destination receives it at EndpointBase.setup() method. Note For more information about the bamboo.EndpointBase.setup() , see the API document. Parameters: Name Type Description Default endpoint t.Type[ASGIEndpointBase] Endpoint the parcel to be set. required *parcel t.Any Pacel to be given to the Endpoint . () Source code in bamboo/app.py def set_parcel ( self , endpoint : t . Type [ ASGIEndpointBase ], * parcel : t . Any , ) -> ASGIApp : super () . set_parcel ( endpoint , * parcel ) return self","title":"set_parcel()"},{"location":"api/bamboo/app/#bamboo.app.ASGIApp.validate","text":"Validate specified uri and retrieve corresponding Endpoint class. Note This method uses bamboo.Router.validate() method inner. For more information, see the API document. Parameters: Name Type Description Default uri str Path of URI to be validated. required Returns: Type Description t.Tuple[t.Tuple[str, ...], t.Optional[t.Type[ASGIEndpointBase]]] Pair of values of flexible locations and Endpoint class if specified uri is valid, otherwise, pari of empty tuple and None. Source code in bamboo/app.py def validate ( self , uri : str , ) -> t . Tuple [ t . Tuple [ str , ... ], t . Optional [ t . Type [ ASGIEndpointBase ]]]: return super () . validate ( uri )","title":"validate()"},{"location":"api/bamboo/app/#bamboo.app.ParcelConfig","text":"Operator class for parcel of Endpoint . This class can be used to get and set parcel of Endpoint safely.","title":"ParcelConfig"},{"location":"api/bamboo/app/#bamboo.app.ParcelConfig.__init__","text":"Parameters: Name Type Description Default endpoint t.Type[EndpointBase] Endpoint whose parcel is to be manipulated. required Source code in bamboo/app.py def __init__ ( self , endpoint : t . Type [ EndpointBase ]) -> None : \"\"\" Args: endpoint : `Endpoint` whose parcel is to be manipulated. \"\"\" self . _endpoint_class = endpoint","title":"__init__()"},{"location":"api/bamboo/app/#bamboo.app.ParcelConfig.get","text":"Retrieve parcel belonging to specified app . Parameters: Name Type Description Default app AppBase Application including the internal Endpoint required Returns: Type Description Parcel_t Parcel set to Endpoint , if not set yet, then None . Source code in bamboo/app.py def get ( self , app : AppBase ) -> Parcel_t : \"\"\"Retrieve parcel belonging to specified `app`. Args: app: Application including the internal `Endpoint` Returns: Parcel set to `Endpoint`, if not set yet, then `None`. \"\"\" if hasattr ( self . _endpoint_class , ATTR_PARCEL ): registered = getattr ( self . _endpoint_class , ATTR_PARCEL ) return registered . get ( app ) return ()","title":"get()"},{"location":"api/bamboo/app/#bamboo.app.ParcelConfig.get_all","text":"Retrieve parcels belonging to all AppBase objects. Returns: Type Description t.List[t.Tuple[AppBase, Parcel_t]] List of tuples of AppBase objects and their parcels. Source code in bamboo/app.py def get_all ( self ) -> t . List [ t . Tuple [ AppBase , Parcel_t ]]: \"\"\"Retrieve parcels belonging to all `AppBase` objects. Returns: List of tuples of `AppBase` objects and their parcels. \"\"\" if hasattr ( self . _endpoint_class , ATTR_PARCEL ): registered = getattr ( self . _endpoint_class , ATTR_PARCEL ) return [( app , parcel ) for app , parcel in registered . items ()] return []","title":"get_all()"},{"location":"api/bamboo/app/#bamboo.app.ParcelConfig.set","text":"Ser parcel of Endpoint . Parameters: Name Type Description Default app AppBase Application including the internal Endpoint . required parcel Parcel_t Parcel to be set. required Source code in bamboo/app.py def set ( self , app : AppBase , parcel : Parcel_t ) -> None : \"\"\"Ser parcel of `Endpoint`. Args: app: Application including the internal `Endpoint`. parcel: Parcel to be set. \"\"\" if not hasattr ( self . _endpoint_class , ATTR_PARCEL ): setattr ( self . _endpoint_class , ATTR_PARCEL , {}) registered = getattr ( self . _endpoint_class , ATTR_PARCEL ) registered [ app ] = parcel","title":"set()"},{"location":"api/bamboo/app/#bamboo.app.VersionConfig","text":"Operator class for version of Endpoint . This class can be used to get and set version of Endpoint safely.","title":"VersionConfig"},{"location":"api/bamboo/app/#bamboo.app.VersionConfig.__init__","text":"Parameters: Name Type Description Default endpoint t.Type[EndpointBase] Endpoint whose version is to be manipulated required Source code in bamboo/app.py def __init__ ( self , endpoint : t . Type [ EndpointBase ]) -> None : \"\"\" Args: endpoint: `Endpoint` whose version is to be manipulated \"\"\" self . _endpoint_class = endpoint","title":"__init__()"},{"location":"api/bamboo/app/#bamboo.app.VersionConfig.get","text":"Retrieve version belonging to specified app . Parameters: Name Type Description Default app AppBase Application including the internal Endpoint . required Returns: Type Description t.Optional[Version_t] Version set to Endpoint , if not set yet, then None. Source code in bamboo/app.py def get ( self , app : AppBase ) -> t . Optional [ Version_t ]: \"\"\"Retrieve version belonging to specified `app`. Args: app: Application including the internal `Endpoint`. Returns: Version set to `Endpoint`, if not set yet, then None. \"\"\" if hasattr ( self . _endpoint_class , ATTR_VERSION ): registered = getattr ( self . _endpoint_class , ATTR_VERSION ) return registered . get ( app ) return None","title":"get()"},{"location":"api/bamboo/app/#bamboo.app.VersionConfig.get_all","text":"Retrieve versions belonging to all AppBase objects. Returns: Type Description t.List[t.Tuple[AppBase, Version_t]] List of tuples of AppBase objects and their versions. Source code in bamboo/app.py def get_all ( self ) -> t . List [ t . Tuple [ AppBase , Version_t ]]: \"\"\"Retrieve versions belonging to all `AppBase` objects. Returns: List of tuples of `AppBase` objects and their versions. \"\"\" if hasattr ( self . _endpoint_class , ATTR_VERSION ): registered = getattr ( self . _endpoint_class , ATTR_VERSION ) return [( app , version ) for app , version in registered . items ()] return []","title":"get_all()"},{"location":"api/bamboo/app/#bamboo.app.VersionConfig.set","text":"Set version of Endpoint . Parameters: Name Type Description Default app AppBase Application including the internal Endpoint . required version t.Union[int, t.Tuple[int], None] Version to be set. None force If forcing to set the version . required Exceptions: Type Description ValueError Raised if version of the Endpoint has already been set. Source code in bamboo/app.py def set ( self , app : AppBase , version : t . Union [ int , t . Tuple [ int ], None ] = None , ) -> None : \"\"\"Set version of `Endpoint`. Args: app: Application including the internal `Endpoint`. version: Version to be set. force: If forcing to set the `version`. Raises: ValueError: Raised if version of the `Endpoint` has already been set. \"\"\" if not hasattr ( self . _endpoint_class , ATTR_VERSION ): setattr ( self . _endpoint_class , ATTR_VERSION , {}) registered = getattr ( self . _endpoint_class , ATTR_VERSION ) # Format to fit the type Version_t if version is None : version = () if isinstance ( version , int ): version = ( version ,) registered [ app ] = version","title":"set()"},{"location":"api/bamboo/app/#bamboo.app.WSGIApp","text":"Application compliant with the WSGI. This class is a subclass of AppBase calss and implements the callbable compliant with the WSGI. Note This class can be used only for WSGI server. If you want to use any ASGI servers, consider using ASGIHTTPApp . This class can also route only WSGIEndpoint s. If you want to another type of endpoint, consider implementation class of its corresponding application.","title":"WSGIApp"},{"location":"api/bamboo/app/#bamboo.app.WSGIApp.route","text":"Register combination of URI and Endpoint for routing. Parameters: Name Type Description Default *locs Location_t Locations of path of the URI bound with the Endpoint . () version t.Union[int, t.Tuple[int], None] Version of the Endpoint . None Returns: Type Description t.Callable[[t.Type[WSGIEndpoint]], t.Type[WSGIEndpoint]] Decorator to add combination of URI and Endpoint . Examples: app = App () # Set path of URI as `test/data/image` and the version as 1 @app . route ( \"test\" , \"data\" , \"image\" , version = 1 ) class MockEndpoint ( Endpoint ): def do_GET ( self ) -> None : # Do something... Source code in bamboo/app.py def route ( self , * locs : Location_t , version : t . Union [ int , t . Tuple [ int ], None ] = None ) -> t . Callable [[ t . Type [ WSGIEndpoint ]], t . Type [ WSGIEndpoint ]]: return super () . route ( * locs , version = version )","title":"route()"},{"location":"api/bamboo/app/#bamboo.app.WSGIApp.search_uris","text":"Retrieve all URI patterns of Endpoint . Note This method uses bamboo.Router.search_uris() method inner. For more information, see the API document. Parameters: Name Type Description Default endpoint t.Type[WSGIEndpoint] Endpoint whose URIs to be searched. required Returns: Type Description t.List[Uri_t] Result of searching. Source code in bamboo/app.py def search_uris ( self , endpoint : t . Type [ WSGIEndpoint ]) -> t . List [ Uri_t ]: return super () . search_uris ( endpoint )","title":"search_uris()"},{"location":"api/bamboo/app/#bamboo.app.WSGIApp.send_404","text":"Send 404 error code, i.e. Resource Not Found error. Parameters: Name Type Description Default start_response WSGIStartRespoint_t start_response callable given from the WSGI application. required Returns: Type Description BufferedConcatIterator Response body of the error. Source code in bamboo/app.py def send_404 ( self , start_response : WSGIStartRespoint_t , ) -> BufferedConcatIterator : \"\"\"Send `404` error code, i.e. `Resource Not Found` error. Args: start_response: `start_response` callable given from the WSGI application. Returns: Response body of the error. \"\"\" status , headers , res_body = self . _error_404 . get_all_form () start_response ( status . wsgi , headers ) return res_body","title":"send_404()"},{"location":"api/bamboo/app/#bamboo.app.WSGIApp.set_parcel","text":"Set parcel to an endpoint. This method enables to give objects to Endpoint objects dynamically. A parcel is a set of objects delivered via the method, and the Endpoint object of its destination receives it at EndpointBase.setup() method. Note For more information about the bamboo.EndpointBase.setup() , see the API document. Parameters: Name Type Description Default endpoint t.Type[WSGIEndpoint] Endpoint the parcel to be set. required *parcel t.Any Pacel to be given to the Endpoint . () Source code in bamboo/app.py def set_parcel ( self , endpoint : t . Type [ WSGIEndpoint ], * parcel : t . Any ) -> WSGIApp : super () . set_parcel ( endpoint , * parcel ) return self","title":"set_parcel()"},{"location":"api/bamboo/app/#bamboo.app.WSGIApp.validate","text":"Validate specified uri and retrieve corresponding Endpoint class. Note This method uses bamboo.Router.validate() method inner. For more information, see the API document. Parameters: Name Type Description Default uri str Path of URI to be validated. required Returns: Type Description t.Tuple[t.Tuple[str, ...], t.Optional[t.Type[WSGIEndpoint]]] Pair of values of flexible locations and Endpoint class if specified uri is valid, otherwise, pari of empty tuple and None. Source code in bamboo/app.py def validate ( self , uri : str ) -> t . Tuple [ t . Tuple [ str , ... ], t . Optional [ t . Type [ WSGIEndpoint ]]]: return super () . validate ( uri )","title":"validate()"},{"location":"api/bamboo/asgi/","text":"asgi","title":"asgi"},{"location":"api/bamboo/asgi/#asgi","text":"","title":"asgi"},{"location":"api/bamboo/endpoint/","text":"endpoint ASGIEndpointBase Base class of endpoints compliant with the ASGI. This class implements abstract methods of EndpointBase with the ASGI. However, this class doesn't implement some methods to structure responses. Note DO NOT use this class as the super class of your endpoints. Consider to use subclasses of the class like ASGIHTTPEndpoint . asgi_version : str property readonly ASGI version. headers : t . Dict [ str , str ] property readonly Request headers. http_version : str property readonly HTTP Version on communication. path : str property readonly Path of requested URI. raw_path : bytes property readonly The original HTTP path received from client. root_path : str property readonly The root path ASGI application is mounted at. scheme : str property readonly Scheme of requested URI. scope : t . Dict [ str , t . Any ] property readonly scope variable received from ASGI server. scope_type : str property readonly Scope type on ASGI. spec_version : str property readonly Spec version on ASGI. __init__ ( self , app , scope , flexible_locs ) special Parameters: Name Type Description Default scope t.Dict[str, t.Any] scope variable received from ASGI server. required flexible_locs t.Tuple[str, ...] Flexible locations requested. required Source code in bamboo/endpoint.py def __init__ ( self , app : App_t , scope : t . Dict [ str , t . Any ], flexible_locs : t . Tuple [ str , ... ], ) -> None : \"\"\" Args: scope: scope variable received from ASGI server. flexible_locs: Flexible locations requested. \"\"\" self . _scope = scope # TODO # Consider not mapping in this method. req_headers = scope . get ( \"headers\" ) self . _req_headers = {} if req_headers : req_headers = [ map ( codecs . decode , h ) for h in req_headers ] self . _req_headers . update ( dict ( req_headers )) super () . __init__ ( app , flexible_locs ) get_client_addr ( self ) Retrieve client address, pair of its IP address and port. Note IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[str]] Pair of IP and port of client. Source code in bamboo/endpoint.py def get_client_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ str ]]: client = self . _scope . get ( \"client\" ) if client : return tuple ( client ) return ( None , None ) get_header ( self , name ) Retrive header value from requested headers. Parameters: Name Type Description Default name str Header name. required Returns: Type Description t.Optional[str] Value of header if existing, None otherwise. Source code in bamboo/endpoint.py def get_header ( self , name : str ) -> t . Optional [ str ]: name = name . lower () . replace ( \"_\" , \"-\" ) return self . _req_headers . get ( name ) get_host_addr ( self ) Retrive host name and port from requested headers. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of host name and port. Source code in bamboo/endpoint.py def get_host_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: http_host = self . get_header ( \"host\" ) if http_host : http_host = http_host . split ( \":\" ) if len ( http_host ) == 1 : return ( http_host [ 0 ], None ) else : host , port = http_host port = int ( port ) return ( host , port ) return ( None , None ) get_server_addr ( self ) Retrive server address, pair of its IP address and port. Note IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[str]] Pair of IP and port of server. Source code in bamboo/endpoint.py def get_server_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ str ]]: server = self . _scope . get ( \"server\" ) if server : return tuple ( server ) return ( None , None ) ASGIHTTPEndpoint HTTP endpoint class compliant with the ASGI. This class is a complete class of endpoints, communicating on HTTP. This class has all attributes of ASGIEndpointBase and HTTPMixIn , and you can define its subclass and use them in your response methods. Examples: app = ASGIHTTPApp () @app . route ( \"hello\" ) class HelloEndpoint ( ASGIHTTPEndpoint ): # RECOMMEND to use `data_format` decorator async def do_GET ( self ) -> None : response = { \"greeting\" : \"Hello, Client!\" } self . send_json ( response ) async def do_POST ( self ) -> None : req_body = async self . body print ( req_body ) content_length : t . Optional [ int ] property readonly Content length of request body if existing. method : str property readonly HTTP method requested from client. __init__ ( self , app , scope , receive , flexible_locs ) special Parameters: Name Type Description Default app ASGIHTTPApp Application object which routes the endpoint. required scope t.Dict[str, t.Any] Scope variable received from ASGI server. required receive t.Callable[[], t.Awaitable[t.Dict[str, t.Any]]] receive method given from ASGI server. required flexible_locs t.Tuple[str, ...] Flexible locations requested. required Source code in bamboo/endpoint.py def __init__ ( self , app : ASGIHTTPApp , scope : t . Dict [ str , t . Any ], receive : t . Callable [[], t . Awaitable [ t . Dict [ str , t . Any ]]], flexible_locs : t . Tuple [ str , ... ], ) -> None : \"\"\" Args: app: Application object which routes the endpoint. scope: Scope variable received from ASGI server. receive: `receive` method given from ASGI server. flexible_locs: Flexible locations requested. \"\"\" self . _receive = receive self . _is_disconnected = False ASGIEndpointBase . __init__ ( self , app , scope , flexible_locs ) HTTPMixIn . __init__ ( self ) __init_subclass__ () classmethod special This method is called when a class is subclassed. The default implementation does nothing. It may be overridden to extend subclasses. Source code in bamboo/endpoint.py def __init_subclass__ ( cls ) -> None : super () . __init_subclass__ () # NOTE # All response methods of its subclass must be awaitables. for method in HTTPMethods : callback = cls . _get_response_method ( method ) if callback and not inspect . iscoroutinefunction ( callback ): raise TypeError ( f \" { cls . __name__ } . { callback . __name__ } must be an awaitable\" \", not a callable.\" ) get_req_body_iter ( self , bufsize = 8192 , cache = False ) Make an access to the request body as an iterator. Note If the flag cache is True , the request body data is to be cached into the property body , i.e. one always can access to the request body even after the iteration. On the other hand, if the cache is False , caching is not conducted and access to the body will be failed. Parameters: Name Type Description Default bufsize int Chunk size of each item. 8192 cache bool If the request body is to be cached or not. False Returns: Type Description t.AsyncGenerator[bytes, None] Async iterator with binary of the request body. Source code in bamboo/endpoint.py async def get_req_body_iter ( self , bufsize : int = 8192 , cache : bool = False , ) -> t . AsyncGenerator [ bytes , None ]: \"\"\"Make an access to the request body as an iterator. Note: If the flag `cache` is `True`, the request body data is to be cached into the property `body`, i.e. one always can access to the request body even after the iteration. On the other hand, if the `cache` is `False`, caching is not conducted and access to the `body` will be failed. Args: bufsize: Chunk size of each item. cache: If the request body is to be cached or not. Returns: Async iterator with binary of the request body. \"\"\" buffer = io . BytesIO () more_body = True cacher = await self . __class__ . body while more_body : chunk = await self . _receive () type = chunk . get ( \"type\" ) if type == ASGIHTTPEvents . disconnect : self . _is_disconnected = True return body = chunk . get ( \"body\" , b \"\" ) buffer . write ( body ) buffer . flush () more_body = chunk . get ( \"more_body\" , False ) while buffer . tell () >= bufsize : buffer . seek ( 0 ) item = buffer . read ( bufsize ) yield item if cache : # TODO # Seek more efficient ways if cacher . _has_cache ( self ): item = cacher . _get_cache ( self ) + item cacher . _set_cache ( self , item ) rest = buffer . read () buffer . close () buffer = io . BytesIO ( rest ) # TODO # Seek more efficient ways buffer . seek ( 0 ) item = buffer . read () yield item if cache : if cacher . _has_cache ( self ): item = cacher . _get_cache ( self ) + item cacher . _set_cache ( self , item ) buffer . close () EndpointBase Base class of Endpoint to define logic to requests. Endpoint is one of the core concept of Bamboo, and this class defines its basic behavior. All endpoints must inherit this class. Note This class is an abstract class. Consider using its subclasses. app : App_t property readonly Application object handling the endpoint. flexible_locs : t . Tuple [ str , ... ] property readonly Flexible locations extracted from requested URI. http_version : str property readonly HTTP Version on communication. path : str property readonly Path of requested URI. scheme : str property readonly Scheme of requested URI. __init__ ( self , app , flexible_locs ) special Note DO NOT generate its instance. Its object will be initialized by application object. Parameters: Name Type Description Default app App_t Application object which routes the endpoint. required flexible_locs t.Tuple[str, ...] Flexible locations requested. required Source code in bamboo/endpoint.py def __init__ ( self , app : App_t , flexible_locs : t . Tuple [ str , ... ], ) -> None : \"\"\" Note: DO NOT generate its instance. Its object will be initialized by application object. Args: app: Application object which routes the endpoint. flexible_locs: Flexible locations requested. \"\"\" self . _app = app self . _flexible_locs = flexible_locs get_client_addr ( self ) Retrieve client address, pair of its IP address and port. Note IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of IP and port of client. Source code in bamboo/endpoint.py @abstractmethod def get_client_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: \"\"\"Retrieve client address, pair of its IP address and port. Note: IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Pair of IP and port of client. \"\"\" pass get_header ( self , name ) Retrive header value from requested headers. Parameters: Name Type Description Default name str Header name. required Returns: Type Description t.Optional[str] Value of header if existing, None otherwise. Source code in bamboo/endpoint.py @abstractmethod def get_header ( self , name : str ) -> t . Optional [ str ]: \"\"\"Retrive header value from requested headers. Args: name: Header name. Returns: Value of header if existing, None otherwise. \"\"\" pass get_host_addr ( self ) Retrive host name and port from requested headers. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of host name and port. Source code in bamboo/endpoint.py @abstractmethod def get_host_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: \"\"\"Retrive host name and port from requested headers. Returns: Pair of host name and port. \"\"\" pass get_queries ( self , name ) Get values of query parameter. Parameters: Name Type Description Default name str Key name of the parameter required Returns: Type Description t.List[str] Value of the parameter. The value of list may have multiple items if client specifies the parameter in several times. Source code in bamboo/endpoint.py def get_queries ( self , name : str ) -> t . List [ str ]: \"\"\"Get values of query parameter. Args: name: Key name of the parameter Returns: Value of the parameter. The value of list may have multiple items if client specifies the parameter in several times. \"\"\" query = self . queries . get ( name ) if query : return query return [] get_server_addr ( self ) Retrive server address, pair of its IP address and port. Note IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of IP and port of server. Source code in bamboo/endpoint.py @abstractmethod def get_server_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: \"\"\"Retrive server address, pair of its IP address and port. Note: IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Pair of IP and port of server. \"\"\" pass setup ( self , * parcel ) Execute setup of the endpoint object. This method will execute at initialization of the object by specifying parcel. The parcel is sent with set_parcel() method of the application object which has included the object as one of the its endpoints. This method can be used as a substitute for the __init__ method. This method is useful in some cases like below: Making an endpoint class a reusable component Injecting environmental dependencies using something like a setting file Parameters: Name Type Description Default *parcel Parcel sent via application object. () Examples: app = WSGIApp () @app . route ( \"hello\" ) class HelloEndpoint ( WSGIEndpoint ): def setup ( self , server_name : str ) -> None : self . _server_name = server_name def do_GET ( self ) -> None : self . send_body ( f \"Hello from { self . _server_name } \" . encode ()) if __name__ == \"__main__\" : SERVER_NAME = \"awesome_server\" app . set_parcel ( HelloEndpoint , SERVER_NAME ) WSGITestExecutor . debug ( app , \"\" , 8000 ) Source code in bamboo/endpoint.py def setup ( self , * parcel ) -> None : \"\"\"Execute setup of the endpoint object. This method will execute at initialization of the object by specifying parcel. The parcel is sent with `set_parcel()` method of the application object which has included the object as one of the its endpoints. This method can be used as a substitute for the `__init__` method. This method is useful in some cases like below: - Making an endpoint class a reusable component - Injecting environmental dependencies using something like a setting file Args: *parcel: Parcel sent via application object. Examples: ```python app = WSGIApp() @app.route(\"hello\") class HelloEndpoint(WSGIEndpoint): def setup(self, server_name: str) -> None: self._server_name = server_name def do_GET(self) -> None: self.send_body(f\"Hello from {self._server_name}\".encode()) if __name__ == \"__main__\": SERVER_NAME = \"awesome_server\" app.set_parcel(HelloEndpoint, SERVER_NAME) WSGITestExecutor.debug(app, \"\", 8000) ``` \"\"\" pass HTTPMixIn Mixin class for HTTP endpoints. This class assumes that endpoint classes inherit this class for HTTP. So, this class do not work alone. Note DO NOT use this class alone. This class work correctly by inheriting it, implementing its abstract methods, and call its __init__() method in the one of the subclass. content_length : t . Optional [ int ] property readonly Content length of request body if existing. method : str property readonly HTTP method requested from client. __init_subclass__ () classmethod special This method is called when a class is subclassed. The default implementation does nothing. It may be overridden to extend subclasses. Source code in bamboo/endpoint.py def __init_subclass__ ( cls ) -> None : super () . __init_subclass__ () cls . _pre_methods = {} cls . _res_methods = {} # Check if bufsize is positive if not ( cls . bufsize > 0 and isinstance ( cls . bufsize , int )): raise ValueError ( f \" { cls . __name__ } .bufsize must be positive integer\" ) # Check pre & response methods for method in _AVAILABLE_RES_METHODS : name_pre_method = _PREFIX_PRE_RESPONSE + method name_res_method = _PREFIX_RESPONSE + method if hasattr ( cls , name_pre_method ): pre_method = getattr ( cls , name_pre_method ) cls . _pre_methods [ method ] = pre_method if hasattr ( cls , name_res_method ): res_method = getattr ( cls , name_res_method ) cls . _res_methods [ method ] = res_method add_content_length ( self , length ) Add Content-Length header of response. Parameters: Name Type Description Default length int Size of response body. required Source code in bamboo/endpoint.py def add_content_length ( self , length : int ) -> None : \"\"\"Add Content-Length header of response. Args: length: Size of response body. \"\"\" self . add_header ( \"Content-Length\" , str ( length )) add_content_length_body ( self , body ) Add Content-Length header of response by response body. Parameters: Name Type Description Default body bytes Response body. required Source code in bamboo/endpoint.py def add_content_length_body ( self , body : bytes ) -> None : \"\"\"Add Content-Length header of response by response body. Args: body: Response body. \"\"\" self . add_header ( \"Content-Length\" , str ( len ( body ))) add_content_type ( self , content_type ) Add Content-Type header of response. Parameters: Name Type Description Default content_type ContentType Information of Content-Type header. required Source code in bamboo/endpoint.py def add_content_type ( self , content_type : ContentType ) -> None : \"\"\"Add Content-Type header of response. Args: content_type: Information of Content-Type header. \"\"\" self . add_header ( * content_type . to_header ()) add_header ( self , name , value , ** params ) Add response header with MIME parameters. Parameters: Name Type Description Default name str Field name of the header. required value str Value of the field. required **params str Directives added to the field. {} Source code in bamboo/endpoint.py def add_header ( self , name : str , value : str , ** params : str ) -> None : \"\"\"Add response header with MIME parameters. Args: name: Field name of the header. value: Value of the field. **params: Directives added to the field. \"\"\" self . _res_headers . append ( make_header ( name , value , ** params )) add_headers ( self , * headers ) Add response headers at once. Note This method would be used as a shortcut to register multiple headers. If it requires adding MIME parameters, developers can use the 'add_header' method. Parameters: Name Type Description Default **headers t.Tuple[str, str] Header's info whose header is the field name. () Source code in bamboo/endpoint.py def add_headers ( self , * headers : t . Tuple [ str , str ]) -> None : \"\"\"Add response headers at once. Note: This method would be used as a shortcut to register multiple headers. If it requires adding MIME parameters, developers can use the 'add_header' method. Args: **headers: Header's info whose header is the field name. \"\"\" for name , val in headers : self . add_header ( name , val ) send_api ( self , api , status =< HTTPStatus . OK : 200 > ) Set given api data to the response body. Parameters: Name Type Description Default api ApiData ApiData object to be sent. required status HTTPStatus HTTP status of the response. <HTTPStatus.OK: 200> Exceptions: Type Description StatusCodeAlreadySetError Raised if response status code has already been set. Source code in bamboo/endpoint.py def send_api ( self , api : ApiData , status : HTTPStatus = HTTPStatus . OK , ) -> None : \"\"\"Set given api data to the response body. Args: api: ApiData object to be sent. status: HTTP status of the response. Raises: StatusCodeAlreadySetError: Raised if response status code has already been set. \"\"\" self . send_body ( api . __extract__ (), content_type = api . __content_type__ , status = status , ) send_body ( self , body , * others , * , content_type = ContentType ( media_type = 'text/plain' , charset = None , boundary = None ), status =< HTTPStatus . OK : 200 > ) Set given binary to the response body. Note If the parameter content_type is specified, then the Content-Type header is to be added. DEFAULT_CONTENT_TYPE_PLAIN has its MIME type of text/plain , and the other attributes are None . If another value of Content-Type is needed, then you should generate new ContentType instance with attributes you want. Parameters: Name Type Description Default body t.Union[bytes, t.Iterable[bytes]] Binary to be set to the response body. required content_type t.Optional[ContentType] Content-Type header to be sent. ContentType(media_type='text/plain', charset=None, boundary=None) status HTTPStatus HTTP status of the response. <HTTPStatus.OK: 200> Exceptions: Type Description StatusCodeAlreadySetError Raised if response status code has already been set. Source code in bamboo/endpoint.py def send_body ( self , body : t . Union [ bytes , t . Iterable [ bytes ]], * others : t . Union [ bytes , t . Iterable [ bytes ]], content_type : t . Optional [ ContentType ] = DEFAULT_CONTENT_TYPE_PLAIN , status : HTTPStatus = HTTPStatus . OK ) -> None : \"\"\"Set given binary to the response body. Note: If the parameter `content_type` is specified, then the `Content-Type` header is to be added. `DEFAULT_CONTENT_TYPE_PLAIN` has its MIME type of `text/plain`, and the other attributes are `None`. If another value of `Content-Type` is needed, then you should generate new `ContentType` instance with attributes you want. Args: body: Binary to be set to the response body. content_type: `Content-Type` header to be sent. status: HTTP status of the response. Raises: StatusCodeAlreadySetError: Raised if response status code has already been set. \"\"\" self . _set_status_safely ( status ) bodies = [ body ] bodies . extend ( others ) is_all_bytes = True not_empty = False for chunk in bodies : is_all_bytes &= isinstance ( chunk , bytes ) if is_all_bytes : not_empty |= len ( chunk ) > 0 self . _res_body . append ( chunk ) if content_type : self . add_content_type ( content_type ) # Content-Length if avalidable if is_all_bytes and not_empty : length = sum ( map ( len , bodies )) self . add_content_length ( length ) send_file ( self , path , fname = None , content_type = ContentType ( media_type = 'text/plain' , charset = None , boundary = None ), status =< HTTPStatus . OK : 200 > ) Set file to be sent as response. Parameters: Name Type Description Default path str File path. required fname t.Optional[str] File name to be sent. None content_type str Content type of the response. ContentType(media_type='text/plain', charset=None, boundary=None) status HTTPStatus HTTP status of the response. <HTTPStatus.OK: 200> Source code in bamboo/endpoint.py def send_file ( self , path : str , fname : t . Optional [ str ] = None , content_type : str = DEFAULT_CONTENT_TYPE_PLAIN , status : HTTPStatus = HTTPStatus . OK ) -> None : \"\"\"Set file to be sent as response. Args: path: File path. fname: File name to be sent. content_type: Content type of the response. status: HTTP status of the response. \"\"\" file_iter = BufferedFileIterator ( path ) self . send_body ( file_iter , content_type = content_type , status = status ) length = os . path . getsize ( path ) self . add_header ( \"Content-Length\" , str ( length )) if fname : self . add_header ( \"Content-Disposition\" , \"attachment\" , filename = fname ) send_json ( self , body , status =< HTTPStatus . OK : 200 > , encoding = 'UTF-8' ) Set given json data to the response body. Parameters: Name Type Description Default body t.Dict[str, t.Any] Json data to be set to the response body. required status HTTPStatus HTTP status of the response. <HTTPStatus.OK: 200> encoding str Encoding of the Json data. 'UTF-8' Exceptions: Type Description StatusCodeAlreadySetError Raised if response status code has already been set. Source code in bamboo/endpoint.py def send_json ( self , body : t . Dict [ str , t . Any ], status : HTTPStatus = HTTPStatus . OK , encoding : str = \"UTF-8\" ) -> None : \"\"\"Set given json data to the response body. Args: body: Json data to be set to the response body. status: HTTP status of the response. encoding: Encoding of the Json data. Raises: StatusCodeAlreadySetError: Raised if response status code has already been set. \"\"\" body = json . dumps ( body ) . encode ( encoding = encoding ) content_type = ContentType ( MediaTypes . json , encoding ) self . send_body ( body , content_type = content_type , status = status ) send_only_status ( self , status =< HTTPStatus . OK : 200 > ) Set specified status code to one of response. This method can be used if a callback doesn't need to send response body. Parameters: Name Type Description Default status HTTPStatus HTTP status of the response. <HTTPStatus.OK: 200> Source code in bamboo/endpoint.py def send_only_status ( self , status : HTTPStatus = HTTPStatus . OK ) -> None : \"\"\"Set specified status code to one of response. This method can be used if a callback doesn't need to send response body. Args: status: HTTP status of the response. \"\"\" self . _set_status_safely ( status ) StaticEndpoint content_type : ContentType property readonly Content type of request body. Returns: Type Description ContentType Content type if existing, None otherwise. setup ( self , doc_root ) Execute setup of the endpoint object. This method will execute at initialization of the object by specifying parcel. The parcel is sent with set_parcel() method of the application object which has included the object as one of the its endpoints. This method can be used as a substitute for the __init__ method. This method is useful in some cases like below: Making an endpoint class a reusable component Injecting environmental dependencies using something like a setting file Parameters: Name Type Description Default *parcel Parcel sent via application object. required Examples: app = WSGIApp () @app . route ( \"hello\" ) class HelloEndpoint ( WSGIEndpoint ): def setup ( self , server_name : str ) -> None : self . _server_name = server_name def do_GET ( self ) -> None : self . send_body ( f \"Hello from { self . _server_name } \" . encode ()) if __name__ == \"__main__\" : SERVER_NAME = \"awesome_server\" app . set_parcel ( HelloEndpoint , SERVER_NAME ) WSGITestExecutor . debug ( app , \"\" , 8000 ) Source code in bamboo/endpoint.py def setup ( self , doc_root : str ) -> None : self . _filepath = os . path . join ( doc_root , * self . path [ 1 :] . split ( \"/\" )) self . _content_type = ContentType ( file2mime ( self . _filepath )) if not os . path . isfile ( self . filepath ) and not os . path . isdir ( self . filepath ): raise DEFAULT_NOT_FOUND_ERROR StaticRedirectASGIEndpoint setup ( self , doc_root , suffix ) Execute setup of the endpoint object. This method will execute at initialization of the object by specifying parcel. The parcel is sent with set_parcel() method of the application object which has included the object as one of the its endpoints. This method can be used as a substitute for the __init__ method. This method is useful in some cases like below: Making an endpoint class a reusable component Injecting environmental dependencies using something like a setting file Parameters: Name Type Description Default *parcel Parcel sent via application object. required Examples: app = WSGIApp () @app . route ( \"hello\" ) class HelloEndpoint ( WSGIEndpoint ): def setup ( self , server_name : str ) -> None : self . _server_name = server_name def do_GET ( self ) -> None : self . send_body ( f \"Hello from { self . _server_name } \" . encode ()) if __name__ == \"__main__\" : SERVER_NAME = \"awesome_server\" app . set_parcel ( HelloEndpoint , SERVER_NAME ) WSGITestExecutor . debug ( app , \"\" , 8000 ) Source code in bamboo/endpoint.py def setup ( self , doc_root : str , suffix : str ) -> None : super () . setup ( doc_root ) self . _suffix = suffix StaticRedirectWSGIEndpoint setup ( self , doc_root ) Execute setup of the endpoint object. This method will execute at initialization of the object by specifying parcel. The parcel is sent with set_parcel() method of the application object which has included the object as one of the its endpoints. This method can be used as a substitute for the __init__ method. This method is useful in some cases like below: Making an endpoint class a reusable component Injecting environmental dependencies using something like a setting file Parameters: Name Type Description Default *parcel Parcel sent via application object. required Examples: app = WSGIApp () @app . route ( \"hello\" ) class HelloEndpoint ( WSGIEndpoint ): def setup ( self , server_name : str ) -> None : self . _server_name = server_name def do_GET ( self ) -> None : self . send_body ( f \"Hello from { self . _server_name } \" . encode ()) if __name__ == \"__main__\" : SERVER_NAME = \"awesome_server\" app . set_parcel ( HelloEndpoint , SERVER_NAME ) WSGITestExecutor . debug ( app , \"\" , 8000 ) Source code in bamboo/endpoint.py def setup ( self , doc_root : str ) -> None : super () . setup ( doc_root ) StatusCodeAlreadySetError Raised if response status code has already been set. WSGIEndpoint HTTP endpoint class compliant with the WSGI. This class is a complete class of endpoints, communicating on HTTP. This class has all attributes of WSGIEndpointBase and HTTPMixIn , and you can define its subclass and use them in your response methods. Examples: app = WSGIApp () @app . route ( \"hello\" ) class HelloEndpoint ( WSGIEndpoint ): # RECOMMEND to use `data_format` decorator def do_GET ( self ) -> None : response = { \"greeting\" : \"Hello, Client!\" } self . send_json ( response ) def do_POST ( self ) -> None : req_body = self . body print ( req_body ) content_length : t . Optional [ int ] property readonly Content length of request body if existing. method : str property readonly HTTP method requested from client. __init__ ( self , app , environ , flexible_locs ) special Parameters: Name Type Description Default app WSGIApp Application object which routes the endpoint. required environ t.Dict[str, t.Any] Environ variable received from WSGI server. required flexible_locs t.Tuple[str, ...] Flexible locations requested. required Source code in bamboo/endpoint.py def __init__ ( self , app : WSGIApp , environ : t . Dict [ str , t . Any ], flexible_locs : t . Tuple [ str , ... ], ) -> None : \"\"\" Args: app: Application object which routes the endpoint. environ: Environ variable received from WSGI server. flexible_locs: Flexible locations requested. \"\"\" WSGIEndpointBase . __init__ ( self , app , environ , flexible_locs ) HTTPMixIn . __init__ ( self ) get_req_body_iter ( self , bufsize = 8192 , cache = False ) Make an access to the request body as an iterator. Note If the flag cache is True , the request body data is to be cached into the property body , i.e. one always can access to the request body even after the iteration. On the other hand, if the cache is False , caching is not conducted and access to the body will be failed. Parameters: Name Type Description Default bufsize int Chunk size of each item. 8192 cache bool If the request body is to be cached or not. False Returns: Type Description t.Generator[bytes, None, None] Iterator with binary of the request body. Source code in bamboo/endpoint.py def get_req_body_iter ( self , bufsize : int = 8192 , cache : bool = False , ) -> t . Generator [ bytes , None , None ]: \"\"\"Make an access to the request body as an iterator. Note: If the flag `cache` is `True`, the request body data is to be cached into the property `body`, i.e. one always can access to the request body even after the iteration. On the other hand, if the `cache` is `False`, caching is not conducted and access to the `body` will be failed. Args: bufsize: Chunk size of each item. cache: If the request body is to be cached or not. Returns: Iterator with binary of the request body. \"\"\" stream = self . get_req_body_stream () cacher = self . __class__ . body length = self . content_length remain = length while True : if length is None : chunk = stream . read ( bufsize ) elif remain <= 0 : break else : counts = remain if remain < bufsize else bufsize chunk = stream . read ( counts ) remain -= len ( chunk ) if not chunk : break yield chunk # TODO # Seek more efficient ways if cache : if cacher . _has_cache ( self ): chunk = cacher . _get_cache ( self ) + chunk cacher . _set_cache ( self , chunk ) get_req_body_stream ( self ) Fetch the stream with which request body can be received. Returns: Type Description io.BufferedIOBase The stream with request body. Source code in bamboo/endpoint.py def get_req_body_stream ( self ) -> io . BufferedIOBase : \"\"\"Fetch the stream with which request body can be received. Returns: The stream with request body. \"\"\" return self . _environ . get ( \"wsgi.input\" ) WSGIEndpointBase Base class of endpoints compliant with the WSGI. This class implements abstract methods of EndpointBase with the WSGI. However, this class doesn't implement some methods to structure responses. Note DO NOT use this class as the super class of your endpoints. Consider to use subclasses of the class like WSGIEndpoint . environ : t . Dict [ str , t . Any ] property readonly environ variable received from WSGI server. http_version : str property readonly HTTP Version on communication. path : str property readonly Path of requested URI. scheme : str property readonly Scheme of requested URI. server_software : str property readonly Software name of WSGI server. wsgi_version : str property readonly WSGI version number. __init__ ( self , app , environ , flexible_locs ) special Parameters: Name Type Description Default environ t.Dict[str, t.Any] environ variable received from WSGI server. required flexible_locs t.Tuple[str, ...] flexible locations requested. required Source code in bamboo/endpoint.py def __init__ ( self , app : WSGIApp , environ : t . Dict [ str , t . Any ], flexible_locs : t . Tuple [ str , ... ], ) -> None : \"\"\" Args: environ: environ variable received from WSGI server. flexible_locs: flexible locations requested. \"\"\" self . _environ = environ super () . __init__ ( app , flexible_locs ) get_client_addr ( self ) Retrieve client address, pair of its IP address and port. Note IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of IP and port of client. Source code in bamboo/endpoint.py def get_client_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: client = self . _environ . get ( \"REMOTE_ADDR\" ) port = self . _environ . get ( \"REMOTE_PORT\" ) if port : port = int ( port ) return ( client , port ) get_header ( self , name ) Retrive header value from requested headers. Parameters: Name Type Description Default name str Header name. required Returns: Type Description t.Optional[str] Value of header if existing, None otherwise. Source code in bamboo/endpoint.py def get_header ( self , name : str ) -> t . Optional [ str ]: name = name . upper () . replace ( \"-\" , \"_\" ) if name == \"CONTENT_TYPE\" : return self . content_type if name == \"CONTENT_LENGTH\" : return self . _environ . get ( \"CONTENT_LENGTH\" ) name = \"HTTP_\" + name return self . _environ . get ( name ) get_host_addr ( self ) Retrive host name and port from requested headers. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of host name and port. Source code in bamboo/endpoint.py def get_host_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: http_host = self . _environ . get ( \"HTTP_HOST\" ) if http_host : http_host = http_host . split ( \":\" ) if len ( http_host ) == 1 : return ( http_host [ 0 ], None ) else : host , port = http_host port = int ( port ) return ( host , port ) return ( None , None ) get_server_addr ( self ) Retrive server address, pair of its IP address and port. Note IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of IP and port of server. Source code in bamboo/endpoint.py def get_server_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: server = self . _environ . get ( \"SERVER_NAME\" ) port = self . _environ . get ( \"SERVER_PORT\" ) if port : port = int ( port ) return ( server , port )","title":"endpoint"},{"location":"api/bamboo/endpoint/#endpoint","text":"","title":"endpoint"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase","text":"Base class of endpoints compliant with the ASGI. This class implements abstract methods of EndpointBase with the ASGI. However, this class doesn't implement some methods to structure responses. Note DO NOT use this class as the super class of your endpoints. Consider to use subclasses of the class like ASGIHTTPEndpoint .","title":"ASGIEndpointBase"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.asgi_version","text":"ASGI version.","title":"asgi_version"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.headers","text":"Request headers.","title":"headers"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.http_version","text":"HTTP Version on communication.","title":"http_version"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.path","text":"Path of requested URI.","title":"path"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.raw_path","text":"The original HTTP path received from client.","title":"raw_path"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.root_path","text":"The root path ASGI application is mounted at.","title":"root_path"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.scheme","text":"Scheme of requested URI.","title":"scheme"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.scope","text":"scope variable received from ASGI server.","title":"scope"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.scope_type","text":"Scope type on ASGI.","title":"scope_type"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.spec_version","text":"Spec version on ASGI.","title":"spec_version"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.__init__","text":"Parameters: Name Type Description Default scope t.Dict[str, t.Any] scope variable received from ASGI server. required flexible_locs t.Tuple[str, ...] Flexible locations requested. required Source code in bamboo/endpoint.py def __init__ ( self , app : App_t , scope : t . Dict [ str , t . Any ], flexible_locs : t . Tuple [ str , ... ], ) -> None : \"\"\" Args: scope: scope variable received from ASGI server. flexible_locs: Flexible locations requested. \"\"\" self . _scope = scope # TODO # Consider not mapping in this method. req_headers = scope . get ( \"headers\" ) self . _req_headers = {} if req_headers : req_headers = [ map ( codecs . decode , h ) for h in req_headers ] self . _req_headers . update ( dict ( req_headers )) super () . __init__ ( app , flexible_locs )","title":"__init__()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.get_client_addr","text":"Retrieve client address, pair of its IP address and port. Note IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[str]] Pair of IP and port of client. Source code in bamboo/endpoint.py def get_client_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ str ]]: client = self . _scope . get ( \"client\" ) if client : return tuple ( client ) return ( None , None )","title":"get_client_addr()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.get_header","text":"Retrive header value from requested headers. Parameters: Name Type Description Default name str Header name. required Returns: Type Description t.Optional[str] Value of header if existing, None otherwise. Source code in bamboo/endpoint.py def get_header ( self , name : str ) -> t . Optional [ str ]: name = name . lower () . replace ( \"_\" , \"-\" ) return self . _req_headers . get ( name )","title":"get_header()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.get_host_addr","text":"Retrive host name and port from requested headers. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of host name and port. Source code in bamboo/endpoint.py def get_host_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: http_host = self . get_header ( \"host\" ) if http_host : http_host = http_host . split ( \":\" ) if len ( http_host ) == 1 : return ( http_host [ 0 ], None ) else : host , port = http_host port = int ( port ) return ( host , port ) return ( None , None )","title":"get_host_addr()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIEndpointBase.get_server_addr","text":"Retrive server address, pair of its IP address and port. Note IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[str]] Pair of IP and port of server. Source code in bamboo/endpoint.py def get_server_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ str ]]: server = self . _scope . get ( \"server\" ) if server : return tuple ( server ) return ( None , None )","title":"get_server_addr()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIHTTPEndpoint","text":"HTTP endpoint class compliant with the ASGI. This class is a complete class of endpoints, communicating on HTTP. This class has all attributes of ASGIEndpointBase and HTTPMixIn , and you can define its subclass and use them in your response methods. Examples: app = ASGIHTTPApp () @app . route ( \"hello\" ) class HelloEndpoint ( ASGIHTTPEndpoint ): # RECOMMEND to use `data_format` decorator async def do_GET ( self ) -> None : response = { \"greeting\" : \"Hello, Client!\" } self . send_json ( response ) async def do_POST ( self ) -> None : req_body = async self . body print ( req_body )","title":"ASGIHTTPEndpoint"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIHTTPEndpoint.content_length","text":"Content length of request body if existing.","title":"content_length"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIHTTPEndpoint.method","text":"HTTP method requested from client.","title":"method"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIHTTPEndpoint.__init__","text":"Parameters: Name Type Description Default app ASGIHTTPApp Application object which routes the endpoint. required scope t.Dict[str, t.Any] Scope variable received from ASGI server. required receive t.Callable[[], t.Awaitable[t.Dict[str, t.Any]]] receive method given from ASGI server. required flexible_locs t.Tuple[str, ...] Flexible locations requested. required Source code in bamboo/endpoint.py def __init__ ( self , app : ASGIHTTPApp , scope : t . Dict [ str , t . Any ], receive : t . Callable [[], t . Awaitable [ t . Dict [ str , t . Any ]]], flexible_locs : t . Tuple [ str , ... ], ) -> None : \"\"\" Args: app: Application object which routes the endpoint. scope: Scope variable received from ASGI server. receive: `receive` method given from ASGI server. flexible_locs: Flexible locations requested. \"\"\" self . _receive = receive self . _is_disconnected = False ASGIEndpointBase . __init__ ( self , app , scope , flexible_locs ) HTTPMixIn . __init__ ( self )","title":"__init__()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIHTTPEndpoint.__init_subclass__","text":"This method is called when a class is subclassed. The default implementation does nothing. It may be overridden to extend subclasses. Source code in bamboo/endpoint.py def __init_subclass__ ( cls ) -> None : super () . __init_subclass__ () # NOTE # All response methods of its subclass must be awaitables. for method in HTTPMethods : callback = cls . _get_response_method ( method ) if callback and not inspect . iscoroutinefunction ( callback ): raise TypeError ( f \" { cls . __name__ } . { callback . __name__ } must be an awaitable\" \", not a callable.\" )","title":"__init_subclass__()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.ASGIHTTPEndpoint.get_req_body_iter","text":"Make an access to the request body as an iterator. Note If the flag cache is True , the request body data is to be cached into the property body , i.e. one always can access to the request body even after the iteration. On the other hand, if the cache is False , caching is not conducted and access to the body will be failed. Parameters: Name Type Description Default bufsize int Chunk size of each item. 8192 cache bool If the request body is to be cached or not. False Returns: Type Description t.AsyncGenerator[bytes, None] Async iterator with binary of the request body. Source code in bamboo/endpoint.py async def get_req_body_iter ( self , bufsize : int = 8192 , cache : bool = False , ) -> t . AsyncGenerator [ bytes , None ]: \"\"\"Make an access to the request body as an iterator. Note: If the flag `cache` is `True`, the request body data is to be cached into the property `body`, i.e. one always can access to the request body even after the iteration. On the other hand, if the `cache` is `False`, caching is not conducted and access to the `body` will be failed. Args: bufsize: Chunk size of each item. cache: If the request body is to be cached or not. Returns: Async iterator with binary of the request body. \"\"\" buffer = io . BytesIO () more_body = True cacher = await self . __class__ . body while more_body : chunk = await self . _receive () type = chunk . get ( \"type\" ) if type == ASGIHTTPEvents . disconnect : self . _is_disconnected = True return body = chunk . get ( \"body\" , b \"\" ) buffer . write ( body ) buffer . flush () more_body = chunk . get ( \"more_body\" , False ) while buffer . tell () >= bufsize : buffer . seek ( 0 ) item = buffer . read ( bufsize ) yield item if cache : # TODO # Seek more efficient ways if cacher . _has_cache ( self ): item = cacher . _get_cache ( self ) + item cacher . _set_cache ( self , item ) rest = buffer . read () buffer . close () buffer = io . BytesIO ( rest ) # TODO # Seek more efficient ways buffer . seek ( 0 ) item = buffer . read () yield item if cache : if cacher . _has_cache ( self ): item = cacher . _get_cache ( self ) + item cacher . _set_cache ( self , item ) buffer . close ()","title":"get_req_body_iter()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.EndpointBase","text":"Base class of Endpoint to define logic to requests. Endpoint is one of the core concept of Bamboo, and this class defines its basic behavior. All endpoints must inherit this class. Note This class is an abstract class. Consider using its subclasses.","title":"EndpointBase"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.EndpointBase.app","text":"Application object handling the endpoint.","title":"app"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.EndpointBase.flexible_locs","text":"Flexible locations extracted from requested URI.","title":"flexible_locs"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.EndpointBase.http_version","text":"HTTP Version on communication.","title":"http_version"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.EndpointBase.path","text":"Path of requested URI.","title":"path"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.EndpointBase.scheme","text":"Scheme of requested URI.","title":"scheme"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.EndpointBase.__init__","text":"Note DO NOT generate its instance. Its object will be initialized by application object. Parameters: Name Type Description Default app App_t Application object which routes the endpoint. required flexible_locs t.Tuple[str, ...] Flexible locations requested. required Source code in bamboo/endpoint.py def __init__ ( self , app : App_t , flexible_locs : t . Tuple [ str , ... ], ) -> None : \"\"\" Note: DO NOT generate its instance. Its object will be initialized by application object. Args: app: Application object which routes the endpoint. flexible_locs: Flexible locations requested. \"\"\" self . _app = app self . _flexible_locs = flexible_locs","title":"__init__()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.EndpointBase.get_client_addr","text":"Retrieve client address, pair of its IP address and port. Note IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of IP and port of client. Source code in bamboo/endpoint.py @abstractmethod def get_client_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: \"\"\"Retrieve client address, pair of its IP address and port. Note: IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Pair of IP and port of client. \"\"\" pass","title":"get_client_addr()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.EndpointBase.get_header","text":"Retrive header value from requested headers. Parameters: Name Type Description Default name str Header name. required Returns: Type Description t.Optional[str] Value of header if existing, None otherwise. Source code in bamboo/endpoint.py @abstractmethod def get_header ( self , name : str ) -> t . Optional [ str ]: \"\"\"Retrive header value from requested headers. Args: name: Header name. Returns: Value of header if existing, None otherwise. \"\"\" pass","title":"get_header()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.EndpointBase.get_host_addr","text":"Retrive host name and port from requested headers. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of host name and port. Source code in bamboo/endpoint.py @abstractmethod def get_host_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: \"\"\"Retrive host name and port from requested headers. Returns: Pair of host name and port. \"\"\" pass","title":"get_host_addr()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.EndpointBase.get_queries","text":"Get values of query parameter. Parameters: Name Type Description Default name str Key name of the parameter required Returns: Type Description t.List[str] Value of the parameter. The value of list may have multiple items if client specifies the parameter in several times. Source code in bamboo/endpoint.py def get_queries ( self , name : str ) -> t . List [ str ]: \"\"\"Get values of query parameter. Args: name: Key name of the parameter Returns: Value of the parameter. The value of list may have multiple items if client specifies the parameter in several times. \"\"\" query = self . queries . get ( name ) if query : return query return []","title":"get_queries()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.EndpointBase.get_server_addr","text":"Retrive server address, pair of its IP address and port. Note IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of IP and port of server. Source code in bamboo/endpoint.py @abstractmethod def get_server_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: \"\"\"Retrive server address, pair of its IP address and port. Note: IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Pair of IP and port of server. \"\"\" pass","title":"get_server_addr()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.EndpointBase.setup","text":"Execute setup of the endpoint object. This method will execute at initialization of the object by specifying parcel. The parcel is sent with set_parcel() method of the application object which has included the object as one of the its endpoints. This method can be used as a substitute for the __init__ method. This method is useful in some cases like below: Making an endpoint class a reusable component Injecting environmental dependencies using something like a setting file Parameters: Name Type Description Default *parcel Parcel sent via application object. () Examples: app = WSGIApp () @app . route ( \"hello\" ) class HelloEndpoint ( WSGIEndpoint ): def setup ( self , server_name : str ) -> None : self . _server_name = server_name def do_GET ( self ) -> None : self . send_body ( f \"Hello from { self . _server_name } \" . encode ()) if __name__ == \"__main__\" : SERVER_NAME = \"awesome_server\" app . set_parcel ( HelloEndpoint , SERVER_NAME ) WSGITestExecutor . debug ( app , \"\" , 8000 ) Source code in bamboo/endpoint.py def setup ( self , * parcel ) -> None : \"\"\"Execute setup of the endpoint object. This method will execute at initialization of the object by specifying parcel. The parcel is sent with `set_parcel()` method of the application object which has included the object as one of the its endpoints. This method can be used as a substitute for the `__init__` method. This method is useful in some cases like below: - Making an endpoint class a reusable component - Injecting environmental dependencies using something like a setting file Args: *parcel: Parcel sent via application object. Examples: ```python app = WSGIApp() @app.route(\"hello\") class HelloEndpoint(WSGIEndpoint): def setup(self, server_name: str) -> None: self._server_name = server_name def do_GET(self) -> None: self.send_body(f\"Hello from {self._server_name}\".encode()) if __name__ == \"__main__\": SERVER_NAME = \"awesome_server\" app.set_parcel(HelloEndpoint, SERVER_NAME) WSGITestExecutor.debug(app, \"\", 8000) ``` \"\"\" pass","title":"setup()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn","text":"Mixin class for HTTP endpoints. This class assumes that endpoint classes inherit this class for HTTP. So, this class do not work alone. Note DO NOT use this class alone. This class work correctly by inheriting it, implementing its abstract methods, and call its __init__() method in the one of the subclass.","title":"HTTPMixIn"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn.content_length","text":"Content length of request body if existing.","title":"content_length"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn.method","text":"HTTP method requested from client.","title":"method"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn.__init_subclass__","text":"This method is called when a class is subclassed. The default implementation does nothing. It may be overridden to extend subclasses. Source code in bamboo/endpoint.py def __init_subclass__ ( cls ) -> None : super () . __init_subclass__ () cls . _pre_methods = {} cls . _res_methods = {} # Check if bufsize is positive if not ( cls . bufsize > 0 and isinstance ( cls . bufsize , int )): raise ValueError ( f \" { cls . __name__ } .bufsize must be positive integer\" ) # Check pre & response methods for method in _AVAILABLE_RES_METHODS : name_pre_method = _PREFIX_PRE_RESPONSE + method name_res_method = _PREFIX_RESPONSE + method if hasattr ( cls , name_pre_method ): pre_method = getattr ( cls , name_pre_method ) cls . _pre_methods [ method ] = pre_method if hasattr ( cls , name_res_method ): res_method = getattr ( cls , name_res_method ) cls . _res_methods [ method ] = res_method","title":"__init_subclass__()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn.add_content_length","text":"Add Content-Length header of response. Parameters: Name Type Description Default length int Size of response body. required Source code in bamboo/endpoint.py def add_content_length ( self , length : int ) -> None : \"\"\"Add Content-Length header of response. Args: length: Size of response body. \"\"\" self . add_header ( \"Content-Length\" , str ( length ))","title":"add_content_length()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn.add_content_length_body","text":"Add Content-Length header of response by response body. Parameters: Name Type Description Default body bytes Response body. required Source code in bamboo/endpoint.py def add_content_length_body ( self , body : bytes ) -> None : \"\"\"Add Content-Length header of response by response body. Args: body: Response body. \"\"\" self . add_header ( \"Content-Length\" , str ( len ( body )))","title":"add_content_length_body()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn.add_content_type","text":"Add Content-Type header of response. Parameters: Name Type Description Default content_type ContentType Information of Content-Type header. required Source code in bamboo/endpoint.py def add_content_type ( self , content_type : ContentType ) -> None : \"\"\"Add Content-Type header of response. Args: content_type: Information of Content-Type header. \"\"\" self . add_header ( * content_type . to_header ())","title":"add_content_type()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn.add_header","text":"Add response header with MIME parameters. Parameters: Name Type Description Default name str Field name of the header. required value str Value of the field. required **params str Directives added to the field. {} Source code in bamboo/endpoint.py def add_header ( self , name : str , value : str , ** params : str ) -> None : \"\"\"Add response header with MIME parameters. Args: name: Field name of the header. value: Value of the field. **params: Directives added to the field. \"\"\" self . _res_headers . append ( make_header ( name , value , ** params ))","title":"add_header()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn.add_headers","text":"Add response headers at once. Note This method would be used as a shortcut to register multiple headers. If it requires adding MIME parameters, developers can use the 'add_header' method. Parameters: Name Type Description Default **headers t.Tuple[str, str] Header's info whose header is the field name. () Source code in bamboo/endpoint.py def add_headers ( self , * headers : t . Tuple [ str , str ]) -> None : \"\"\"Add response headers at once. Note: This method would be used as a shortcut to register multiple headers. If it requires adding MIME parameters, developers can use the 'add_header' method. Args: **headers: Header's info whose header is the field name. \"\"\" for name , val in headers : self . add_header ( name , val )","title":"add_headers()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn.send_api","text":"Set given api data to the response body. Parameters: Name Type Description Default api ApiData ApiData object to be sent. required status HTTPStatus HTTP status of the response. <HTTPStatus.OK: 200> Exceptions: Type Description StatusCodeAlreadySetError Raised if response status code has already been set. Source code in bamboo/endpoint.py def send_api ( self , api : ApiData , status : HTTPStatus = HTTPStatus . OK , ) -> None : \"\"\"Set given api data to the response body. Args: api: ApiData object to be sent. status: HTTP status of the response. Raises: StatusCodeAlreadySetError: Raised if response status code has already been set. \"\"\" self . send_body ( api . __extract__ (), content_type = api . __content_type__ , status = status , )","title":"send_api()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn.send_body","text":"Set given binary to the response body. Note If the parameter content_type is specified, then the Content-Type header is to be added. DEFAULT_CONTENT_TYPE_PLAIN has its MIME type of text/plain , and the other attributes are None . If another value of Content-Type is needed, then you should generate new ContentType instance with attributes you want. Parameters: Name Type Description Default body t.Union[bytes, t.Iterable[bytes]] Binary to be set to the response body. required content_type t.Optional[ContentType] Content-Type header to be sent. ContentType(media_type='text/plain', charset=None, boundary=None) status HTTPStatus HTTP status of the response. <HTTPStatus.OK: 200> Exceptions: Type Description StatusCodeAlreadySetError Raised if response status code has already been set. Source code in bamboo/endpoint.py def send_body ( self , body : t . Union [ bytes , t . Iterable [ bytes ]], * others : t . Union [ bytes , t . Iterable [ bytes ]], content_type : t . Optional [ ContentType ] = DEFAULT_CONTENT_TYPE_PLAIN , status : HTTPStatus = HTTPStatus . OK ) -> None : \"\"\"Set given binary to the response body. Note: If the parameter `content_type` is specified, then the `Content-Type` header is to be added. `DEFAULT_CONTENT_TYPE_PLAIN` has its MIME type of `text/plain`, and the other attributes are `None`. If another value of `Content-Type` is needed, then you should generate new `ContentType` instance with attributes you want. Args: body: Binary to be set to the response body. content_type: `Content-Type` header to be sent. status: HTTP status of the response. Raises: StatusCodeAlreadySetError: Raised if response status code has already been set. \"\"\" self . _set_status_safely ( status ) bodies = [ body ] bodies . extend ( others ) is_all_bytes = True not_empty = False for chunk in bodies : is_all_bytes &= isinstance ( chunk , bytes ) if is_all_bytes : not_empty |= len ( chunk ) > 0 self . _res_body . append ( chunk ) if content_type : self . add_content_type ( content_type ) # Content-Length if avalidable if is_all_bytes and not_empty : length = sum ( map ( len , bodies )) self . add_content_length ( length )","title":"send_body()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn.send_file","text":"Set file to be sent as response. Parameters: Name Type Description Default path str File path. required fname t.Optional[str] File name to be sent. None content_type str Content type of the response. ContentType(media_type='text/plain', charset=None, boundary=None) status HTTPStatus HTTP status of the response. <HTTPStatus.OK: 200> Source code in bamboo/endpoint.py def send_file ( self , path : str , fname : t . Optional [ str ] = None , content_type : str = DEFAULT_CONTENT_TYPE_PLAIN , status : HTTPStatus = HTTPStatus . OK ) -> None : \"\"\"Set file to be sent as response. Args: path: File path. fname: File name to be sent. content_type: Content type of the response. status: HTTP status of the response. \"\"\" file_iter = BufferedFileIterator ( path ) self . send_body ( file_iter , content_type = content_type , status = status ) length = os . path . getsize ( path ) self . add_header ( \"Content-Length\" , str ( length )) if fname : self . add_header ( \"Content-Disposition\" , \"attachment\" , filename = fname )","title":"send_file()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn.send_json","text":"Set given json data to the response body. Parameters: Name Type Description Default body t.Dict[str, t.Any] Json data to be set to the response body. required status HTTPStatus HTTP status of the response. <HTTPStatus.OK: 200> encoding str Encoding of the Json data. 'UTF-8' Exceptions: Type Description StatusCodeAlreadySetError Raised if response status code has already been set. Source code in bamboo/endpoint.py def send_json ( self , body : t . Dict [ str , t . Any ], status : HTTPStatus = HTTPStatus . OK , encoding : str = \"UTF-8\" ) -> None : \"\"\"Set given json data to the response body. Args: body: Json data to be set to the response body. status: HTTP status of the response. encoding: Encoding of the Json data. Raises: StatusCodeAlreadySetError: Raised if response status code has already been set. \"\"\" body = json . dumps ( body ) . encode ( encoding = encoding ) content_type = ContentType ( MediaTypes . json , encoding ) self . send_body ( body , content_type = content_type , status = status )","title":"send_json()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.HTTPMixIn.send_only_status","text":"Set specified status code to one of response. This method can be used if a callback doesn't need to send response body. Parameters: Name Type Description Default status HTTPStatus HTTP status of the response. <HTTPStatus.OK: 200> Source code in bamboo/endpoint.py def send_only_status ( self , status : HTTPStatus = HTTPStatus . OK ) -> None : \"\"\"Set specified status code to one of response. This method can be used if a callback doesn't need to send response body. Args: status: HTTP status of the response. \"\"\" self . _set_status_safely ( status )","title":"send_only_status()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.StaticEndpoint","text":"","title":"StaticEndpoint"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.StaticEndpoint.content_type","text":"Content type of request body. Returns: Type Description ContentType Content type if existing, None otherwise.","title":"content_type"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.StaticEndpoint.setup","text":"Execute setup of the endpoint object. This method will execute at initialization of the object by specifying parcel. The parcel is sent with set_parcel() method of the application object which has included the object as one of the its endpoints. This method can be used as a substitute for the __init__ method. This method is useful in some cases like below: Making an endpoint class a reusable component Injecting environmental dependencies using something like a setting file Parameters: Name Type Description Default *parcel Parcel sent via application object. required Examples: app = WSGIApp () @app . route ( \"hello\" ) class HelloEndpoint ( WSGIEndpoint ): def setup ( self , server_name : str ) -> None : self . _server_name = server_name def do_GET ( self ) -> None : self . send_body ( f \"Hello from { self . _server_name } \" . encode ()) if __name__ == \"__main__\" : SERVER_NAME = \"awesome_server\" app . set_parcel ( HelloEndpoint , SERVER_NAME ) WSGITestExecutor . debug ( app , \"\" , 8000 ) Source code in bamboo/endpoint.py def setup ( self , doc_root : str ) -> None : self . _filepath = os . path . join ( doc_root , * self . path [ 1 :] . split ( \"/\" )) self . _content_type = ContentType ( file2mime ( self . _filepath )) if not os . path . isfile ( self . filepath ) and not os . path . isdir ( self . filepath ): raise DEFAULT_NOT_FOUND_ERROR","title":"setup()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.StaticRedirectASGIEndpoint","text":"","title":"StaticRedirectASGIEndpoint"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.StaticRedirectASGIEndpoint.setup","text":"Execute setup of the endpoint object. This method will execute at initialization of the object by specifying parcel. The parcel is sent with set_parcel() method of the application object which has included the object as one of the its endpoints. This method can be used as a substitute for the __init__ method. This method is useful in some cases like below: Making an endpoint class a reusable component Injecting environmental dependencies using something like a setting file Parameters: Name Type Description Default *parcel Parcel sent via application object. required Examples: app = WSGIApp () @app . route ( \"hello\" ) class HelloEndpoint ( WSGIEndpoint ): def setup ( self , server_name : str ) -> None : self . _server_name = server_name def do_GET ( self ) -> None : self . send_body ( f \"Hello from { self . _server_name } \" . encode ()) if __name__ == \"__main__\" : SERVER_NAME = \"awesome_server\" app . set_parcel ( HelloEndpoint , SERVER_NAME ) WSGITestExecutor . debug ( app , \"\" , 8000 ) Source code in bamboo/endpoint.py def setup ( self , doc_root : str , suffix : str ) -> None : super () . setup ( doc_root ) self . _suffix = suffix","title":"setup()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.StaticRedirectWSGIEndpoint","text":"","title":"StaticRedirectWSGIEndpoint"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.StaticRedirectWSGIEndpoint.setup","text":"Execute setup of the endpoint object. This method will execute at initialization of the object by specifying parcel. The parcel is sent with set_parcel() method of the application object which has included the object as one of the its endpoints. This method can be used as a substitute for the __init__ method. This method is useful in some cases like below: Making an endpoint class a reusable component Injecting environmental dependencies using something like a setting file Parameters: Name Type Description Default *parcel Parcel sent via application object. required Examples: app = WSGIApp () @app . route ( \"hello\" ) class HelloEndpoint ( WSGIEndpoint ): def setup ( self , server_name : str ) -> None : self . _server_name = server_name def do_GET ( self ) -> None : self . send_body ( f \"Hello from { self . _server_name } \" . encode ()) if __name__ == \"__main__\" : SERVER_NAME = \"awesome_server\" app . set_parcel ( HelloEndpoint , SERVER_NAME ) WSGITestExecutor . debug ( app , \"\" , 8000 ) Source code in bamboo/endpoint.py def setup ( self , doc_root : str ) -> None : super () . setup ( doc_root )","title":"setup()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.StatusCodeAlreadySetError","text":"Raised if response status code has already been set.","title":"StatusCodeAlreadySetError"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpoint","text":"HTTP endpoint class compliant with the WSGI. This class is a complete class of endpoints, communicating on HTTP. This class has all attributes of WSGIEndpointBase and HTTPMixIn , and you can define its subclass and use them in your response methods. Examples: app = WSGIApp () @app . route ( \"hello\" ) class HelloEndpoint ( WSGIEndpoint ): # RECOMMEND to use `data_format` decorator def do_GET ( self ) -> None : response = { \"greeting\" : \"Hello, Client!\" } self . send_json ( response ) def do_POST ( self ) -> None : req_body = self . body print ( req_body )","title":"WSGIEndpoint"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpoint.content_length","text":"Content length of request body if existing.","title":"content_length"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpoint.method","text":"HTTP method requested from client.","title":"method"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpoint.__init__","text":"Parameters: Name Type Description Default app WSGIApp Application object which routes the endpoint. required environ t.Dict[str, t.Any] Environ variable received from WSGI server. required flexible_locs t.Tuple[str, ...] Flexible locations requested. required Source code in bamboo/endpoint.py def __init__ ( self , app : WSGIApp , environ : t . Dict [ str , t . Any ], flexible_locs : t . Tuple [ str , ... ], ) -> None : \"\"\" Args: app: Application object which routes the endpoint. environ: Environ variable received from WSGI server. flexible_locs: Flexible locations requested. \"\"\" WSGIEndpointBase . __init__ ( self , app , environ , flexible_locs ) HTTPMixIn . __init__ ( self )","title":"__init__()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpoint.get_req_body_iter","text":"Make an access to the request body as an iterator. Note If the flag cache is True , the request body data is to be cached into the property body , i.e. one always can access to the request body even after the iteration. On the other hand, if the cache is False , caching is not conducted and access to the body will be failed. Parameters: Name Type Description Default bufsize int Chunk size of each item. 8192 cache bool If the request body is to be cached or not. False Returns: Type Description t.Generator[bytes, None, None] Iterator with binary of the request body. Source code in bamboo/endpoint.py def get_req_body_iter ( self , bufsize : int = 8192 , cache : bool = False , ) -> t . Generator [ bytes , None , None ]: \"\"\"Make an access to the request body as an iterator. Note: If the flag `cache` is `True`, the request body data is to be cached into the property `body`, i.e. one always can access to the request body even after the iteration. On the other hand, if the `cache` is `False`, caching is not conducted and access to the `body` will be failed. Args: bufsize: Chunk size of each item. cache: If the request body is to be cached or not. Returns: Iterator with binary of the request body. \"\"\" stream = self . get_req_body_stream () cacher = self . __class__ . body length = self . content_length remain = length while True : if length is None : chunk = stream . read ( bufsize ) elif remain <= 0 : break else : counts = remain if remain < bufsize else bufsize chunk = stream . read ( counts ) remain -= len ( chunk ) if not chunk : break yield chunk # TODO # Seek more efficient ways if cache : if cacher . _has_cache ( self ): chunk = cacher . _get_cache ( self ) + chunk cacher . _set_cache ( self , chunk )","title":"get_req_body_iter()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpoint.get_req_body_stream","text":"Fetch the stream with which request body can be received. Returns: Type Description io.BufferedIOBase The stream with request body. Source code in bamboo/endpoint.py def get_req_body_stream ( self ) -> io . BufferedIOBase : \"\"\"Fetch the stream with which request body can be received. Returns: The stream with request body. \"\"\" return self . _environ . get ( \"wsgi.input\" )","title":"get_req_body_stream()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpointBase","text":"Base class of endpoints compliant with the WSGI. This class implements abstract methods of EndpointBase with the WSGI. However, this class doesn't implement some methods to structure responses. Note DO NOT use this class as the super class of your endpoints. Consider to use subclasses of the class like WSGIEndpoint .","title":"WSGIEndpointBase"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpointBase.environ","text":"environ variable received from WSGI server.","title":"environ"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpointBase.http_version","text":"HTTP Version on communication.","title":"http_version"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpointBase.path","text":"Path of requested URI.","title":"path"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpointBase.scheme","text":"Scheme of requested URI.","title":"scheme"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpointBase.server_software","text":"Software name of WSGI server.","title":"server_software"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpointBase.wsgi_version","text":"WSGI version number.","title":"wsgi_version"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpointBase.__init__","text":"Parameters: Name Type Description Default environ t.Dict[str, t.Any] environ variable received from WSGI server. required flexible_locs t.Tuple[str, ...] flexible locations requested. required Source code in bamboo/endpoint.py def __init__ ( self , app : WSGIApp , environ : t . Dict [ str , t . Any ], flexible_locs : t . Tuple [ str , ... ], ) -> None : \"\"\" Args: environ: environ variable received from WSGI server. flexible_locs: flexible locations requested. \"\"\" self . _environ = environ super () . __init__ ( app , flexible_locs )","title":"__init__()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpointBase.get_client_addr","text":"Retrieve client address, pair of its IP address and port. Note IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of IP and port of client. Source code in bamboo/endpoint.py def get_client_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: client = self . _environ . get ( \"REMOTE_ADDR\" ) port = self . _environ . get ( \"REMOTE_PORT\" ) if port : port = int ( port ) return ( client , port )","title":"get_client_addr()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpointBase.get_header","text":"Retrive header value from requested headers. Parameters: Name Type Description Default name str Header name. required Returns: Type Description t.Optional[str] Value of header if existing, None otherwise. Source code in bamboo/endpoint.py def get_header ( self , name : str ) -> t . Optional [ str ]: name = name . upper () . replace ( \"-\" , \"_\" ) if name == \"CONTENT_TYPE\" : return self . content_type if name == \"CONTENT_LENGTH\" : return self . _environ . get ( \"CONTENT_LENGTH\" ) name = \"HTTP_\" + name return self . _environ . get ( name )","title":"get_header()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpointBase.get_host_addr","text":"Retrive host name and port from requested headers. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of host name and port. Source code in bamboo/endpoint.py def get_host_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: http_host = self . _environ . get ( \"HTTP_HOST\" ) if http_host : http_host = http_host . split ( \":\" ) if len ( http_host ) == 1 : return ( http_host [ 0 ], None ) else : host , port = http_host port = int ( port ) return ( host , port ) return ( None , None )","title":"get_host_addr()"},{"location":"api/bamboo/endpoint/#bamboo.endpoint.WSGIEndpointBase.get_server_addr","text":"Retrive server address, pair of its IP address and port. Note IP address and port may be None if retrieving the address from server application would fail, so it is recommended to confirm your using server application's spec. Returns: Type Description t.Tuple[t.Optional[str], t.Optional[int]] Pair of IP and port of server. Source code in bamboo/endpoint.py def get_server_addr ( self ) -> t . Tuple [ t . Optional [ str ], t . Optional [ int ]]: server = self . _environ . get ( \"SERVER_NAME\" ) port = self . _environ . get ( \"SERVER_PORT\" ) if port : port = int ( port ) return ( server , port )","title":"get_server_addr()"},{"location":"api/bamboo/error/","text":"error DEFAULT_BASIC_AUTH_HEADER_NOT_FOUND_ERROR The default error raised when the header Authorization is not found for basic authentication. The status to be returned to the client is 401. DEFAULT_BEARER_AUTH_HEADER_NOT_FOUND_ERROR The default error raised when the header Authorization is not found for bearer authentication. The status to be returned to the client is 401. DEFAULT_CORS_ERROR The default error raised when an origin doesn't allowed to access the endpoint within the CORS sessions. DEFAULT_HEADER_NOT_FOUND_ERROR The default error raised when a request doesn't have the header promised by server side. The status to be returned to the client is 400. DEFAULT_NOT_APPLICABLE_IP_ERROR The default error raised when a forbidden client IP is found. The status to be returned to the client is 415. DEFAULT_NOT_FOUND_ERROR The default error of the status 404. DEFAULT_QUERY_PARAM_NOT_FOUND_ERROR The default error raised when a request doesn't have the query parameter promised by server side. The status to be returned to the client is 400. DEFUALT_INCORRECT_DATA_FORMAT_ERROR The default error of the status 415. ApiErrInfo ErrInfo to handle API error. This ErrInfo has implemented method of 'get_body'. This class emits Json data including error information defined by developer when the error is sent. dev_message : Optional [ str ] Message to explain developers the error. encoding : str Encoding to encode response body. info : Optional [ str ] Information about the error. inheritted_headers : Set [ str ] Header names to be inheritted. user_message : Optional [ str ] Message to explain end users the error. get_body ( self ) Publishes response body for error response. Returns bytes Response body Source code in bamboo/error.py def get_body ( self ) -> t . Optional [ bytes ]: \"\"\"Publishes response body for error response. Returns ------- bytes Response body \"\"\" body = { \"code\" : self . code , \"developerMessage\" : self . dev_message , \"uesrMessage\" : self . user_message , \"info\" : self . info } return json . dumps ( body ) . encode ( encoding = self . encoding ) DefaultAuthHeaderNotFoundErrInfo http_status : HTTPStatus HTTP status of the error. inheritted_headers : Set [ str ] Header names to be inheritted. get_headers ( self ) Publishes additional headers for error response. Returns: Type Description List[Tuple[str, str]] Additional headers. Source code in bamboo/error.py def get_headers ( self ) -> t . List [ t . Tuple [ str , str ]]: value = get_default_auth_realm ( self . _scheme ) return [( _WWW_AUTH_HEADER , value )] DefaultDataFormatErrInfo http_status : HTTPStatus HTTP status of the error. inheritted_headers : Set [ str ] Header names to be inheritted. DefaultHeaderNotFoundErrInfo http_status : HTTPStatus HTTP status of the error. inheritted_headers : Set [ str ] Header names to be inheritted. DefaultNotApplicableIpErrInfo http_status : HTTPStatus HTTP status of the error. inheritted_headers : Set [ str ] Header names to be inheritted. DefaultNotFoundErrInfo http_status : HTTPStatus HTTP status of the error. inheritted_headers : Set [ str ] Header names to be inheritted. DefaultQueryParamNotFoundErrInfo http_status : HTTPStatus HTTP status of the error. inheritted_headers : Set [ str ] Header names to be inheritted. DefualtCORSOriginNotAllowedErrInfo http_status : HTTPStatus HTTP status of the error. inheritted_headers : Set [ str ] Header names to be inheritted. ErrInfo Base class of all error handlings. This class defines the attributes of all classes for error handling. http_status : HTTPStatus HTTP status of the error. inheritted_headers : Set [ str ] Header names to be inheritted. __init_subclass__ () classmethod special This method is called when a class is subclassed. The default implementation does nothing. It may be overridden to extend subclasses. Source code in bamboo/error.py def __init_subclass__ ( cls ) -> None : # Make header names lower to ignore the difference of upper and # lower charactors. cls . inheritted_headers = set ( map ( str . lower , cls . inheritted_headers )) get_all_form ( self ) Get status code, headers and body of repsponse of the error. Returns: Type Description Tuple[bamboo.http.HTTPStatus, List[Tuple[str, str]], Union[bytes, Iterable[bytes]]] Tuple of status code, headers and body of the error. Source code in bamboo/error.py def get_all_form ( self , ) -> t . Tuple [ HTTPStatus , t . List [ t . Tuple [ str , str ]], t . Union [ bytes , t . Iterable [ bytes ]] ]: \"\"\"Get status code, headers and body of repsponse of the error. Returns: Tuple of status code, headers and body of the error. \"\"\" stat = self . http_status headers = self . get_headers () body = self . get_body () # NOTE # Automatically Content-Type header is to be added. headers . append ( self . __content_type__ . to_header ()) return ( stat , headers , BufferedConcatIterator ( body )) get_body ( self ) Publishes response body for error response. If one want to send a costom response body, one can freely override the method and return the binary. Returns Response body of the error. Source code in bamboo/error.py def get_body ( self ) -> t . Union [ bytes , t . Iterable [ bytes ]]: \"\"\"Publishes response body for error response. If one want to send a costom response body, one can freely override the method and return the binary. Returns Response body of the error. \"\"\" return b \"\" get_headers ( self ) Publishes additional headers for error response. Returns: Type Description List[Tuple[str, str]] Additional headers. Source code in bamboo/error.py def get_headers ( self ) -> t . List [ t . Tuple [ str , str ]]: \"\"\"Publishes additional headers for error response. Returns: Additional headers. \"\"\" return [] inherit_header ( self , header_name ) Make the given header will be inheritted from the endpoint. This method register the header name as a condidate to be inheritted from the endpoint's response headers. Note that the given header could not be inheritted if the endpoint don't have the corresponding response header, even if the method is called. Parameters: Name Type Description Default header_name str Header name to be inheritted. required Source code in bamboo/error.py def inherit_header ( self , header_name : str ) -> None : \"\"\"Make the given header will be inheritted from the endpoint. This method register the header name as a condidate to be inheritted from the endpoint's response headers. Note that the given header could not be inheritted if the endpoint don't have the corresponding response header, even if the method is called. Args: header_name: Header name to be inheritted. \"\"\" self . inheritted_headers . add ( header_name . lower ()) should_inherit_header ( header_name ) classmethod Check if the given header will be inheritted or not. Parameters: Name Type Description Default header_name str Header name to be checked. required Returns: Type Description bool True if the given header will be inheritted, otherwise False . Source code in bamboo/error.py @classmethod def should_inherit_header ( cls , header_name : str ) -> bool : \"\"\"Check if the given header will be inheritted or not. Args: header_name: Header name to be checked. Returns: `True` if the given header will be inheritted, otherwise `False`. \"\"\" return header_name . lower () in cls . inheritted_headers","title":"error"},{"location":"api/bamboo/error/#error","text":"","title":"error"},{"location":"api/bamboo/error/#bamboo.error.DEFAULT_BASIC_AUTH_HEADER_NOT_FOUND_ERROR","text":"The default error raised when the header Authorization is not found for basic authentication. The status to be returned to the client is 401.","title":"DEFAULT_BASIC_AUTH_HEADER_NOT_FOUND_ERROR"},{"location":"api/bamboo/error/#bamboo.error.DEFAULT_BEARER_AUTH_HEADER_NOT_FOUND_ERROR","text":"The default error raised when the header Authorization is not found for bearer authentication. The status to be returned to the client is 401.","title":"DEFAULT_BEARER_AUTH_HEADER_NOT_FOUND_ERROR"},{"location":"api/bamboo/error/#bamboo.error.DEFAULT_CORS_ERROR","text":"The default error raised when an origin doesn't allowed to access the endpoint within the CORS sessions.","title":"DEFAULT_CORS_ERROR"},{"location":"api/bamboo/error/#bamboo.error.DEFAULT_HEADER_NOT_FOUND_ERROR","text":"The default error raised when a request doesn't have the header promised by server side. The status to be returned to the client is 400.","title":"DEFAULT_HEADER_NOT_FOUND_ERROR"},{"location":"api/bamboo/error/#bamboo.error.DEFAULT_NOT_APPLICABLE_IP_ERROR","text":"The default error raised when a forbidden client IP is found. The status to be returned to the client is 415.","title":"DEFAULT_NOT_APPLICABLE_IP_ERROR"},{"location":"api/bamboo/error/#bamboo.error.DEFAULT_NOT_FOUND_ERROR","text":"The default error of the status 404.","title":"DEFAULT_NOT_FOUND_ERROR"},{"location":"api/bamboo/error/#bamboo.error.DEFAULT_QUERY_PARAM_NOT_FOUND_ERROR","text":"The default error raised when a request doesn't have the query parameter promised by server side. The status to be returned to the client is 400.","title":"DEFAULT_QUERY_PARAM_NOT_FOUND_ERROR"},{"location":"api/bamboo/error/#bamboo.error.DEFUALT_INCORRECT_DATA_FORMAT_ERROR","text":"The default error of the status 415.","title":"DEFUALT_INCORRECT_DATA_FORMAT_ERROR"},{"location":"api/bamboo/error/#bamboo.error.ApiErrInfo","text":"ErrInfo to handle API error. This ErrInfo has implemented method of 'get_body'. This class emits Json data including error information defined by developer when the error is sent.","title":"ApiErrInfo"},{"location":"api/bamboo/error/#bamboo.error.ApiErrInfo.dev_message","text":"Message to explain developers the error.","title":"dev_message"},{"location":"api/bamboo/error/#bamboo.error.ApiErrInfo.encoding","text":"Encoding to encode response body.","title":"encoding"},{"location":"api/bamboo/error/#bamboo.error.ApiErrInfo.info","text":"Information about the error.","title":"info"},{"location":"api/bamboo/error/#bamboo.error.ApiErrInfo.inheritted_headers","text":"Header names to be inheritted.","title":"inheritted_headers"},{"location":"api/bamboo/error/#bamboo.error.ApiErrInfo.user_message","text":"Message to explain end users the error.","title":"user_message"},{"location":"api/bamboo/error/#bamboo.error.ApiErrInfo.get_body","text":"Publishes response body for error response.","title":"get_body()"},{"location":"api/bamboo/error/#bamboo.error.ApiErrInfo.get_body--returns","text":"bytes Response body Source code in bamboo/error.py def get_body ( self ) -> t . Optional [ bytes ]: \"\"\"Publishes response body for error response. Returns ------- bytes Response body \"\"\" body = { \"code\" : self . code , \"developerMessage\" : self . dev_message , \"uesrMessage\" : self . user_message , \"info\" : self . info } return json . dumps ( body ) . encode ( encoding = self . encoding )","title":"Returns"},{"location":"api/bamboo/error/#bamboo.error.DefaultAuthHeaderNotFoundErrInfo","text":"","title":"DefaultAuthHeaderNotFoundErrInfo"},{"location":"api/bamboo/error/#bamboo.error.DefaultAuthHeaderNotFoundErrInfo.http_status","text":"HTTP status of the error.","title":"http_status"},{"location":"api/bamboo/error/#bamboo.error.DefaultAuthHeaderNotFoundErrInfo.inheritted_headers","text":"Header names to be inheritted.","title":"inheritted_headers"},{"location":"api/bamboo/error/#bamboo.error.DefaultAuthHeaderNotFoundErrInfo.get_headers","text":"Publishes additional headers for error response. Returns: Type Description List[Tuple[str, str]] Additional headers. Source code in bamboo/error.py def get_headers ( self ) -> t . List [ t . Tuple [ str , str ]]: value = get_default_auth_realm ( self . _scheme ) return [( _WWW_AUTH_HEADER , value )]","title":"get_headers()"},{"location":"api/bamboo/error/#bamboo.error.DefaultDataFormatErrInfo","text":"","title":"DefaultDataFormatErrInfo"},{"location":"api/bamboo/error/#bamboo.error.DefaultDataFormatErrInfo.http_status","text":"HTTP status of the error.","title":"http_status"},{"location":"api/bamboo/error/#bamboo.error.DefaultDataFormatErrInfo.inheritted_headers","text":"Header names to be inheritted.","title":"inheritted_headers"},{"location":"api/bamboo/error/#bamboo.error.DefaultHeaderNotFoundErrInfo","text":"","title":"DefaultHeaderNotFoundErrInfo"},{"location":"api/bamboo/error/#bamboo.error.DefaultHeaderNotFoundErrInfo.http_status","text":"HTTP status of the error.","title":"http_status"},{"location":"api/bamboo/error/#bamboo.error.DefaultHeaderNotFoundErrInfo.inheritted_headers","text":"Header names to be inheritted.","title":"inheritted_headers"},{"location":"api/bamboo/error/#bamboo.error.DefaultNotApplicableIpErrInfo","text":"","title":"DefaultNotApplicableIpErrInfo"},{"location":"api/bamboo/error/#bamboo.error.DefaultNotApplicableIpErrInfo.http_status","text":"HTTP status of the error.","title":"http_status"},{"location":"api/bamboo/error/#bamboo.error.DefaultNotApplicableIpErrInfo.inheritted_headers","text":"Header names to be inheritted.","title":"inheritted_headers"},{"location":"api/bamboo/error/#bamboo.error.DefaultNotFoundErrInfo","text":"","title":"DefaultNotFoundErrInfo"},{"location":"api/bamboo/error/#bamboo.error.DefaultNotFoundErrInfo.http_status","text":"HTTP status of the error.","title":"http_status"},{"location":"api/bamboo/error/#bamboo.error.DefaultNotFoundErrInfo.inheritted_headers","text":"Header names to be inheritted.","title":"inheritted_headers"},{"location":"api/bamboo/error/#bamboo.error.DefaultQueryParamNotFoundErrInfo","text":"","title":"DefaultQueryParamNotFoundErrInfo"},{"location":"api/bamboo/error/#bamboo.error.DefaultQueryParamNotFoundErrInfo.http_status","text":"HTTP status of the error.","title":"http_status"},{"location":"api/bamboo/error/#bamboo.error.DefaultQueryParamNotFoundErrInfo.inheritted_headers","text":"Header names to be inheritted.","title":"inheritted_headers"},{"location":"api/bamboo/error/#bamboo.error.DefualtCORSOriginNotAllowedErrInfo","text":"","title":"DefualtCORSOriginNotAllowedErrInfo"},{"location":"api/bamboo/error/#bamboo.error.DefualtCORSOriginNotAllowedErrInfo.http_status","text":"HTTP status of the error.","title":"http_status"},{"location":"api/bamboo/error/#bamboo.error.DefualtCORSOriginNotAllowedErrInfo.inheritted_headers","text":"Header names to be inheritted.","title":"inheritted_headers"},{"location":"api/bamboo/error/#bamboo.error.ErrInfo","text":"Base class of all error handlings. This class defines the attributes of all classes for error handling.","title":"ErrInfo"},{"location":"api/bamboo/error/#bamboo.error.ErrInfo.http_status","text":"HTTP status of the error.","title":"http_status"},{"location":"api/bamboo/error/#bamboo.error.ErrInfo.inheritted_headers","text":"Header names to be inheritted.","title":"inheritted_headers"},{"location":"api/bamboo/error/#bamboo.error.ErrInfo.__init_subclass__","text":"This method is called when a class is subclassed. The default implementation does nothing. It may be overridden to extend subclasses. Source code in bamboo/error.py def __init_subclass__ ( cls ) -> None : # Make header names lower to ignore the difference of upper and # lower charactors. cls . inheritted_headers = set ( map ( str . lower , cls . inheritted_headers ))","title":"__init_subclass__()"},{"location":"api/bamboo/error/#bamboo.error.ErrInfo.get_all_form","text":"Get status code, headers and body of repsponse of the error. Returns: Type Description Tuple[bamboo.http.HTTPStatus, List[Tuple[str, str]], Union[bytes, Iterable[bytes]]] Tuple of status code, headers and body of the error. Source code in bamboo/error.py def get_all_form ( self , ) -> t . Tuple [ HTTPStatus , t . List [ t . Tuple [ str , str ]], t . Union [ bytes , t . Iterable [ bytes ]] ]: \"\"\"Get status code, headers and body of repsponse of the error. Returns: Tuple of status code, headers and body of the error. \"\"\" stat = self . http_status headers = self . get_headers () body = self . get_body () # NOTE # Automatically Content-Type header is to be added. headers . append ( self . __content_type__ . to_header ()) return ( stat , headers , BufferedConcatIterator ( body ))","title":"get_all_form()"},{"location":"api/bamboo/error/#bamboo.error.ErrInfo.get_body","text":"Publishes response body for error response. If one want to send a costom response body, one can freely override the method and return the binary. Returns Response body of the error. Source code in bamboo/error.py def get_body ( self ) -> t . Union [ bytes , t . Iterable [ bytes ]]: \"\"\"Publishes response body for error response. If one want to send a costom response body, one can freely override the method and return the binary. Returns Response body of the error. \"\"\" return b \"\"","title":"get_body()"},{"location":"api/bamboo/error/#bamboo.error.ErrInfo.get_headers","text":"Publishes additional headers for error response. Returns: Type Description List[Tuple[str, str]] Additional headers. Source code in bamboo/error.py def get_headers ( self ) -> t . List [ t . Tuple [ str , str ]]: \"\"\"Publishes additional headers for error response. Returns: Additional headers. \"\"\" return []","title":"get_headers()"},{"location":"api/bamboo/error/#bamboo.error.ErrInfo.inherit_header","text":"Make the given header will be inheritted from the endpoint. This method register the header name as a condidate to be inheritted from the endpoint's response headers. Note that the given header could not be inheritted if the endpoint don't have the corresponding response header, even if the method is called. Parameters: Name Type Description Default header_name str Header name to be inheritted. required Source code in bamboo/error.py def inherit_header ( self , header_name : str ) -> None : \"\"\"Make the given header will be inheritted from the endpoint. This method register the header name as a condidate to be inheritted from the endpoint's response headers. Note that the given header could not be inheritted if the endpoint don't have the corresponding response header, even if the method is called. Args: header_name: Header name to be inheritted. \"\"\" self . inheritted_headers . add ( header_name . lower ())","title":"inherit_header()"},{"location":"api/bamboo/error/#bamboo.error.ErrInfo.should_inherit_header","text":"Check if the given header will be inheritted or not. Parameters: Name Type Description Default header_name str Header name to be checked. required Returns: Type Description bool True if the given header will be inheritted, otherwise False . Source code in bamboo/error.py @classmethod def should_inherit_header ( cls , header_name : str ) -> bool : \"\"\"Check if the given header will be inheritted or not. Args: header_name: Header name to be checked. Returns: `True` if the given header will be inheritted, otherwise `False`. \"\"\" return header_name . lower () in cls . inheritted_headers","title":"should_inherit_header()"},{"location":"api/bamboo/http/","text":"http ContentType dataclass dataclass for describing value of Content-Type header. Its object is often used when handling the value of Content-Type in Bamboo. parse ( raw ) classmethod Parse and make new instance of this class. Parameters raw : str Value of Content-Type header Returns ContentType New instance of this class based on the raw data Source code in bamboo/http.py @classmethod def parse ( cls , raw : str ) -> ContentType : \"\"\"Parse and make new instance of this class. Parameters ---------- raw : str Value of `Content-Type` header Returns ------- ContentType New instance of this class based on the `raw` data \"\"\" raw = re . split ( \";\\s*\" , raw ) result = cls ( raw [ 0 ]) for directive , val in [ item . split ( \"=\" ) for item in raw [ 1 :]]: if directive == \"charset\" : result . charset = val . lower () elif directive == \"boundary\" : result . boundary = val return result to_header ( self ) Format contents as a Content-Type header. Returns: Type Description t.Tuple[str, str] Header name and value of the header. Source code in bamboo/http.py def to_header ( self ) -> t . Tuple [ str , str ]: \"\"\"Format contents as a Content-Type header. Returns: Header name and value of the header. \"\"\" params = {} if self . charset : params [ \"charset\" ] = self . charset if self . boundary : params [ \"boundary\" ] = self . boundary return make_header ( \"Content-Type\" , self . media_type , ** params ) ContentTypeHolder Abstract class with properties about Content-Type . HTTPStatus Enum which describes HTTP status. Each class variables of the class have four main attributes: value wsgi asgi description value means the enum value and describes HTTP status as int. wsgi is str and used only for WSGI servers. Similarly, asgi is int and only for ASGI servers. 'description' describes short message of corresponding HTTP satus.","title":"http"},{"location":"api/bamboo/http/#http","text":"","title":"http"},{"location":"api/bamboo/http/#bamboo.http.ContentType","text":"dataclass for describing value of Content-Type header. Its object is often used when handling the value of Content-Type in Bamboo.","title":"ContentType"},{"location":"api/bamboo/http/#bamboo.http.ContentType.parse","text":"Parse and make new instance of this class.","title":"parse()"},{"location":"api/bamboo/http/#bamboo.http.ContentType.parse--parameters","text":"raw : str Value of Content-Type header","title":"Parameters"},{"location":"api/bamboo/http/#bamboo.http.ContentType.parse--returns","text":"ContentType New instance of this class based on the raw data Source code in bamboo/http.py @classmethod def parse ( cls , raw : str ) -> ContentType : \"\"\"Parse and make new instance of this class. Parameters ---------- raw : str Value of `Content-Type` header Returns ------- ContentType New instance of this class based on the `raw` data \"\"\" raw = re . split ( \";\\s*\" , raw ) result = cls ( raw [ 0 ]) for directive , val in [ item . split ( \"=\" ) for item in raw [ 1 :]]: if directive == \"charset\" : result . charset = val . lower () elif directive == \"boundary\" : result . boundary = val return result","title":"Returns"},{"location":"api/bamboo/http/#bamboo.http.ContentType.to_header","text":"Format contents as a Content-Type header. Returns: Type Description t.Tuple[str, str] Header name and value of the header. Source code in bamboo/http.py def to_header ( self ) -> t . Tuple [ str , str ]: \"\"\"Format contents as a Content-Type header. Returns: Header name and value of the header. \"\"\" params = {} if self . charset : params [ \"charset\" ] = self . charset if self . boundary : params [ \"boundary\" ] = self . boundary return make_header ( \"Content-Type\" , self . media_type , ** params )","title":"to_header()"},{"location":"api/bamboo/http/#bamboo.http.ContentTypeHolder","text":"Abstract class with properties about Content-Type .","title":"ContentTypeHolder"},{"location":"api/bamboo/http/#bamboo.http.HTTPStatus","text":"Enum which describes HTTP status. Each class variables of the class have four main attributes: value wsgi asgi description value means the enum value and describes HTTP status as int. wsgi is str and used only for WSGI servers. Similarly, asgi is int and only for ASGI servers. 'description' describes short message of corresponding HTTP satus.","title":"HTTPStatus"},{"location":"api/bamboo/io/","text":"io BufferedBinaryIterator Iterator for sending bytes as chunks. Its object can be used to generate iterator from a bytes object, which yields specified size of bytes objects. Note Even if you generate its object from a bytes object sending to a client and specify it as response body, there may be no effect on performance of your web application. Its object should be used only for unifying interface as a subclass of ResponseBodyIteratorBase . __init__ ( self , data , bufsize = 8192 ) special Parameters: Name Type Description Default data bytes A bytes object to be iterated. required bufsize int Chunk size of bytes objects yielded from the iterator. 8192 Source code in bamboo/io.py def __init__ ( self , data : bytes , bufsize : int = 8192 ) -> None : \"\"\" Args: data: A bytes object to be iterated. bufsize: Chunk size of bytes objects yielded from the iterator. \"\"\" super () . __init__ () self . _data = io . BytesIO ( data ) self . _bufsize = bufsize BufferedConcatIterator Iterator conbining serveral iterator yeilding bytes objects. Its object can concatenate several iterator or bytes objects and behaves as a single iterator yieding bytes objects with specified chunk size. __init__ ( self , * items , * , bufsize = 8192 ) special Parameters: Name Type Description Default *items Union[bytes, Iterator[bytes]] bytes objects or iterators yielding bytes. () bufsize int Chunk size of bytes objects yielded from the iterator. 8192 Source code in bamboo/io.py def __init__ ( self , * items : t . Union [ bytes , t . Iterator [ bytes ]], bufsize : int = 8192 ) -> None : \"\"\" Args: *items: bytes objects or iterators yielding bytes. bufsize: Chunk size of bytes objects yielded from the iterator. \"\"\" super () . __init__ () self . _iters : t . Deque [ t . Iterator [ bytes ]] = deque () self . _current : t . Iterator [ bytes ] = None self . _bufsize = bufsize self . _buffer = io . BytesIO () for item in items : self . append ( item ) append ( self , item ) Add bytes or iterator yielding bytes inside. Parameters: Name Type Description Default item Union[bytes, Iterator[bytes]] bytes object or iterator yielding bytes. required Source code in bamboo/io.py def append ( self , item : t . Union [ bytes , t . Iterator [ bytes ]]) -> None : \"\"\"Add bytes or iterator yielding bytes inside. Args: item: bytes object or iterator yielding bytes. \"\"\" if isinstance ( item , bytes ): self . _iters . append ( BufferedBinaryIterator ( item , bufsize = self . _bufsize ) ) else : self . _iters . append ( BufferedIteratorWrapper ( item , bufsize = self . _bufsize ) ) BufferedFileIterator Iterator of binary made with file path. Its object can be used to iterate file-like obj made with file path. __init__ ( self , path , bufsize = 8192 , remove = False ) special Parameters: Name Type Description Default path str File path. required bufsize int Chunk size of bytes objects yielded from the iterator. 8192 Source code in bamboo/io.py def __init__ ( self , path : str , bufsize : int = 8192 , remove : bool = False , ) -> None : \"\"\" Args: path: File path. bufsize: Chunk size of bytes objects yielded from the iterator. \"\"\" self . _path = path self . _remove = remove file = open ( path , \"br\" ) super () . __init__ ( file , bufsize = bufsize ) BufferedIteratorWrapper Iterator wrapping iterator yeilding bytes objects. Its object holds an iterator inner, which can yeilds bytes objects with arbitary sizes, and its object yeilds bytes objects with specified chunk size, i.e. this object changes chunk size of bytes yielded from given iterator. __init__ ( self , iter , bufsize = 8192 ) special Parameters: Name Type Description Default iter Iterator[bytes] Iterator wrapped. required bufsize int Chunk size of bytes objects yielded from the iterator. 8192 Source code in bamboo/io.py def __init__ ( self , iter : t . Iterator [ bytes ], bufsize : int = 8192 ) -> None : \"\"\" Args: iter: Iterator wrapped. bufsize: Chunk size of bytes objects yielded from the iterator. \"\"\" super () . __init__ () self . _iter = iter self . _bufsize = bufsize self . _buffer = io . BytesIO () BufferedStreamIterator Iterator of binary made with file-like object. Its object can be used to iterate file-like obj of binary. __init__ ( self , stream , bufsize = 8192 ) special Parameters: Name Type Description Default stream ~BinaryReadableStream_t File-like object readable binary. required bufsize int Chunk size of bytes objects yielded from the iterator. 8192 Exceptions: Type Description TypeError Raised if stream is not readable. Source code in bamboo/io.py def __init__ ( self , stream : BinaryReadableStream_t , bufsize : int = 8192 ) -> None : \"\"\" Args: stream: File-like object readable binary. bufsize: Chunk size of bytes objects yielded from the iterator. Raises: TypeError: Raised if `stream` is not readable. \"\"\" super () . __init__ () if not ( isinstance ( stream , io . IOBase ) and hasattr ( stream , \"read\" )): raise TypeError ( \"'stream' must be IOBase and have the 'read' method.\" ) self . _stream = stream self . _bufsize = bufsize ResponseBodyIteratorBase Base class of iterator for buffering response body.","title":"io"},{"location":"api/bamboo/io/#io","text":"","title":"io"},{"location":"api/bamboo/io/#bamboo.io.BufferedBinaryIterator","text":"Iterator for sending bytes as chunks. Its object can be used to generate iterator from a bytes object, which yields specified size of bytes objects. Note Even if you generate its object from a bytes object sending to a client and specify it as response body, there may be no effect on performance of your web application. Its object should be used only for unifying interface as a subclass of ResponseBodyIteratorBase .","title":"BufferedBinaryIterator"},{"location":"api/bamboo/io/#bamboo.io.BufferedBinaryIterator.__init__","text":"Parameters: Name Type Description Default data bytes A bytes object to be iterated. required bufsize int Chunk size of bytes objects yielded from the iterator. 8192 Source code in bamboo/io.py def __init__ ( self , data : bytes , bufsize : int = 8192 ) -> None : \"\"\" Args: data: A bytes object to be iterated. bufsize: Chunk size of bytes objects yielded from the iterator. \"\"\" super () . __init__ () self . _data = io . BytesIO ( data ) self . _bufsize = bufsize","title":"__init__()"},{"location":"api/bamboo/io/#bamboo.io.BufferedConcatIterator","text":"Iterator conbining serveral iterator yeilding bytes objects. Its object can concatenate several iterator or bytes objects and behaves as a single iterator yieding bytes objects with specified chunk size.","title":"BufferedConcatIterator"},{"location":"api/bamboo/io/#bamboo.io.BufferedConcatIterator.__init__","text":"Parameters: Name Type Description Default *items Union[bytes, Iterator[bytes]] bytes objects or iterators yielding bytes. () bufsize int Chunk size of bytes objects yielded from the iterator. 8192 Source code in bamboo/io.py def __init__ ( self , * items : t . Union [ bytes , t . Iterator [ bytes ]], bufsize : int = 8192 ) -> None : \"\"\" Args: *items: bytes objects or iterators yielding bytes. bufsize: Chunk size of bytes objects yielded from the iterator. \"\"\" super () . __init__ () self . _iters : t . Deque [ t . Iterator [ bytes ]] = deque () self . _current : t . Iterator [ bytes ] = None self . _bufsize = bufsize self . _buffer = io . BytesIO () for item in items : self . append ( item )","title":"__init__()"},{"location":"api/bamboo/io/#bamboo.io.BufferedConcatIterator.append","text":"Add bytes or iterator yielding bytes inside. Parameters: Name Type Description Default item Union[bytes, Iterator[bytes]] bytes object or iterator yielding bytes. required Source code in bamboo/io.py def append ( self , item : t . Union [ bytes , t . Iterator [ bytes ]]) -> None : \"\"\"Add bytes or iterator yielding bytes inside. Args: item: bytes object or iterator yielding bytes. \"\"\" if isinstance ( item , bytes ): self . _iters . append ( BufferedBinaryIterator ( item , bufsize = self . _bufsize ) ) else : self . _iters . append ( BufferedIteratorWrapper ( item , bufsize = self . _bufsize ) )","title":"append()"},{"location":"api/bamboo/io/#bamboo.io.BufferedFileIterator","text":"Iterator of binary made with file path. Its object can be used to iterate file-like obj made with file path.","title":"BufferedFileIterator"},{"location":"api/bamboo/io/#bamboo.io.BufferedFileIterator.__init__","text":"Parameters: Name Type Description Default path str File path. required bufsize int Chunk size of bytes objects yielded from the iterator. 8192 Source code in bamboo/io.py def __init__ ( self , path : str , bufsize : int = 8192 , remove : bool = False , ) -> None : \"\"\" Args: path: File path. bufsize: Chunk size of bytes objects yielded from the iterator. \"\"\" self . _path = path self . _remove = remove file = open ( path , \"br\" ) super () . __init__ ( file , bufsize = bufsize )","title":"__init__()"},{"location":"api/bamboo/io/#bamboo.io.BufferedIteratorWrapper","text":"Iterator wrapping iterator yeilding bytes objects. Its object holds an iterator inner, which can yeilds bytes objects with arbitary sizes, and its object yeilds bytes objects with specified chunk size, i.e. this object changes chunk size of bytes yielded from given iterator.","title":"BufferedIteratorWrapper"},{"location":"api/bamboo/io/#bamboo.io.BufferedIteratorWrapper.__init__","text":"Parameters: Name Type Description Default iter Iterator[bytes] Iterator wrapped. required bufsize int Chunk size of bytes objects yielded from the iterator. 8192 Source code in bamboo/io.py def __init__ ( self , iter : t . Iterator [ bytes ], bufsize : int = 8192 ) -> None : \"\"\" Args: iter: Iterator wrapped. bufsize: Chunk size of bytes objects yielded from the iterator. \"\"\" super () . __init__ () self . _iter = iter self . _bufsize = bufsize self . _buffer = io . BytesIO ()","title":"__init__()"},{"location":"api/bamboo/io/#bamboo.io.BufferedStreamIterator","text":"Iterator of binary made with file-like object. Its object can be used to iterate file-like obj of binary.","title":"BufferedStreamIterator"},{"location":"api/bamboo/io/#bamboo.io.BufferedStreamIterator.__init__","text":"Parameters: Name Type Description Default stream ~BinaryReadableStream_t File-like object readable binary. required bufsize int Chunk size of bytes objects yielded from the iterator. 8192 Exceptions: Type Description TypeError Raised if stream is not readable. Source code in bamboo/io.py def __init__ ( self , stream : BinaryReadableStream_t , bufsize : int = 8192 ) -> None : \"\"\" Args: stream: File-like object readable binary. bufsize: Chunk size of bytes objects yielded from the iterator. Raises: TypeError: Raised if `stream` is not readable. \"\"\" super () . __init__ () if not ( isinstance ( stream , io . IOBase ) and hasattr ( stream , \"read\" )): raise TypeError ( \"'stream' must be IOBase and have the 'read' method.\" ) self . _stream = stream self . _bufsize = bufsize","title":"__init__()"},{"location":"api/bamboo/io/#bamboo.io.ResponseBodyIteratorBase","text":"Base class of iterator for buffering response body.","title":"ResponseBodyIteratorBase"},{"location":"api/bamboo/location/","text":"location AnyStringLocation Flexible location representing string with no rules. __init__ ( self , max = None ) special Note If the argument max is None , then any length of string will be accepted. Parameters: Name Type Description Default max Optional[int] Max length of string of location. None Exceptions: Type Description ValueError Raised if max is 0 or less. Source code in bamboo/location.py def __init__ ( self , max : t . Optional [ int ] = None ) -> None : \"\"\" Note: If the argument `max` is `None`, then any length of string will be accepted. Args: max: Max length of string of location. Raises: ValueError: Raised if `max` is 0 or less. \"\"\" if max and max < 1 : raise ValueError ( \"'max' must be bigger than 0.\" ) self . _max = max is_valid ( self , loc ) Judge if specified loc is valid location or not. Parameters: Name Type Description Default loc str Location to be judged. required Returns: Type Description bool True if specified location is valid, False otherwise. Source code in bamboo/location.py def is_valid ( self , loc : str ) -> bool : \"\"\"Judge if specified `loc` is valid location or not. Args: loc: Location to be judged. Returns: True if specified location is valid, False otherwise. \"\"\" if self . _max is None : return True len_loc = len ( loc ) if len_loc > self . _max or len_loc == 0 : return False return True AsciiDigitLocation Flexible location representing location of number in ASCII code. __init__ ( self , digits ) special Parameters: Name Type Description Default digits int Number of digits which the location accepts. required Exceptions: Type Description ValueError Raised if digits is 0 or less. Source code in bamboo/location.py def __init__ ( self , digits : int ) -> None : \"\"\" Args: digits: Number of digits which the location accepts. Raises: ValueError: Raised if `digits` is 0 or less. \"\"\" if digits < 1 : raise ValueError ( \"'digits' must be bigger than 0.\" ) self . _digits = digits is_valid ( self , loc ) Judge if specified loc is valid location or not. Parameters: Name Type Description Default loc str Location to be judged. required Returns: Type Description bool True if specified location is valid, False otherwise. Source code in bamboo/location.py def is_valid ( self , loc : str ) -> bool : \"\"\"Judge if specified `loc` is valid location or not. Args: loc: Location to be judged. Returns: True if specified location is valid, False otherwise. \"\"\" return loc . isascii () and loc . isdigit () and len ( loc ) == self . _digits FlexibleLocation Base class of flexible location. Location is concept representing each pieces of path of URI, i.e. locations can configures a path of URI by joining them with separator / . Location has type of str or subclasses of this class. If a location is str , then the location is called a static location. Otherwise, the location is called a flexible location. Flexible locations means location with some kind of logical rules of strings. The logic of rules can be implemented on is_valid method, returning if specified string is valid in the rules. is_duplicated_uri ( uri_1 , uri_2 ) Judge if a couple of specified URI patterns has same pattern. Parameters: Name Type Description Default uri_1 Tuple[Union[str, bamboo.location.FlexibleLocation], ...] URI pattern to be judged required uri_2 Tuple[Union[str, bamboo.location.FlexibleLocation], ...] URI pattern to be judged required Returns: Type Description bool True if two URIs has same pattern, False otherwise. Source code in bamboo/location.py def is_duplicated_uri ( uri_1 : Uri_t , uri_2 : Uri_t ) -> bool : \"\"\"Judge if a couple of specified URI patterns has same pattern. Args: uri_1: URI pattern to be judged uri_2: URI pattern to be judged Returns: True if two URIs has same pattern, False otherwise. \"\"\" if len ( uri_1 ) == len ( uri_2 ): for loc_1 , loc_2 in zip ( uri_1 , uri_2 ): if isinstance ( loc_1 , FlexibleLocation ): continue if isinstance ( loc_2 , FlexibleLocation ): continue if loc_1 != loc_2 : break else : return True return False is_flexible_uri ( uri ) Judge if specified uri has one or more flexible location. Parameters: Name Type Description Default uri Tuple[Union[str, bamboo.location.FlexibleLocation], ...] URI pattern to be judged. required Returns: Type Description bool True if specified uri has one or more flexible location, False otherwise. Source code in bamboo/location.py def is_flexible_uri ( uri : Uri_t ) -> bool : \"\"\"Judge if specified `uri` has one or more flexible location. Args: uri: URI pattern to be judged. Returns: True if specified `uri` has one or more flexible location, False otherwise. \"\"\" for loc in uri : if isinstance ( loc , FlexibleLocation ): return True return False","title":"location"},{"location":"api/bamboo/location/#location","text":"","title":"location"},{"location":"api/bamboo/location/#bamboo.location.AnyStringLocation","text":"Flexible location representing string with no rules.","title":"AnyStringLocation"},{"location":"api/bamboo/location/#bamboo.location.AnyStringLocation.__init__","text":"Note If the argument max is None , then any length of string will be accepted. Parameters: Name Type Description Default max Optional[int] Max length of string of location. None Exceptions: Type Description ValueError Raised if max is 0 or less. Source code in bamboo/location.py def __init__ ( self , max : t . Optional [ int ] = None ) -> None : \"\"\" Note: If the argument `max` is `None`, then any length of string will be accepted. Args: max: Max length of string of location. Raises: ValueError: Raised if `max` is 0 or less. \"\"\" if max and max < 1 : raise ValueError ( \"'max' must be bigger than 0.\" ) self . _max = max","title":"__init__()"},{"location":"api/bamboo/location/#bamboo.location.AnyStringLocation.is_valid","text":"Judge if specified loc is valid location or not. Parameters: Name Type Description Default loc str Location to be judged. required Returns: Type Description bool True if specified location is valid, False otherwise. Source code in bamboo/location.py def is_valid ( self , loc : str ) -> bool : \"\"\"Judge if specified `loc` is valid location or not. Args: loc: Location to be judged. Returns: True if specified location is valid, False otherwise. \"\"\" if self . _max is None : return True len_loc = len ( loc ) if len_loc > self . _max or len_loc == 0 : return False return True","title":"is_valid()"},{"location":"api/bamboo/location/#bamboo.location.AsciiDigitLocation","text":"Flexible location representing location of number in ASCII code.","title":"AsciiDigitLocation"},{"location":"api/bamboo/location/#bamboo.location.AsciiDigitLocation.__init__","text":"Parameters: Name Type Description Default digits int Number of digits which the location accepts. required Exceptions: Type Description ValueError Raised if digits is 0 or less. Source code in bamboo/location.py def __init__ ( self , digits : int ) -> None : \"\"\" Args: digits: Number of digits which the location accepts. Raises: ValueError: Raised if `digits` is 0 or less. \"\"\" if digits < 1 : raise ValueError ( \"'digits' must be bigger than 0.\" ) self . _digits = digits","title":"__init__()"},{"location":"api/bamboo/location/#bamboo.location.AsciiDigitLocation.is_valid","text":"Judge if specified loc is valid location or not. Parameters: Name Type Description Default loc str Location to be judged. required Returns: Type Description bool True if specified location is valid, False otherwise. Source code in bamboo/location.py def is_valid ( self , loc : str ) -> bool : \"\"\"Judge if specified `loc` is valid location or not. Args: loc: Location to be judged. Returns: True if specified location is valid, False otherwise. \"\"\" return loc . isascii () and loc . isdigit () and len ( loc ) == self . _digits","title":"is_valid()"},{"location":"api/bamboo/location/#bamboo.location.FlexibleLocation","text":"Base class of flexible location. Location is concept representing each pieces of path of URI, i.e. locations can configures a path of URI by joining them with separator / . Location has type of str or subclasses of this class. If a location is str , then the location is called a static location. Otherwise, the location is called a flexible location. Flexible locations means location with some kind of logical rules of strings. The logic of rules can be implemented on is_valid method, returning if specified string is valid in the rules.","title":"FlexibleLocation"},{"location":"api/bamboo/location/#bamboo.location.is_duplicated_uri","text":"Judge if a couple of specified URI patterns has same pattern. Parameters: Name Type Description Default uri_1 Tuple[Union[str, bamboo.location.FlexibleLocation], ...] URI pattern to be judged required uri_2 Tuple[Union[str, bamboo.location.FlexibleLocation], ...] URI pattern to be judged required Returns: Type Description bool True if two URIs has same pattern, False otherwise. Source code in bamboo/location.py def is_duplicated_uri ( uri_1 : Uri_t , uri_2 : Uri_t ) -> bool : \"\"\"Judge if a couple of specified URI patterns has same pattern. Args: uri_1: URI pattern to be judged uri_2: URI pattern to be judged Returns: True if two URIs has same pattern, False otherwise. \"\"\" if len ( uri_1 ) == len ( uri_2 ): for loc_1 , loc_2 in zip ( uri_1 , uri_2 ): if isinstance ( loc_1 , FlexibleLocation ): continue if isinstance ( loc_2 , FlexibleLocation ): continue if loc_1 != loc_2 : break else : return True return False","title":"is_duplicated_uri()"},{"location":"api/bamboo/location/#bamboo.location.is_flexible_uri","text":"Judge if specified uri has one or more flexible location. Parameters: Name Type Description Default uri Tuple[Union[str, bamboo.location.FlexibleLocation], ...] URI pattern to be judged. required Returns: Type Description bool True if specified uri has one or more flexible location, False otherwise. Source code in bamboo/location.py def is_flexible_uri ( uri : Uri_t ) -> bool : \"\"\"Judge if specified `uri` has one or more flexible location. Args: uri: URI pattern to be judged. Returns: True if specified `uri` has one or more flexible location, False otherwise. \"\"\" for loc in uri : if isinstance ( loc , FlexibleLocation ): return True return False","title":"is_flexible_uri()"},{"location":"api/bamboo/pkg/","text":"bamboo","title":"bamboo"},{"location":"api/bamboo/pkg/#bamboo","text":"","title":"bamboo"},{"location":"api/bamboo/router/","text":"router DuplicatedUriRegisteredError Raised if duplicated URI is registered. Router Operator of routing request to Endpoint by URI. register ( self , uri , endpoint , version = ()) Register combination of URI and Endpoint . Parameters: Name Type Description Default uri Tuple[Union[str, bamboo.location.FlexibleLocation], ...] URI pattern of the Endpoint . required endpoint Type[~Endpoint_t] Endpoint class to be registered. required version Union[str, Tuple[str, ...]] Version of the Endpoint . () Exceptions: Type Description DuplicatedUriRegisteredError Raised if given URI pattern matches one already registered. Source code in bamboo/router.py def register ( self , uri : Uri_t , endpoint : t . Type [ Endpoint_t ], version : t . Union [ str , t . Tuple [ str , ... ]] = () ) -> None : \"\"\"Register combination of URI and `Endpoint`. Args: uri: URI pattern of the `Endpoint`. endpoint: `Endpoint` class to be registered. version: Version of the `Endpoint`. Raises: DuplicatedUriRegisteredError: Raised if given URI pattern matches one already registered. \"\"\" for uri_registered in self . _raw_uri2endpoint . keys (): if is_duplicated_uri ( uri_registered , uri ): raise DuplicatedUriRegisteredError ( \"Duplicated URIs were detected. \\n \" f \"URI pattern 1: { uri_registered } \\n \" f \"URI pattern 2: { uri } \" ) else : self . _raw_uri2endpoint [ uri ] = endpoint if isinstance ( version , str ): version = ( version ,) if len ( version ): uris = [( ver ,) + uri for ver in version ] else : uris = [ uri ] for _uri in uris : if is_flexible_uri ( _uri ): self . uris_flexible . append ( _uri ) self . uri2endpoint [ _uri ] = endpoint search_uris ( self , endpoint ) Search URI patterns of specified endpoint . endpoint: Endpoint class whose URI patterns to be retrieved. Returns: Type Description List[Tuple[Union[str, bamboo.location.FlexibleLocation], ...]] Result of searching. Source code in bamboo/router.py def search_uris ( self , endpoint : t . Type [ Endpoint_t ]) -> t . List [ Uri_t ]: \"\"\"Search URI patterns of specified `endpoint`. Args: endpoint: `Endpoint` class whose URI patterns to be retrieved. Returns: Result of searching. \"\"\" return [ uri for uri , point in self . uri2endpoint . items () if point is endpoint ] validate ( self , uri ) Validate specified uri and retrieved Endpoint . Note This method returns pair of tuple of flexible locations specified as parts of URI pattern linked to Endpoint and its Endpoint . If any flexible locations are not included in the URI pattern, then empty tuple will be returned as a sequence of flexible locations, so if URI patterns is configured with only static locations, you will get the empty tuple. If invalid URI pattern is come, then also empty tuple will be return as sequence of flexible locations and None as Endpoint , or ((), None) . Parameters: Name Type Description Default uri str Path of URI. required Returns: Type Description Tuple[Tuple[str, ...], Optional[Type[~Endpoint_t]]] Pair of values of flexible locations and Endpoint if specified uri is valid. Source code in bamboo/router.py def validate ( self , uri : str ) -> t . Tuple [ t . Tuple [ str , ... ], t . Optional [ t . Type [ Endpoint_t ]]]: \"\"\"Validate specified `uri` and retrieved `Endpoint`. Note: This method returns pair of tuple of flexible locations specified as parts of URI pattern linked to `Endpoint` and its `Endpoint`. If any flexible locations are not included in the URI pattern, then empty tuple will be returned as a sequence of flexible locations, so if URI patterns is configured with only static locations, you will get the empty tuple. If invalid URI pattern is come, then also empty tuple will be return as sequence of flexible locations and `None` as `Endpoint`, or `((), None)`. Args: uri: Path of URI. Returns: Pair of values of flexible locations and `Endpoint` if specified `uri` is valid. \"\"\" uri = tuple ( uri [ 1 :] . split ( \"/\" )) if not uri [ 0 ]: uri = () endpoint = self . uri2endpoint . get ( uri ) if endpoint : return ((), endpoint ) depth = len ( uri ) for flexible in self . uris_flexible : if len ( flexible ) != depth : continue flexibles_received = [] # Judging each locations for loc_req , loc_flex in zip ( uri , flexible ): if isinstance ( loc_flex , FlexibleLocation ): if not loc_flex . is_valid ( loc_req ): break flexibles_received . append ( loc_req ) else : if loc_req != loc_flex : break else : # Correct case endpoint = self . uri2endpoint . get ( flexible ) return ( tuple ( flexibles_received ), endpoint ) # Could not find it return ((), None )","title":"router"},{"location":"api/bamboo/router/#router","text":"","title":"router"},{"location":"api/bamboo/router/#bamboo.router.DuplicatedUriRegisteredError","text":"Raised if duplicated URI is registered.","title":"DuplicatedUriRegisteredError"},{"location":"api/bamboo/router/#bamboo.router.Router","text":"Operator of routing request to Endpoint by URI.","title":"Router"},{"location":"api/bamboo/router/#bamboo.router.Router.register","text":"Register combination of URI and Endpoint . Parameters: Name Type Description Default uri Tuple[Union[str, bamboo.location.FlexibleLocation], ...] URI pattern of the Endpoint . required endpoint Type[~Endpoint_t] Endpoint class to be registered. required version Union[str, Tuple[str, ...]] Version of the Endpoint . () Exceptions: Type Description DuplicatedUriRegisteredError Raised if given URI pattern matches one already registered. Source code in bamboo/router.py def register ( self , uri : Uri_t , endpoint : t . Type [ Endpoint_t ], version : t . Union [ str , t . Tuple [ str , ... ]] = () ) -> None : \"\"\"Register combination of URI and `Endpoint`. Args: uri: URI pattern of the `Endpoint`. endpoint: `Endpoint` class to be registered. version: Version of the `Endpoint`. Raises: DuplicatedUriRegisteredError: Raised if given URI pattern matches one already registered. \"\"\" for uri_registered in self . _raw_uri2endpoint . keys (): if is_duplicated_uri ( uri_registered , uri ): raise DuplicatedUriRegisteredError ( \"Duplicated URIs were detected. \\n \" f \"URI pattern 1: { uri_registered } \\n \" f \"URI pattern 2: { uri } \" ) else : self . _raw_uri2endpoint [ uri ] = endpoint if isinstance ( version , str ): version = ( version ,) if len ( version ): uris = [( ver ,) + uri for ver in version ] else : uris = [ uri ] for _uri in uris : if is_flexible_uri ( _uri ): self . uris_flexible . append ( _uri ) self . uri2endpoint [ _uri ] = endpoint","title":"register()"},{"location":"api/bamboo/router/#bamboo.router.Router.search_uris","text":"Search URI patterns of specified endpoint . endpoint: Endpoint class whose URI patterns to be retrieved. Returns: Type Description List[Tuple[Union[str, bamboo.location.FlexibleLocation], ...]] Result of searching. Source code in bamboo/router.py def search_uris ( self , endpoint : t . Type [ Endpoint_t ]) -> t . List [ Uri_t ]: \"\"\"Search URI patterns of specified `endpoint`. Args: endpoint: `Endpoint` class whose URI patterns to be retrieved. Returns: Result of searching. \"\"\" return [ uri for uri , point in self . uri2endpoint . items () if point is endpoint ]","title":"search_uris()"},{"location":"api/bamboo/router/#bamboo.router.Router.validate","text":"Validate specified uri and retrieved Endpoint . Note This method returns pair of tuple of flexible locations specified as parts of URI pattern linked to Endpoint and its Endpoint . If any flexible locations are not included in the URI pattern, then empty tuple will be returned as a sequence of flexible locations, so if URI patterns is configured with only static locations, you will get the empty tuple. If invalid URI pattern is come, then also empty tuple will be return as sequence of flexible locations and None as Endpoint , or ((), None) . Parameters: Name Type Description Default uri str Path of URI. required Returns: Type Description Tuple[Tuple[str, ...], Optional[Type[~Endpoint_t]]] Pair of values of flexible locations and Endpoint if specified uri is valid. Source code in bamboo/router.py def validate ( self , uri : str ) -> t . Tuple [ t . Tuple [ str , ... ], t . Optional [ t . Type [ Endpoint_t ]]]: \"\"\"Validate specified `uri` and retrieved `Endpoint`. Note: This method returns pair of tuple of flexible locations specified as parts of URI pattern linked to `Endpoint` and its `Endpoint`. If any flexible locations are not included in the URI pattern, then empty tuple will be returned as a sequence of flexible locations, so if URI patterns is configured with only static locations, you will get the empty tuple. If invalid URI pattern is come, then also empty tuple will be return as sequence of flexible locations and `None` as `Endpoint`, or `((), None)`. Args: uri: Path of URI. Returns: Pair of values of flexible locations and `Endpoint` if specified `uri` is valid. \"\"\" uri = tuple ( uri [ 1 :] . split ( \"/\" )) if not uri [ 0 ]: uri = () endpoint = self . uri2endpoint . get ( uri ) if endpoint : return ((), endpoint ) depth = len ( uri ) for flexible in self . uris_flexible : if len ( flexible ) != depth : continue flexibles_received = [] # Judging each locations for loc_req , loc_flex in zip ( uri , flexible ): if isinstance ( loc_flex , FlexibleLocation ): if not loc_flex . is_valid ( loc_req ): break flexibles_received . append ( loc_req ) else : if loc_req != loc_flex : break else : # Correct case endpoint = self . uri2endpoint . get ( flexible ) return ( tuple ( flexibles_received ), endpoint ) # Could not find it return ((), None )","title":"validate()"},{"location":"api/bamboo/test/","text":"test WSGIServerForm dataclass Dataclass to register a server form. This dataclass would be used to register as a form into test classes such as WSGITestExecutor. Parameters: Name Type Description Default host Hostname of the server. required port Port of the server. required app WSGIApp object with implemented Endpoints. required path_log Path log of the server will be written. required WSGITestExecutor Utility class that can execute server applications at child processes. This class can be used in test scripts for holding several server forms and running the application based on the forms at the child processes. Also this object has feature of context manager and developers may use it to kill the processes safely. __init__ ( self , * forms ) special Parameters: Name Type Description Default *forms WSGIServerForm Dataclass describing information of the server application. () Source code in bamboo/test.py def __init__ ( self , * forms : WSGIServerForm ) -> None : \"\"\" Args: *forms: Dataclass describing information of the server application. \"\"\" self . _forms : t . List [ WSGIServerForm ] = [] self . _children : t . List [ multiprocessing . Process ] = [] self . add_forms ( * forms ) add_forms ( self , * forms ) Add forms with information of server applications. Parameters: Name Type Description Default *foms Dataclass describing information of the server application required Source code in bamboo/test.py def add_forms ( self , * forms : WSGIServerForm ) -> None : \"\"\"Add forms with information of server applications. Args: *foms: Dataclass describing information of the server application \"\"\" for form in forms : self . _forms . append ( form ) close ( self , pop = True ) Kill the all child processes derived from registered forms. Parameters: Name Type Description Default pop bool If the registered forms is to be removed. True Source code in bamboo/test.py def close ( self , pop : bool = True ) -> None : \"\"\"Kill the all child processes derived from registered forms. Args: pop: If the registered forms is to be removed. \"\"\" for child in self . _children : child . terminate () child . join () child . close () if pop : self . _children . clear () debug ( app , host = 'localhost' , port = 8000 ) staticmethod Executes a server application for debug. This method is a kind of shorcut for launching a server application and can be used to debug the application. If you want to deploy an application made with Bamboo, consider to use another WSGI server application for production. Parameters: Name Type Description Default app WSGIApp WSGIApp object with implemented Endpoints. required host str Hostname of the server. 'localhost' port int Port of the server. 8000 Source code in bamboo/test.py @staticmethod def debug ( app : WSGIApp , host : str = \"localhost\" , port : int = 8000 , ) -> None : \"\"\"Executes a server application for debug. This method is a kind of shorcut for launching a server application and can be used to debug the application. If you want to deploy an application made with Bamboo, consider to use another WSGI server application for production. Args: app: WSGIApp object with implemented Endpoints. host: Hostname of the server. port: Port of the server. \"\"\" server = wsgiref . simple_server . make_server ( host , port , app ) try : print ( f \"Hosting on { host } : { port } ...\" ) print ( insert_colorcode ( \"WARNING: This is debug mode. \" \"Do not use it in your production deployment.\" , ColorCode . RED )) server . serve_forever () except KeyboardInterrupt : server . server_close () print () exec ( self , func , args = (), waiting = 0.1 ) Executes a simple client-server test. Parameters: Name Type Description Default func t.Callable[[t.Tuple[t.Any, ...]], None] Function executed after all the server applications start. required args t.Tuple[t.Any, ...] Arguments of the func. () waiting float Waiting time after running the applications. 0.1 Source code in bamboo/test.py def exec ( self , func : t . Callable [[ t . Tuple [ t . Any , ... ]], None ], args : t . Tuple [ t . Any , ... ] = (), waiting : float = 0.1 , ) -> None : \"\"\"Executes a simple client-server test. Args: func: Function executed after all the server applications start. args: Arguments of the func. waiting: Waiting time after running the applications. \"\"\" with self . start_serve ( waiting = waiting ): func ( * args ) start_serve ( self , waiting = 0.05 ) Run registered server applications at child processes. This object has feature of context manager and the method returns the object itself. So developer can use the with sentence and in it, can define logic of clients. waiting: Waiting time after running the processes. Returns: Type Description WSGITestExecutor This object itself. Examples: >>> holder = WSGITestExecutor ( form ) >>> with holder . start_serve (): ... res = http_get ( \"http://localhost:8000/image\" ) >>> print ( res . body ) Source code in bamboo/test.py def start_serve ( self , waiting : float = 0.05 ) -> WSGITestExecutor : \"\"\"Run registered server applications at child processes. This object has feature of context manager and the method returns the object itself. So developer can use the with sentence and in it, can define logic of clients. Args: waiting: Waiting time after running the processes. Returns: This object itself. Examples: ```python >>> holder = WSGITestExecutor(form) >>> with holder.start_serve(): ... res = http_get(\"http://localhost:8000/image\") >>> print(res.body) ``` \"\"\" for form in self . _forms : child = multiprocessing . Process ( target = serve_at , args = ( form ,)) child . start () self . _children . append ( child ) time . sleep ( waiting ) return self serve_at ( form ) Subroutine for server application called at a child process. Parameters: Name Type Description Default form WSGIServerForm Dataclass describing information of the server application. required Source code in bamboo/test.py def serve_at ( form : WSGIServerForm ) -> None : \"\"\"Subroutine for server application called at a child process. Args: form: Dataclass describing information of the server application. \"\"\" server = wsgiref . simple_server . make_server ( form . host , form . port , form . app ) f_log = open ( form . path_log , \"wt\" ) sys . stdout = f_log sys . stderr = f_log def server_close ( signalnum , frame ): print () f_log . flush () f_log . close () sys . exit () signal . signal ( signal . SIGTERM , server_close ) signal . signal ( signal . SIGINT , server_close ) server . serve_forever ()","title":"test"},{"location":"api/bamboo/test/#test","text":"","title":"test"},{"location":"api/bamboo/test/#bamboo.test.WSGIServerForm","text":"Dataclass to register a server form. This dataclass would be used to register as a form into test classes such as WSGITestExecutor. Parameters: Name Type Description Default host Hostname of the server. required port Port of the server. required app WSGIApp object with implemented Endpoints. required path_log Path log of the server will be written. required","title":"WSGIServerForm"},{"location":"api/bamboo/test/#bamboo.test.WSGITestExecutor","text":"Utility class that can execute server applications at child processes. This class can be used in test scripts for holding several server forms and running the application based on the forms at the child processes. Also this object has feature of context manager and developers may use it to kill the processes safely.","title":"WSGITestExecutor"},{"location":"api/bamboo/test/#bamboo.test.WSGITestExecutor.__init__","text":"Parameters: Name Type Description Default *forms WSGIServerForm Dataclass describing information of the server application. () Source code in bamboo/test.py def __init__ ( self , * forms : WSGIServerForm ) -> None : \"\"\" Args: *forms: Dataclass describing information of the server application. \"\"\" self . _forms : t . List [ WSGIServerForm ] = [] self . _children : t . List [ multiprocessing . Process ] = [] self . add_forms ( * forms )","title":"__init__()"},{"location":"api/bamboo/test/#bamboo.test.WSGITestExecutor.add_forms","text":"Add forms with information of server applications. Parameters: Name Type Description Default *foms Dataclass describing information of the server application required Source code in bamboo/test.py def add_forms ( self , * forms : WSGIServerForm ) -> None : \"\"\"Add forms with information of server applications. Args: *foms: Dataclass describing information of the server application \"\"\" for form in forms : self . _forms . append ( form )","title":"add_forms()"},{"location":"api/bamboo/test/#bamboo.test.WSGITestExecutor.close","text":"Kill the all child processes derived from registered forms. Parameters: Name Type Description Default pop bool If the registered forms is to be removed. True Source code in bamboo/test.py def close ( self , pop : bool = True ) -> None : \"\"\"Kill the all child processes derived from registered forms. Args: pop: If the registered forms is to be removed. \"\"\" for child in self . _children : child . terminate () child . join () child . close () if pop : self . _children . clear ()","title":"close()"},{"location":"api/bamboo/test/#bamboo.test.WSGITestExecutor.debug","text":"Executes a server application for debug. This method is a kind of shorcut for launching a server application and can be used to debug the application. If you want to deploy an application made with Bamboo, consider to use another WSGI server application for production. Parameters: Name Type Description Default app WSGIApp WSGIApp object with implemented Endpoints. required host str Hostname of the server. 'localhost' port int Port of the server. 8000 Source code in bamboo/test.py @staticmethod def debug ( app : WSGIApp , host : str = \"localhost\" , port : int = 8000 , ) -> None : \"\"\"Executes a server application for debug. This method is a kind of shorcut for launching a server application and can be used to debug the application. If you want to deploy an application made with Bamboo, consider to use another WSGI server application for production. Args: app: WSGIApp object with implemented Endpoints. host: Hostname of the server. port: Port of the server. \"\"\" server = wsgiref . simple_server . make_server ( host , port , app ) try : print ( f \"Hosting on { host } : { port } ...\" ) print ( insert_colorcode ( \"WARNING: This is debug mode. \" \"Do not use it in your production deployment.\" , ColorCode . RED )) server . serve_forever () except KeyboardInterrupt : server . server_close () print ()","title":"debug()"},{"location":"api/bamboo/test/#bamboo.test.WSGITestExecutor.exec","text":"Executes a simple client-server test. Parameters: Name Type Description Default func t.Callable[[t.Tuple[t.Any, ...]], None] Function executed after all the server applications start. required args t.Tuple[t.Any, ...] Arguments of the func. () waiting float Waiting time after running the applications. 0.1 Source code in bamboo/test.py def exec ( self , func : t . Callable [[ t . Tuple [ t . Any , ... ]], None ], args : t . Tuple [ t . Any , ... ] = (), waiting : float = 0.1 , ) -> None : \"\"\"Executes a simple client-server test. Args: func: Function executed after all the server applications start. args: Arguments of the func. waiting: Waiting time after running the applications. \"\"\" with self . start_serve ( waiting = waiting ): func ( * args )","title":"exec()"},{"location":"api/bamboo/test/#bamboo.test.WSGITestExecutor.start_serve","text":"Run registered server applications at child processes. This object has feature of context manager and the method returns the object itself. So developer can use the with sentence and in it, can define logic of clients. waiting: Waiting time after running the processes. Returns: Type Description WSGITestExecutor This object itself. Examples: >>> holder = WSGITestExecutor ( form ) >>> with holder . start_serve (): ... res = http_get ( \"http://localhost:8000/image\" ) >>> print ( res . body ) Source code in bamboo/test.py def start_serve ( self , waiting : float = 0.05 ) -> WSGITestExecutor : \"\"\"Run registered server applications at child processes. This object has feature of context manager and the method returns the object itself. So developer can use the with sentence and in it, can define logic of clients. Args: waiting: Waiting time after running the processes. Returns: This object itself. Examples: ```python >>> holder = WSGITestExecutor(form) >>> with holder.start_serve(): ... res = http_get(\"http://localhost:8000/image\") >>> print(res.body) ``` \"\"\" for form in self . _forms : child = multiprocessing . Process ( target = serve_at , args = ( form ,)) child . start () self . _children . append ( child ) time . sleep ( waiting ) return self","title":"start_serve()"},{"location":"api/bamboo/test/#bamboo.test.serve_at","text":"Subroutine for server application called at a child process. Parameters: Name Type Description Default form WSGIServerForm Dataclass describing information of the server application. required Source code in bamboo/test.py def serve_at ( form : WSGIServerForm ) -> None : \"\"\"Subroutine for server application called at a child process. Args: form: Dataclass describing information of the server application. \"\"\" server = wsgiref . simple_server . make_server ( form . host , form . port , form . app ) f_log = open ( form . path_log , \"wt\" ) sys . stdout = f_log sys . stderr = f_log def server_close ( signalnum , frame ): print () f_log . flush () f_log . close () sys . exit () signal . signal ( signal . SIGTERM , server_close ) signal . signal ( signal . SIGINT , server_close ) server . serve_forever ()","title":"serve_at()"},{"location":"api/bamboo_request/http/","text":"bamboo.request.http connect ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, use_proxy=False, proxy_headers= {} ) Request with the CONNECT method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def connect ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the CONNECT method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . CONNECT , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , ) delete ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, use_proxy=False, proxy_headers= {} ) Request with the DELETE method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def delete ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the DELETE method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . DELETE , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , ) get ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, use_proxy=False, proxy_headers= {} ) Request with the GET method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def get ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the GET method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . GET , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , ) head ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, use_proxy=False, proxy_headers= {} ) Request with the HEAD method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def head ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the HEAD method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . HEAD , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , ) options ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, use_proxy=False, proxy_headers= {} ) Request with the OPTIONS method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def options ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the OPTIONS method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . OPTIONS , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , ) patch ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, use_proxy=False, proxy_headers= {} ) Request with the PATCH method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def patch ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the PATCH method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . PATCH , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , ) post ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, use_proxy=False, proxy_headers= {} ) Request with the POST method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def post ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the POST method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . POST , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , ) put ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, use_proxy=False, proxy_headers= {} ) Request with the PUT method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def put ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the PUT method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . PUT , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , ) trace ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, use_proxy=False, proxy_headers= {} ) Request with the TRACE method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def trace ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the TRACE method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . TRACE , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"bamboo.request.http"},{"location":"api/bamboo_request/http/#bamboorequesthttp","text":"","title":"bamboo.request.http"},{"location":"api/bamboo_request/http/#bamboo.request.http.connect","text":"Request with the CONNECT method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def connect ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the CONNECT method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . CONNECT , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"connect()"},{"location":"api/bamboo_request/http/#bamboo.request.http.delete","text":"Request with the DELETE method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def delete ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the DELETE method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . DELETE , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"delete()"},{"location":"api/bamboo_request/http/#bamboo.request.http.get","text":"Request with the GET method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def get ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the GET method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . GET , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"get()"},{"location":"api/bamboo_request/http/#bamboo.request.http.head","text":"Request with the HEAD method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def head ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the HEAD method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . HEAD , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"head()"},{"location":"api/bamboo_request/http/#bamboo.request.http.options","text":"Request with the OPTIONS method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def options ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the OPTIONS method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . OPTIONS , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"options()"},{"location":"api/bamboo_request/http/#bamboo.request.http.patch","text":"Request with the PATCH method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def patch ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the PATCH method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . PATCH , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"patch()"},{"location":"api/bamboo_request/http/#bamboo.request.http.post","text":"Request with the POST method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def post ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the POST method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . POST , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"post()"},{"location":"api/bamboo_request/http/#bamboo.request.http.put","text":"Request with the PUT method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def put ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the PUT method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . PUT , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"put()"},{"location":"api/bamboo_request/http/#bamboo.request.http.trace","text":"Request with the TRACE method on HTTP. Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/http.py def trace ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the TRACE method on HTTP. Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . TRACE , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"trace()"},{"location":"api/bamboo_request/https/","text":"bamboo.request.https connect ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, context=None, use_proxy=False, proxy_headers= {} ) Request with the CONNECT method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def connect ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the CONNECT method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . CONNECT , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , ) delete ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, context=None, use_proxy=False, proxy_headers= {} ) Request with the DELETE method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def delete ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the DELETE method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . DELETE , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , ) get ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, context=None, use_proxy=False, proxy_headers= {} ) Request with the GET method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def get ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the GET method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . GET , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , ) head ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, context=None, use_proxy=False, proxy_headers= {} ) Request with the HEAD method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def head ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the HEAD method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . HEAD , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , ) options ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, context=None, use_proxy=False, proxy_headers= {} ) Request with the OPTIONS method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def options ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the OPTIONS method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . OPTIONS , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , ) patch ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, context=None, use_proxy=False, proxy_headers= {} ) Request with the PATCH method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def patch ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the PATCH method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . PATCH , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , ) post ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, context=None, use_proxy=False, proxy_headers= {} ) Request with the POST method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def post ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the POST method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . POST , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , ) put ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, context=None, use_proxy=False, proxy_headers= {} ) Request with the PUT method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def put ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the PUT method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . PUT , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , ) trace ( uri , headers = {}, body = None , json = None , query = {}, timeout = None , blocksize = 8192 , datacls =< class ' bamboo . api . base . BinaryApiData '>, context=None, use_proxy=False, proxy_headers= {} ) Request with the TRACE method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def trace ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the TRACE method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . TRACE , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"bamboo.request.https"},{"location":"api/bamboo_request/https/#bamboorequesthttps","text":"","title":"bamboo.request.https"},{"location":"api/bamboo_request/https/#bamboo.request.https.connect","text":"Request with the CONNECT method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def connect ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the CONNECT method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . CONNECT , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"connect()"},{"location":"api/bamboo_request/https/#bamboo.request.https.delete","text":"Request with the DELETE method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def delete ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the DELETE method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . DELETE , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"delete()"},{"location":"api/bamboo_request/https/#bamboo.request.https.get","text":"Request with the GET method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def get ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the GET method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . GET , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"get()"},{"location":"api/bamboo_request/https/#bamboo.request.https.head","text":"Request with the HEAD method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def head ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the HEAD method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . HEAD , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"head()"},{"location":"api/bamboo_request/https/#bamboo.request.https.options","text":"Request with the OPTIONS method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def options ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the OPTIONS method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . OPTIONS , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"options()"},{"location":"api/bamboo_request/https/#bamboo.request.https.patch","text":"Request with the PATCH method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def patch ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the PATCH method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . PATCH , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"patch()"},{"location":"api/bamboo_request/https/#bamboo.request.https.post","text":"Request with the POST method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def post ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the POST method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . POST , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"post()"},{"location":"api/bamboo_request/https/#bamboo.request.https.put","text":"Request with the PUT method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def put ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the PUT method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . PUT , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"put()"},{"location":"api/bamboo_request/https/#bamboo.request.https.trace","text":"Request with the TRACE method on HTTPS. Note Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Parameters: Name Type Description Default uri str URI to be requested. required headers t.Dict[str, str] Request headers. {} body t.Optional[bytes] Request body of bytes. None json t.Union[t.Dict[str, t.Any], JsonApiData] Request body of JSON. None query t.Dict[str, t.List[str]] Query parameters to be attached to the URI. {} timeout t.Optional[float] Seconds waiting for the connection. None blocksize int Block size of sending data. 8192 datacls t.Type[ResponseData_t] ApiData or its subclass to be attached from the response body. <class 'bamboo.api.base.BinaryApiData'> context t.Optional[ssl.SSLContext] SSLContext of your communication. None use_proxy t.Union[bool, t.Tuple[str, int]] Address of a proxy server or whether the connection uses a proxy based on the environment variables. False proxy_headers t.Dict[str, str] Headers to be used on the request to the proxy. {} Returns: Type Description Response[ResponseData_t] Response object generated with the response. Source code in bamboo/request/https.py def trace ( uri : str , headers : t . Dict [ str , str ] = {}, body : t . Optional [ bytes ] = None , json : t . Union [ t . Dict [ str , t . Any ], JsonApiData ] = None , query : t . Dict [ str , t . List [ str ]] = {}, timeout : t . Optional [ float ] = None , blocksize : int = 8192 , datacls : t . Type [ ResponseData_t ] = BinaryApiData , context : t . Optional [ ssl . SSLContext ] = None , use_proxy : t . Union [ bool , t . Tuple [ str , int ]] = False , proxy_headers : t . Dict [ str , str ] = {}, ) -> Response [ ResponseData_t ]: \"\"\"Request with the TRACE method on HTTPS. Note: Sometimes your specified arguments may cause security problems in communications with the function. It is strongly recommended to reference Python ssl module security considerations documents. Link: https://docs.python.org/3/library/ssl.html#ssl-security Args: uri: URI to be requested. headers: Request headers. body: Request body of bytes. json: Request body of JSON. query: Query parameters to be attached to the URI. timeout: Seconds waiting for the connection. blocksize: Block size of sending data. datacls: `ApiData` or its subclass to be attached from the response body. context: SSLContext of your communication. use_proxy: Address of a proxy server or whether the connection uses a proxy based on the environment variables. proxy_headers: Headers to be used on the request to the proxy. Returns: Response object generated with the response. \"\"\" return request ( uri , HTTPMethods . TRACE , headers = headers , body = body , json = json , query = query , timeout = timeout , blocksize = blocksize , datacls = datacls , context = context , use_proxy = use_proxy , proxy_headers = proxy_headers , )","title":"trace()"},{"location":"api/bamboo_request/pkg/","text":"bamboo.request Response Response returned by request functions of http or https modules. Examples: from bamboo.request import http with http . get ( \"http://localhost:8000/hello\" ) as res : headers = res . headers if res . ok : body = res . body print ( body ) else : print ( f \"Error occured. Response status: { res . status } \" ) # The session will be automatically closed by leaving the block. content_length : t . Optional [ int ] property readonly Content length of the response if existing, None otherwise. fileno : int property readonly File number of the socket. headers : http . client . HTTPMessage property readonly All response headers. is_closed : bool property readonly If the session is closed or not. ok : bool property readonly If request succeeded or not. status : int property readonly Response status. uri : str property readonly Requested URI. version : int property readonly HTTP version of the session. __init__ ( self , conn , res , uri , datacls =< class ' bamboo . api . base . BinaryApiData '>) special Parameters: Name Type Description Default conn http.client.HTTPConnection connection object of a session. required res http.client.HTTPResponse HTTPResponse of a request. required uri str Requested URI. required datacls t.Type[ResponseData_t] ApiData class to attach raw response body. <class 'bamboo.api.base.BinaryApiData'> Source code in bamboo/request/response.py def __init__ ( self , conn : http . client . HTTPConnection , res : http . client . HTTPResponse , uri : str , datacls : t . Type [ ResponseData_t ] = BinaryApiData , ) -> None : \"\"\" Args: conn: connection object of a session. res: HTTPResponse of a request. uri: Requested URI. datacls: ApiData class to attach raw response body. \"\"\" self . _conn = conn self . _res = res self . _uri = uri self . _datacls = datacls self . _is_read = False attach ( self , datacls = None ) Generate new object of specified ApiData from response body. Parameters: Name Type Description Default datacls t.Optional[t.Type[ResponseData_t]] ApiData class or its subclass. None Returns: Type Description ResponseData_t ResponseData_t: Generated object. Source code in bamboo/request/response.py def attach ( self , datacls : t . Optional [ t . Type [ ResponseData_t ]] = None , ) -> ResponseData_t : \"\"\"Generate new object of specified ApiData from response body. Args: datacls: ApiData class or its subclass. Returns: ResponseData_t: Generated object. \"\"\" content_type_raw = self . get_header ( \"Content-Type\" ) if content_type_raw : content_type = ContentType . parse ( content_type_raw ) if datacls is None : if content_type_raw is None : content_type = self . _datacls . __content_type__ return self . _datacls . __validate__ ( self . body , content_type ) else : if content_type_raw is None : content_type = datacls . __content_type__ return datacls . __validate__ ( self . body , content_type ) close ( self ) Close the session. Source code in bamboo/request/response.py def close ( self ) -> None : \"\"\"Close the session. \"\"\" self . _conn . close () get_header ( self , name ) Retrive header value from response headers. Parameters: Name Type Description Default name str Header name. required Returns: Type Description t.Optional[str] Value of header if existing, None otherwise. Source code in bamboo/request/response.py def get_header ( self , name : str ) -> t . Optional [ str ]: \"\"\"Retrive header value from response headers. Args: name: Header name. Returns: Value of header if existing, None otherwise. \"\"\" return self . _res . getheader ( name ) read ( self , amt = None ) Reads and returns the response body. Parameters: Name Type Description Default amt t.Optional[int] Amount of the binary, all of it if None. None Returns: Type Description bytes Results of reading. Its length may be less than amt . Source code in bamboo/request/response.py def read ( self , amt : t . Optional [ int ] = None ) -> bytes : \"\"\"Reads and returns the response body. Args: amt: Amount of the binary, all of it if None. Returns: Results of reading. Its length may be less than `amt`. \"\"\" if not self . _is_read : self . _is_read = True return self . _res . read ( amt ) ResponseBodyAlreadyReadError Response body has already been read and data consistensy would be broken.","title":"bamboo.request"},{"location":"api/bamboo_request/pkg/#bamboorequest","text":"","title":"bamboo.request"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response","text":"Response returned by request functions of http or https modules. Examples: from bamboo.request import http with http . get ( \"http://localhost:8000/hello\" ) as res : headers = res . headers if res . ok : body = res . body print ( body ) else : print ( f \"Error occured. Response status: { res . status } \" ) # The session will be automatically closed by leaving the block.","title":"Response"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response.content_length","text":"Content length of the response if existing, None otherwise.","title":"content_length"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response.fileno","text":"File number of the socket.","title":"fileno"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response.headers","text":"All response headers.","title":"headers"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response.is_closed","text":"If the session is closed or not.","title":"is_closed"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response.ok","text":"If request succeeded or not.","title":"ok"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response.status","text":"Response status.","title":"status"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response.uri","text":"Requested URI.","title":"uri"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response.version","text":"HTTP version of the session.","title":"version"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response.__init__","text":"Parameters: Name Type Description Default conn http.client.HTTPConnection connection object of a session. required res http.client.HTTPResponse HTTPResponse of a request. required uri str Requested URI. required datacls t.Type[ResponseData_t] ApiData class to attach raw response body. <class 'bamboo.api.base.BinaryApiData'> Source code in bamboo/request/response.py def __init__ ( self , conn : http . client . HTTPConnection , res : http . client . HTTPResponse , uri : str , datacls : t . Type [ ResponseData_t ] = BinaryApiData , ) -> None : \"\"\" Args: conn: connection object of a session. res: HTTPResponse of a request. uri: Requested URI. datacls: ApiData class to attach raw response body. \"\"\" self . _conn = conn self . _res = res self . _uri = uri self . _datacls = datacls self . _is_read = False","title":"__init__()"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response.attach","text":"Generate new object of specified ApiData from response body. Parameters: Name Type Description Default datacls t.Optional[t.Type[ResponseData_t]] ApiData class or its subclass. None Returns: Type Description ResponseData_t ResponseData_t: Generated object. Source code in bamboo/request/response.py def attach ( self , datacls : t . Optional [ t . Type [ ResponseData_t ]] = None , ) -> ResponseData_t : \"\"\"Generate new object of specified ApiData from response body. Args: datacls: ApiData class or its subclass. Returns: ResponseData_t: Generated object. \"\"\" content_type_raw = self . get_header ( \"Content-Type\" ) if content_type_raw : content_type = ContentType . parse ( content_type_raw ) if datacls is None : if content_type_raw is None : content_type = self . _datacls . __content_type__ return self . _datacls . __validate__ ( self . body , content_type ) else : if content_type_raw is None : content_type = datacls . __content_type__ return datacls . __validate__ ( self . body , content_type )","title":"attach()"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response.close","text":"Close the session. Source code in bamboo/request/response.py def close ( self ) -> None : \"\"\"Close the session. \"\"\" self . _conn . close ()","title":"close()"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response.get_header","text":"Retrive header value from response headers. Parameters: Name Type Description Default name str Header name. required Returns: Type Description t.Optional[str] Value of header if existing, None otherwise. Source code in bamboo/request/response.py def get_header ( self , name : str ) -> t . Optional [ str ]: \"\"\"Retrive header value from response headers. Args: name: Header name. Returns: Value of header if existing, None otherwise. \"\"\" return self . _res . getheader ( name )","title":"get_header()"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.Response.read","text":"Reads and returns the response body. Parameters: Name Type Description Default amt t.Optional[int] Amount of the binary, all of it if None. None Returns: Type Description bytes Results of reading. Its length may be less than amt . Source code in bamboo/request/response.py def read ( self , amt : t . Optional [ int ] = None ) -> bytes : \"\"\"Reads and returns the response body. Args: amt: Amount of the binary, all of it if None. Returns: Results of reading. Its length may be less than `amt`. \"\"\" if not self . _is_read : self . _is_read = True return self . _res . read ( amt )","title":"read()"},{"location":"api/bamboo_request/pkg/#bamboo.request.response.ResponseBodyAlreadyReadError","text":"Response body has already been read and data consistensy would be broken.","title":"ResponseBodyAlreadyReadError"},{"location":"api/bamboo_sticky/http/","text":"bamboo.sticky.http CacheControlInfo dataclass CacheControlInfo(public: bool = False, private: bool = False, no_cache: bool = False, no_store: bool = False, max_age: Union[int, NoneType] = None, s_maxage: Union[int, NoneType] = None, max_stale: Union[int, NoneType] = None, min_fresh: Union[int, NoneType] = None, stale_while_revalidate: Union[int, NoneType] = None, stale_if_error: Union[int, NoneType] = None, must_revalidate: bool = False, proxy_revalidate: bool = False, immutable: bool = False, no_transform: bool = False, only_if_cached: bool = False) ClientInfo dataclass ClientInfo(ip: Union[ipaddress.IPv4Address, ipaddress.IPv6Address], port: Union[int, NoneType] = None) CookieInfo dataclass CookieInfo(cookie_name: str, expires: Union[str, NoneType] = None, max_age: Union[int, NoneType] = None, domain: Union[str, NoneType] = None, path: Union[str, NoneType] = None, secure: bool = True, http_only: bool = True, samesite: Union[str, NoneType] = None) DataFormatInfo dataclass dataclass with information of data format at callbacks on Endpoint . Attributes: Name Type Description input Optional[Type[ApiData]] Input data format. output Optional[Type[ApiData]] Output data format. is_validate bool If input data is to be validate. err_validate ErrInfo Error information sent when validation failes. MultipleAuthSchemeError Raised if several authentication schemes of the 'Authorization' header are detected. PreFlightInfo dataclass PreFlightInfo(allow_methods: Tuple[str], allow_origins: Tuple[str] = (), allow_headers: Tuple[str] = (), expose_headers: Tuple[str] = (), max_age: Union[int, NoneType] = None, allow_credentials: bool = False, err_not_allowed_origin: bamboo.error.ErrInfo = DefualtCORSOriginNotAllowedErrInfo(), err_not_allowed_method: bamboo.error.ErrInfo = DefualtCORSOriginNotAllowedErrInfo(), add_arg: bool = True) RequiredHeaderInfo dataclass dataclass with information of header which should be included in response headers. Attributes: Name Type Description header str Name of header. err Optional[bamboo.error.ErrInfo] Error information sent when the header is not included. add_arg bool Whether the header is given as a callback's argument. RequiredQueryInfo dataclass RequiredQueryInfo(query: str, err_empty: Union[bamboo.error.ErrInfo, NoneType], err_not_unique: Union[bamboo.error.ErrInfo, NoneType], mapf: Union[Callable[[Union[List[str], str, NoneType]], Any], NoneType], add_arg: bool) SimpleAccessControlInfo dataclass SimpleAccessControlInfo(origins: Tuple[str] = (), allow_credentials: bool = False, err_not_allowed: bamboo.error.ErrInfo = DefualtCORSOriginNotAllowedErrInfo(), add_arg: bool = True) basic_auth ( err = DefaultAuthHeaderNotFoundErrInfo ()) Set callback up to require Authorization header in Basic authentication. Parameters: Name Type Description Default err ErrInfo Error sent when Authorization header is not found, received scheme doesn't match, or extracting user ID and password from credentials failes. DefaultAuthHeaderNotFoundErrInfo() Returns: Type Description Callable[[Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]], NoneType], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]], Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]]], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]] Decorator to make callback to be set up to require the Authorization header. Examples: class MockEndpoint ( WSGIEndpoint ): @basic_auth () def do_GET ( self , user_id : str , password : str ) -> None : # It is guaranteed that request headers include the # `Authorization` header at this point, and user_id and # password are the ones extracted from the header. # Authenticate with any function working on your system. authenticate ( user_id , password ) # Do something... Source code in bamboo/sticky/http.py def basic_auth ( err : ErrInfo = DEFAULT_BASIC_AUTH_HEADER_NOT_FOUND_ERROR , ) -> CallbackDecorator_t : \"\"\"Set callback up to require `Authorization` header in Basic authentication. Args: err: Error sent when `Authorization` header is not found, received scheme doesn't match, or extracting user ID and password from credentials failes. Returns: Decorator to make callback to be set up to require the `Authorization` header. Examples: ```python class MockEndpoint(WSGIEndpoint): @basic_auth() def do_GET(self, user_id: str, password: str) -> None: # It is guaranteed that request headers include the # `Authorization` header at this point, and user_id and # password are the ones extracted from the header. # Authenticate with any function working on your system. authenticate(user_id, password) # Do something... ``` \"\"\" def wrapper ( callback : Callback_t ) -> Callback_t : config = AuthSchemeConfig ( callback ) return config . set ( AuthSchemes . basic , err ) return wrapper bearer_auth ( err = DefaultAuthHeaderNotFoundErrInfo ()) Set callback up to require Authorization header in token authentication for OAuth 2.0. Parameters: Name Type Description Default err ErrInfo Error sent when Authorization header is not found, or when received scheme doesn't match. DefaultAuthHeaderNotFoundErrInfo() Returns: Type Description Callable[[Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]], NoneType], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]], Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]]], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]] Decorator to make callback to be set up to require the Authorization header. Examples: class MockEndpoint ( WSGIEndpoint ): @bearer_auth () def do_GET ( self , token : str ) -> None : # It is guaranteed that request headers include the # `Authorization` header at this point, and token is # the one extracted from the header. # Authenticate with any function working on your system. authenticate ( token ) # Do something... Source code in bamboo/sticky/http.py def bearer_auth ( err : ErrInfo = DEFAULT_BEARER_AUTH_HEADER_NOT_FOUND_ERROR , ) -> CallbackDecorator_t : \"\"\"Set callback up to require `Authorization` header in token authentication for OAuth 2.0. Args: err : Error sent when `Authorization` header is not found, or when received scheme doesn't match. Returns: Decorator to make callback to be set up to require the `Authorization` header. Examples: ```python class MockEndpoint(WSGIEndpoint): @bearer_auth() def do_GET(self, token: str) -> None: # It is guaranteed that request headers include the # `Authorization` header at this point, and token is # the one extracted from the header. # Authenticate with any function working on your system. authenticate(token) # Do something... ``` \"\"\" def wrapper ( callback : Callback_t ) -> Callback_t : config = AuthSchemeConfig ( callback ) return config . set ( AuthSchemes . bearer , err ) return wrapper data_format ( input = None , output = None , is_validate = True , err_validate = DefaultDataFormatErrInfo (), err_noheader = DefaultHeaderNotFoundErrInfo ()) Set data format of input/output data as API to callback on Endpoint . This decorator can be used to add attributes of data format information to a response method, and execute validation if input raw data has expected format defined on input argument. To represent no data inputs/outputs, specify input / output arguments as None . If input is None , then any data received from client will not be read. If is_validate is False , then validation will not be executed. Parameters: Name Type Description Default input Optional[Type[bamboo.api.base.ApiData]] Input data format. None output Optional[Type[bamboo.api.base.ApiData]] Output data format. None is_validate bool If input data is to be validated. True err_validate ErrInfo Error information sent when validation failes. DefaultDataFormatErrInfo() Returns: Type Description Callable[[Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]], NoneType], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]], Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]]], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]] Decorator to add attributes of data format information to callback. Examples: class UserData ( JsonApiData ): name : str email : str age : int class MockEndpoint ( WSGIEndpoint ): @data_format ( input = UserData , output = None ) def do_GET ( self , rec_body : UserData ) -> None : user_name = rec_body . name # Do something... Source code in bamboo/sticky/http.py def data_format ( input : t . Optional [ t . Type [ ApiData ]] = None , output : t . Optional [ t . Type [ ApiData ]] = None , is_validate : bool = True , err_validate : ErrInfo = DEFUALT_INCORRECT_DATA_FORMAT_ERROR , err_noheader : ErrInfo = DEFAULT_HEADER_NOT_FOUND_ERROR , ) -> CallbackDecorator_t : \"\"\"Set data format of input/output data as API to callback on `Endpoint`. This decorator can be used to add attributes of data format information to a response method, and execute validation if input raw data has expected format defined on `input` argument. To represent no data inputs/outputs, specify `input`/`output` arguments as `None`. If `input` is `None`, then any data received from client will not be read. If `is_validate` is `False`, then validation will not be executed. Args: input: Input data format. output: Output data format. is_validate: If input data is to be validated. err_validate: Error information sent when validation failes. Returns: Decorator to add attributes of data format information to callback. Examples: ```python class UserData(JsonApiData): name: str email: str age: int class MockEndpoint(WSGIEndpoint): @data_format(input=UserData, output=None) def do_GET(self, rec_body: UserData) -> None: user_name = rec_body.name # Do something... ``` \"\"\" dataformat = DataFormatInfo ( input , output , is_validate , err_validate , err_noheader , ) def wrapper ( callback : Callback_t ) -> Callback_t : config = DataFormatConfig ( callback ) return config . set ( dataformat ) return wrapper has_header_of ( header , err = None , add_arg = True ) Set callback up to receive given header from clients. If request headers don't include specified header , then response headers and body will be made based on err and sent. Parameters: Name Type Description Default header str Name of header. required err Optional[bamboo.error.ErrInfo] Error information sent when specified header is not found. None add_arg bool Whether the header is given as a callback's argument. True Returns: Type Description Callable[[Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]], NoneType], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]], Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]]], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]] Decorator to make callback to be set up to receive the header. Examples: class BasicAuthHeaderNotFoundErrInfo ( ErrInfo ): http_status = HTTPStatus . UNAUTHORIZED def get_headers ( self ) -> List [ Tuple [ str , str ]]: return [( \"WWW-Authenticate\" , 'Basic realm=\"SECRET AREA\"' )] class MockEndpoint ( WSGIEndpoint ): @has_header_of ( \"Authorization\" , BasicAuthHeaderNotFoundErrInfo ()) def do_GET ( self ) -> None : # It is guaranteed that request headers include the # `Authorization` header at this point. header_auth = self . get_header ( \"Authorization\" ) # Do something... Source code in bamboo/sticky/http.py def has_header_of ( header : str , err : t . Optional [ ErrInfo ] = None , add_arg : bool = True , ) -> CallbackDecorator_t : \"\"\"Set callback up to receive given header from clients. If request headers don't include specified `header`, then response headers and body will be made based on `err` and sent. Args: header: Name of header. err: Error information sent when specified `header` is not found. add_arg: Whether the header is given as a callback's argument. Returns: Decorator to make callback to be set up to receive the header. Examples: ```python class BasicAuthHeaderNotFoundErrInfo(ErrInfo): http_status = HTTPStatus.UNAUTHORIZED def get_headers(self) -> List[Tuple[str, str]]: return [(\"WWW-Authenticate\", 'Basic realm=\"SECRET AREA\"')] class MockEndpoint(WSGIEndpoint): @has_header_of(\"Authorization\", BasicAuthHeaderNotFoundErrInfo()) def do_GET(self) -> None: # It is guaranteed that request headers include the # `Authorization` header at this point. header_auth = self.get_header(\"Authorization\") # Do something... ``` \"\"\" info = RequiredHeaderInfo ( header , err , add_arg ) def wrapper ( callback : Callback_t ) -> Callback_t : config = RequiredHeaderConfig ( callback ) return config . set ( info ) return wrapper has_query_of ( query , err_empty = None , err_not_unique = None , mapf = None , add_arg = True ) Set callback up to receive given query parameter from clients. Source code in bamboo/sticky/http.py def has_query_of ( query : str , err_empty : t . Optional [ ErrInfo ] = None , err_not_unique : t . Optional [ ErrInfo ] = None , mapf : t . Optional [ t . Callable [[ t . Union [ t . List [ str ], str , None ]], t . Any ]] = None , add_arg : bool = True , ) -> CallbackDecorator_t : \"\"\"Set callback up to receive given query parameter from clients. \"\"\" info = RequiredQueryInfo ( query , err_empty , err_not_unique , mapf , add_arg ) def wrapper ( callback : Callback_t ) -> Callback_t : config = RequiredQueryConfig ( callback ) return config . set ( info ) return wrapper may_occur ( * errors ) Register error classes to callback on Endpoint . Parameters: Name Type Description Default *errors Type[bamboo.error.ErrInfo] Error classes which may occuur. () Returns: Type Description Callable[[Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]], NoneType], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]], Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]]], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]] CallbackDecorator_t: Decorator to register error classes to callback. Examples: class MockErrInfo ( ErrInfo ): http_status = HTTPStatus . INTERNAL_SERVER_ERROR def get_body ( self ) -> bytes : return b \"Intrernal server error occured\" class MockEndpoint ( WSGIEndpoint ): @may_occur ( MockErrInfo ) def do_GET ( self ) -> None : # Do something... # It is possible to send error response. if is_some_flag (): self . send_err ( MockErrInfo ()) self . send_only_status () Source code in bamboo/sticky/http.py def may_occur ( * errors : t . Type [ ErrInfo ]) -> CallbackDecorator_t : \"\"\"Register error classes to callback on `Endpoint`. Args: *errors: Error classes which may occuur. Returns: CallbackDecorator_t: Decorator to register error classes to callback. Examples: ```python class MockErrInfo(ErrInfo): http_status = HTTPStatus.INTERNAL_SERVER_ERROR def get_body(self) -> bytes: return b\"Intrernal server error occured\" class MockEndpoint(WSGIEndpoint): @may_occur(MockErrInfo) def do_GET(self) -> None: # Do something... # It is possible to send error response. if is_some_flag(): self.send_err(MockErrInfo()) self.send_only_status() ``` \"\"\" def wrapper ( callback : Callback_t ) -> Callback_t : config = HTTPErrorConfig ( callback ) return config . set ( * errors ) return wrapper restricts_client ( * clients , * , err = DefaultNotApplicableIpErrInfo ()) Restrict IP addresses at callback. Parameters: Name Type Description Default *client_ips IP addresses to be allowed to request required err ErrInfo Error information sent when request from IP not included specified IPs comes. DefaultNotApplicableIpErrInfo() Returns: Type Description Callable[[Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]], NoneType], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]], Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]]], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]] Decorator to make callback to be set up to restrict IP addresses. Exceptions: Type Description ValueError Raised if invalid IP address is detected Examples: class MockEndpoint ( WSGIEndpoint ): # Restrict to allow only localhost to request # to this callback @restricts_client ( ClientInfo ( \"localhost\" )) def do_GET ( self ) -> None : # Only localhost can access to the callback. # Do something... Source code in bamboo/sticky/http.py def restricts_client ( * clients : ClientInfo , err : ErrInfo = DEFAULT_NOT_APPLICABLE_IP_ERROR ) -> CallbackDecorator_t : \"\"\"Restrict IP addresses at callback. Args: *client_ips: IP addresses to be allowed to request err: Error information sent when request from IP not included specified IPs comes. Returns: Decorator to make callback to be set up to restrict IP addresses. Raises: ValueError: Raised if invalid IP address is detected Examples: ```python class MockEndpoint(WSGIEndpoint): # Restrict to allow only localhost to request # to this callback @restricts_client(ClientInfo(\"localhost\")) def do_GET(self) -> None: # Only localhost can access to the callback. # Do something... ``` \"\"\" def wrapper ( callback : Callback_t ) -> Callback_t : config = RestrictedClientsConfig ( callback ) return config . set ( * clients , err = err ) return wrapper","title":"bamboo.sticky.http"},{"location":"api/bamboo_sticky/http/#bamboostickyhttp","text":"","title":"bamboo.sticky.http"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.CacheControlInfo","text":"CacheControlInfo(public: bool = False, private: bool = False, no_cache: bool = False, no_store: bool = False, max_age: Union[int, NoneType] = None, s_maxage: Union[int, NoneType] = None, max_stale: Union[int, NoneType] = None, min_fresh: Union[int, NoneType] = None, stale_while_revalidate: Union[int, NoneType] = None, stale_if_error: Union[int, NoneType] = None, must_revalidate: bool = False, proxy_revalidate: bool = False, immutable: bool = False, no_transform: bool = False, only_if_cached: bool = False)","title":"CacheControlInfo"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.ClientInfo","text":"ClientInfo(ip: Union[ipaddress.IPv4Address, ipaddress.IPv6Address], port: Union[int, NoneType] = None)","title":"ClientInfo"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.CookieInfo","text":"CookieInfo(cookie_name: str, expires: Union[str, NoneType] = None, max_age: Union[int, NoneType] = None, domain: Union[str, NoneType] = None, path: Union[str, NoneType] = None, secure: bool = True, http_only: bool = True, samesite: Union[str, NoneType] = None)","title":"CookieInfo"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.DataFormatInfo","text":"dataclass with information of data format at callbacks on Endpoint . Attributes: Name Type Description input Optional[Type[ApiData]] Input data format. output Optional[Type[ApiData]] Output data format. is_validate bool If input data is to be validate. err_validate ErrInfo Error information sent when validation failes.","title":"DataFormatInfo"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.MultipleAuthSchemeError","text":"Raised if several authentication schemes of the 'Authorization' header are detected.","title":"MultipleAuthSchemeError"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.PreFlightInfo","text":"PreFlightInfo(allow_methods: Tuple[str], allow_origins: Tuple[str] = (), allow_headers: Tuple[str] = (), expose_headers: Tuple[str] = (), max_age: Union[int, NoneType] = None, allow_credentials: bool = False, err_not_allowed_origin: bamboo.error.ErrInfo = DefualtCORSOriginNotAllowedErrInfo(), err_not_allowed_method: bamboo.error.ErrInfo = DefualtCORSOriginNotAllowedErrInfo(), add_arg: bool = True)","title":"PreFlightInfo"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.RequiredHeaderInfo","text":"dataclass with information of header which should be included in response headers. Attributes: Name Type Description header str Name of header. err Optional[bamboo.error.ErrInfo] Error information sent when the header is not included. add_arg bool Whether the header is given as a callback's argument.","title":"RequiredHeaderInfo"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.RequiredQueryInfo","text":"RequiredQueryInfo(query: str, err_empty: Union[bamboo.error.ErrInfo, NoneType], err_not_unique: Union[bamboo.error.ErrInfo, NoneType], mapf: Union[Callable[[Union[List[str], str, NoneType]], Any], NoneType], add_arg: bool)","title":"RequiredQueryInfo"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.SimpleAccessControlInfo","text":"SimpleAccessControlInfo(origins: Tuple[str] = (), allow_credentials: bool = False, err_not_allowed: bamboo.error.ErrInfo = DefualtCORSOriginNotAllowedErrInfo(), add_arg: bool = True)","title":"SimpleAccessControlInfo"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.basic_auth","text":"Set callback up to require Authorization header in Basic authentication. Parameters: Name Type Description Default err ErrInfo Error sent when Authorization header is not found, received scheme doesn't match, or extracting user ID and password from credentials failes. DefaultAuthHeaderNotFoundErrInfo() Returns: Type Description Callable[[Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]], NoneType], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]], Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]]], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]] Decorator to make callback to be set up to require the Authorization header. Examples: class MockEndpoint ( WSGIEndpoint ): @basic_auth () def do_GET ( self , user_id : str , password : str ) -> None : # It is guaranteed that request headers include the # `Authorization` header at this point, and user_id and # password are the ones extracted from the header. # Authenticate with any function working on your system. authenticate ( user_id , password ) # Do something... Source code in bamboo/sticky/http.py def basic_auth ( err : ErrInfo = DEFAULT_BASIC_AUTH_HEADER_NOT_FOUND_ERROR , ) -> CallbackDecorator_t : \"\"\"Set callback up to require `Authorization` header in Basic authentication. Args: err: Error sent when `Authorization` header is not found, received scheme doesn't match, or extracting user ID and password from credentials failes. Returns: Decorator to make callback to be set up to require the `Authorization` header. Examples: ```python class MockEndpoint(WSGIEndpoint): @basic_auth() def do_GET(self, user_id: str, password: str) -> None: # It is guaranteed that request headers include the # `Authorization` header at this point, and user_id and # password are the ones extracted from the header. # Authenticate with any function working on your system. authenticate(user_id, password) # Do something... ``` \"\"\" def wrapper ( callback : Callback_t ) -> Callback_t : config = AuthSchemeConfig ( callback ) return config . set ( AuthSchemes . basic , err ) return wrapper","title":"basic_auth()"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.bearer_auth","text":"Set callback up to require Authorization header in token authentication for OAuth 2.0. Parameters: Name Type Description Default err ErrInfo Error sent when Authorization header is not found, or when received scheme doesn't match. DefaultAuthHeaderNotFoundErrInfo() Returns: Type Description Callable[[Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]], NoneType], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]], Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]]], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]] Decorator to make callback to be set up to require the Authorization header. Examples: class MockEndpoint ( WSGIEndpoint ): @bearer_auth () def do_GET ( self , token : str ) -> None : # It is guaranteed that request headers include the # `Authorization` header at this point, and token is # the one extracted from the header. # Authenticate with any function working on your system. authenticate ( token ) # Do something... Source code in bamboo/sticky/http.py def bearer_auth ( err : ErrInfo = DEFAULT_BEARER_AUTH_HEADER_NOT_FOUND_ERROR , ) -> CallbackDecorator_t : \"\"\"Set callback up to require `Authorization` header in token authentication for OAuth 2.0. Args: err : Error sent when `Authorization` header is not found, or when received scheme doesn't match. Returns: Decorator to make callback to be set up to require the `Authorization` header. Examples: ```python class MockEndpoint(WSGIEndpoint): @bearer_auth() def do_GET(self, token: str) -> None: # It is guaranteed that request headers include the # `Authorization` header at this point, and token is # the one extracted from the header. # Authenticate with any function working on your system. authenticate(token) # Do something... ``` \"\"\" def wrapper ( callback : Callback_t ) -> Callback_t : config = AuthSchemeConfig ( callback ) return config . set ( AuthSchemes . bearer , err ) return wrapper","title":"bearer_auth()"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.data_format","text":"Set data format of input/output data as API to callback on Endpoint . This decorator can be used to add attributes of data format information to a response method, and execute validation if input raw data has expected format defined on input argument. To represent no data inputs/outputs, specify input / output arguments as None . If input is None , then any data received from client will not be read. If is_validate is False , then validation will not be executed. Parameters: Name Type Description Default input Optional[Type[bamboo.api.base.ApiData]] Input data format. None output Optional[Type[bamboo.api.base.ApiData]] Output data format. None is_validate bool If input data is to be validated. True err_validate ErrInfo Error information sent when validation failes. DefaultDataFormatErrInfo() Returns: Type Description Callable[[Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]], NoneType], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]], Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]]], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]] Decorator to add attributes of data format information to callback. Examples: class UserData ( JsonApiData ): name : str email : str age : int class MockEndpoint ( WSGIEndpoint ): @data_format ( input = UserData , output = None ) def do_GET ( self , rec_body : UserData ) -> None : user_name = rec_body . name # Do something... Source code in bamboo/sticky/http.py def data_format ( input : t . Optional [ t . Type [ ApiData ]] = None , output : t . Optional [ t . Type [ ApiData ]] = None , is_validate : bool = True , err_validate : ErrInfo = DEFUALT_INCORRECT_DATA_FORMAT_ERROR , err_noheader : ErrInfo = DEFAULT_HEADER_NOT_FOUND_ERROR , ) -> CallbackDecorator_t : \"\"\"Set data format of input/output data as API to callback on `Endpoint`. This decorator can be used to add attributes of data format information to a response method, and execute validation if input raw data has expected format defined on `input` argument. To represent no data inputs/outputs, specify `input`/`output` arguments as `None`. If `input` is `None`, then any data received from client will not be read. If `is_validate` is `False`, then validation will not be executed. Args: input: Input data format. output: Output data format. is_validate: If input data is to be validated. err_validate: Error information sent when validation failes. Returns: Decorator to add attributes of data format information to callback. Examples: ```python class UserData(JsonApiData): name: str email: str age: int class MockEndpoint(WSGIEndpoint): @data_format(input=UserData, output=None) def do_GET(self, rec_body: UserData) -> None: user_name = rec_body.name # Do something... ``` \"\"\" dataformat = DataFormatInfo ( input , output , is_validate , err_validate , err_noheader , ) def wrapper ( callback : Callback_t ) -> Callback_t : config = DataFormatConfig ( callback ) return config . set ( dataformat ) return wrapper","title":"data_format()"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.has_header_of","text":"Set callback up to receive given header from clients. If request headers don't include specified header , then response headers and body will be made based on err and sent. Parameters: Name Type Description Default header str Name of header. required err Optional[bamboo.error.ErrInfo] Error information sent when specified header is not found. None add_arg bool Whether the header is given as a callback's argument. True Returns: Type Description Callable[[Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]], NoneType], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]], Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]]], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]] Decorator to make callback to be set up to receive the header. Examples: class BasicAuthHeaderNotFoundErrInfo ( ErrInfo ): http_status = HTTPStatus . UNAUTHORIZED def get_headers ( self ) -> List [ Tuple [ str , str ]]: return [( \"WWW-Authenticate\" , 'Basic realm=\"SECRET AREA\"' )] class MockEndpoint ( WSGIEndpoint ): @has_header_of ( \"Authorization\" , BasicAuthHeaderNotFoundErrInfo ()) def do_GET ( self ) -> None : # It is guaranteed that request headers include the # `Authorization` header at this point. header_auth = self . get_header ( \"Authorization\" ) # Do something... Source code in bamboo/sticky/http.py def has_header_of ( header : str , err : t . Optional [ ErrInfo ] = None , add_arg : bool = True , ) -> CallbackDecorator_t : \"\"\"Set callback up to receive given header from clients. If request headers don't include specified `header`, then response headers and body will be made based on `err` and sent. Args: header: Name of header. err: Error information sent when specified `header` is not found. add_arg: Whether the header is given as a callback's argument. Returns: Decorator to make callback to be set up to receive the header. Examples: ```python class BasicAuthHeaderNotFoundErrInfo(ErrInfo): http_status = HTTPStatus.UNAUTHORIZED def get_headers(self) -> List[Tuple[str, str]]: return [(\"WWW-Authenticate\", 'Basic realm=\"SECRET AREA\"')] class MockEndpoint(WSGIEndpoint): @has_header_of(\"Authorization\", BasicAuthHeaderNotFoundErrInfo()) def do_GET(self) -> None: # It is guaranteed that request headers include the # `Authorization` header at this point. header_auth = self.get_header(\"Authorization\") # Do something... ``` \"\"\" info = RequiredHeaderInfo ( header , err , add_arg ) def wrapper ( callback : Callback_t ) -> Callback_t : config = RequiredHeaderConfig ( callback ) return config . set ( info ) return wrapper","title":"has_header_of()"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.has_query_of","text":"Set callback up to receive given query parameter from clients. Source code in bamboo/sticky/http.py def has_query_of ( query : str , err_empty : t . Optional [ ErrInfo ] = None , err_not_unique : t . Optional [ ErrInfo ] = None , mapf : t . Optional [ t . Callable [[ t . Union [ t . List [ str ], str , None ]], t . Any ]] = None , add_arg : bool = True , ) -> CallbackDecorator_t : \"\"\"Set callback up to receive given query parameter from clients. \"\"\" info = RequiredQueryInfo ( query , err_empty , err_not_unique , mapf , add_arg ) def wrapper ( callback : Callback_t ) -> Callback_t : config = RequiredQueryConfig ( callback ) return config . set ( info ) return wrapper","title":"has_query_of()"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.may_occur","text":"Register error classes to callback on Endpoint . Parameters: Name Type Description Default *errors Type[bamboo.error.ErrInfo] Error classes which may occuur. () Returns: Type Description Callable[[Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]], NoneType], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]], Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]]], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]] CallbackDecorator_t: Decorator to register error classes to callback. Examples: class MockErrInfo ( ErrInfo ): http_status = HTTPStatus . INTERNAL_SERVER_ERROR def get_body ( self ) -> bytes : return b \"Intrernal server error occured\" class MockEndpoint ( WSGIEndpoint ): @may_occur ( MockErrInfo ) def do_GET ( self ) -> None : # Do something... # It is possible to send error response. if is_some_flag (): self . send_err ( MockErrInfo ()) self . send_only_status () Source code in bamboo/sticky/http.py def may_occur ( * errors : t . Type [ ErrInfo ]) -> CallbackDecorator_t : \"\"\"Register error classes to callback on `Endpoint`. Args: *errors: Error classes which may occuur. Returns: CallbackDecorator_t: Decorator to register error classes to callback. Examples: ```python class MockErrInfo(ErrInfo): http_status = HTTPStatus.INTERNAL_SERVER_ERROR def get_body(self) -> bytes: return b\"Intrernal server error occured\" class MockEndpoint(WSGIEndpoint): @may_occur(MockErrInfo) def do_GET(self) -> None: # Do something... # It is possible to send error response. if is_some_flag(): self.send_err(MockErrInfo()) self.send_only_status() ``` \"\"\" def wrapper ( callback : Callback_t ) -> Callback_t : config = HTTPErrorConfig ( callback ) return config . set ( * errors ) return wrapper","title":"may_occur()"},{"location":"api/bamboo_sticky/http/#bamboo.sticky.http.restricts_client","text":"Restrict IP addresses at callback. Parameters: Name Type Description Default *client_ips IP addresses to be allowed to request required err ErrInfo Error information sent when request from IP not included specified IPs comes. DefaultNotApplicableIpErrInfo() Returns: Type Description Callable[[Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]], NoneType], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]], Union[Callable[[bamboo.endpoint.WSGIEndpoint, Tuple[Any, ...]]], Callable[[bamboo.endpoint.ASGIHTTPEndpoint, Tuple[Any, ...]], Awaitable[NoneType]]]] Decorator to make callback to be set up to restrict IP addresses. Exceptions: Type Description ValueError Raised if invalid IP address is detected Examples: class MockEndpoint ( WSGIEndpoint ): # Restrict to allow only localhost to request # to this callback @restricts_client ( ClientInfo ( \"localhost\" )) def do_GET ( self ) -> None : # Only localhost can access to the callback. # Do something... Source code in bamboo/sticky/http.py def restricts_client ( * clients : ClientInfo , err : ErrInfo = DEFAULT_NOT_APPLICABLE_IP_ERROR ) -> CallbackDecorator_t : \"\"\"Restrict IP addresses at callback. Args: *client_ips: IP addresses to be allowed to request err: Error information sent when request from IP not included specified IPs comes. Returns: Decorator to make callback to be set up to restrict IP addresses. Raises: ValueError: Raised if invalid IP address is detected Examples: ```python class MockEndpoint(WSGIEndpoint): # Restrict to allow only localhost to request # to this callback @restricts_client(ClientInfo(\"localhost\")) def do_GET(self) -> None: # Only localhost can access to the callback. # Do something... ``` \"\"\" def wrapper ( callback : Callback_t ) -> Callback_t : config = RestrictedClientsConfig ( callback ) return config . set ( * clients , err = err ) return wrapper","title":"restricts_client()"},{"location":"api/bamboo_sticky/pkg/","text":"bamboo.sticky","title":"bamboo.sticky"},{"location":"api/bamboo_sticky/pkg/#bamboosticky","text":"","title":"bamboo.sticky"},{"location":"api/bamboo_util/convert/","text":"bamboo.util.convert","title":"bamboo.util.convert"},{"location":"api/bamboo_util/convert/#bambooutilconvert","text":"","title":"bamboo.util.convert"},{"location":"api/bamboo_util/deco/","text":"bamboo.util.deco","title":"bamboo.util.deco"},{"location":"api/bamboo_util/deco/#bambooutildeco","text":"","title":"bamboo.util.deco"},{"location":"api/bamboo_util/pkg/","text":"bamboo.util","title":"bamboo.util"},{"location":"api/bamboo_util/pkg/#bambooutil","text":"","title":"bamboo.util"},{"location":"api/bamboo_util/string/","text":"bamboo.util.string ColorCode An enumeration.","title":"bamboo.util.string"},{"location":"api/bamboo_util/string/#bambooutilstring","text":"","title":"bamboo.util.string"},{"location":"api/bamboo_util/string/#bamboo.util.string.ColorCode","text":"An enumeration.","title":"ColorCode"},{"location":"api/bamboo_util/time/","text":"bamboo.util.time","title":"bamboo.util.time"},{"location":"api/bamboo_util/time/#bambooutiltime","text":"","title":"bamboo.util.time"},{"location":"deploy/heroku/","text":"Heroku \u3092\u5229\u7528\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30c7\u30d7\u30ed\u30a4 Heroku \u3092\u5229\u7528\u3059\u308c\u3070 Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7c21\u5358\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\uff0cBamboo \u3092\u7528\u3044\u3066\u4f5c\u6210\u3057\u305f Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Heroku \u3092\u5229\u7528\u3057\u3066\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6d41\u308c\u3067\u9806\u306b\u8aac\u660e\u3057\u307e\u3059: Heroku \u3078\u306e\u30e6\u30fc\u30b6\u30fc\u767b\u9332\uff0cHeroku CLI \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb Bamboo \u306b\u3088\u308b Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210 Heroku \u3092\u5229\u7528\u3057\u305f\u30c7\u30d7\u30ed\u30a4 \u307e\u305a\u6700\u521d\u306b \u521d\u3081\u306b Heroku \u306b\u30e6\u30fc\u30b6\u30fc\u767b\u9332\u3092\u3057\uff0cHeroku CLI \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u5177\u4f53\u7684\u306a\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f \u3053\u3061\u3089 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e \u3053\u308c\u3068\u540c\u6642\u306b\u5fc5\u8981\u306b\u306a\u308b Python \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\uff0e\u3053\u3053\u3067\u306f Python \u306f 3.8 \u7cfb\u3092\u4eee\u5b9a\u3057\u307e\u3059 (3.8 \u4ee5\u4e0a\u306a\u3089\u52d5\u4f5c\u3057\u307e\u3059) \uff0e $ pip install bamboo-core requests gunicorn Bamboo \u306b\u3088\u308b Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210 Bamboo \u3092\u7528\u3044\u305f Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5177\u4f53\u7684\u306a\u5b9f\u88c5\u65b9\u6cd5\u306f \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\u4eca\u56de\u306f\u7c21\u6613\u7684\u306a Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u88fd\u4f5c\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\uff0e \u4eca\u56de\u306f\u4f8b\u3068\u3057\u3066\uff0c\u305f\u3060 Hello, World! \u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u9001\u4fe1\u3059\u308b Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u307e\u3059\uff0e\u4ee5\u4e0b\u306b\u305d\u306e\u5b9f\u88c5\u3092\u793a\u3057\u307e\u3059 (\u3053\u3053\u3067\u306f hello.py \u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059): from bamboo import ( JsonApiData , WSGIApp , WSGIEndpoint , ) from bamboo.sticky.http import data_format app = WSGIApp () class HelloData ( JsonApiData ): text : str @app . route ( \"hello\" ) class HelloEndpoint ( WSGIEndpoint ): @data_format ( input = None , output = HelloData ) def do_GET ( self ) -> None : body = { \"text\" : \"Hello, World!\" } self . send_json ( body ) Heroku \u3092\u5229\u7528\u3057\u305f\u30c7\u30d7\u30ed\u30a4 Heroku \u3067\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u306b\u306f\u4e0b\u8a18\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u4e2d\u8eab\u3092\u6301\u3064\u30d5\u30a1\u30a4\u30eb\u304c\u5fc5\u8981\u3067\u3059\uff0e\u3053\u3053\u307e\u3067\u3067\u4f5c\u6210\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306f \u3053\u3061\u3089 \u304b\u3089\u53c2\u7167\u3067\u304d\u307e\u3059\uff0e requirements.txt -i https://pypi.org/simple bamboo-core gunicorn==20.0.4 Procfile web: gunicorn hello:app --log-file=- runtime.txt python-3.8.7 \u4e0a\u8a18\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u305f\u3089\uff0c\u65b0\u305f\u306b Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046: $ git init $ git add * $ git commit -m \"First commit.\" \u6b21\u306b Heroku \u306b\u30ed\u30b0\u30a4\u30f3\u3057\uff0c\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059: $ heroku login $ heroku create $ git remote heroku \u6700\u5f8c\u306b\u4f5c\u6210\u3057\u305f\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30b3\u30df\u30c3\u30c8\u5185\u5bb9\u3092\u30d7\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u3067\u30c7\u30d7\u30ed\u30a4\u3092\u884c\u3044\u307e\u3059 (\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d6\u30e9\u30f3\u30c1\u304c main \u306e\u5834\u5408\u306f master \u3067\u306f\u306a\u304f main \u3092\u30d7\u30c3\u30b7\u30e5\u3057\u3066\u304f\u3060\u3055\u3044): $ git push heroku master [or main] \u4e0a\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u30c7\u30d7\u30ed\u30a4\u304c\u958b\u59cb\u3057\uff0c\u6b63\u5e38\u306b\u5b8c\u4e86\u3059\u308b\u3068 remote: https://XXXXXXXXXXXXXXXXXXX.herokuapp.com/ deployed to Heroku \u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u306f\u305a\u3067\u3059\uff0e\u7279\u306b https://XXXXXXXXXXXXXXXXXXX.herokuapp.com/ \u306e\u90e8\u5206\u306f\u30c7\u30d7\u30ed\u30a4\u3055\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30db\u30b9\u30c8\u540d\u306a\u306e\u3067\u63a7\u3048\u3066\u304a\u304d\u307e\u3057\u3087\u3046\uff0e \u901a\u4fe1\u30c6\u30b9\u30c8 \u30c7\u30d7\u30ed\u30a4\u304c\u7121\u4e8b\u5b8c\u4e86\u3057\u305f\u3089\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff0e from bamboo.request import https def main ( root : str ): uri = f \" { root } /hello\" with https . get ( uri ) as res : if res . ok : body = json . loads ( res . content ) print ( f \"Response: { body [ 'text' ] } \" ) else : print ( f \"Error occured. Status code: { res . status_code } \" ) if __name__ == \"__main__\" : # TODO EDIT host name # \u63a7\u3048\u3066\u304a\u3044\u305f\u30db\u30b9\u30c8\u540d\u306b\u7de8\u96c6\u3059\u308b root = \"https://XXXXXXXXXXXXXXXXXXXX.herokuapp.com\" main ( root )","title":"Heroku \u3092\u5229\u7528\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30c7\u30d7\u30ed\u30a4"},{"location":"deploy/heroku/#heroku","text":"Heroku \u3092\u5229\u7528\u3059\u308c\u3070 Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7c21\u5358\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\uff0cBamboo \u3092\u7528\u3044\u3066\u4f5c\u6210\u3057\u305f Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092 Heroku \u3092\u5229\u7528\u3057\u3066\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6d41\u308c\u3067\u9806\u306b\u8aac\u660e\u3057\u307e\u3059: Heroku \u3078\u306e\u30e6\u30fc\u30b6\u30fc\u767b\u9332\uff0cHeroku CLI \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb Bamboo \u306b\u3088\u308b Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210 Heroku \u3092\u5229\u7528\u3057\u305f\u30c7\u30d7\u30ed\u30a4","title":"Heroku \u3092\u5229\u7528\u3057\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30c7\u30d7\u30ed\u30a4"},{"location":"deploy/heroku/#_1","text":"\u521d\u3081\u306b Heroku \u306b\u30e6\u30fc\u30b6\u30fc\u767b\u9332\u3092\u3057\uff0cHeroku CLI \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u5177\u4f53\u7684\u306a\u65b9\u6cd5\u306b\u3064\u3044\u3066\u306f \u3053\u3061\u3089 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e \u3053\u308c\u3068\u540c\u6642\u306b\u5fc5\u8981\u306b\u306a\u308b Python \u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\uff0e\u3053\u3053\u3067\u306f Python \u306f 3.8 \u7cfb\u3092\u4eee\u5b9a\u3057\u307e\u3059 (3.8 \u4ee5\u4e0a\u306a\u3089\u52d5\u4f5c\u3057\u307e\u3059) \uff0e $ pip install bamboo-core requests gunicorn","title":"\u307e\u305a\u6700\u521d\u306b"},{"location":"deploy/heroku/#bamboo-web","text":"Bamboo \u3092\u7528\u3044\u305f Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5177\u4f53\u7684\u306a\u5b9f\u88c5\u65b9\u6cd5\u306f \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\u4eca\u56de\u306f\u7c21\u6613\u7684\u306a Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u88fd\u4f5c\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046\uff0e \u4eca\u56de\u306f\u4f8b\u3068\u3057\u3066\uff0c\u305f\u3060 Hello, World! \u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u9001\u4fe1\u3059\u308b Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u307e\u3059\uff0e\u4ee5\u4e0b\u306b\u305d\u306e\u5b9f\u88c5\u3092\u793a\u3057\u307e\u3059 (\u3053\u3053\u3067\u306f hello.py \u3068\u3057\u3066\u4fdd\u5b58\u3057\u307e\u3059): from bamboo import ( JsonApiData , WSGIApp , WSGIEndpoint , ) from bamboo.sticky.http import data_format app = WSGIApp () class HelloData ( JsonApiData ): text : str @app . route ( \"hello\" ) class HelloEndpoint ( WSGIEndpoint ): @data_format ( input = None , output = HelloData ) def do_GET ( self ) -> None : body = { \"text\" : \"Hello, World!\" } self . send_json ( body )","title":"Bamboo \u306b\u3088\u308b Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210"},{"location":"deploy/heroku/#heroku_1","text":"Heroku \u3067\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u306b\u306f\u4e0b\u8a18\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u4e2d\u8eab\u3092\u6301\u3064\u30d5\u30a1\u30a4\u30eb\u304c\u5fc5\u8981\u3067\u3059\uff0e\u3053\u3053\u307e\u3067\u3067\u4f5c\u6210\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306f \u3053\u3061\u3089 \u304b\u3089\u53c2\u7167\u3067\u304d\u307e\u3059\uff0e requirements.txt -i https://pypi.org/simple bamboo-core gunicorn==20.0.4 Procfile web: gunicorn hello:app --log-file=- runtime.txt python-3.8.7 \u4e0a\u8a18\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u305f\u3089\uff0c\u65b0\u305f\u306b Git \u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046: $ git init $ git add * $ git commit -m \"First commit.\" \u6b21\u306b Heroku \u306b\u30ed\u30b0\u30a4\u30f3\u3057\uff0c\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\u3057\u307e\u3059: $ heroku login $ heroku create $ git remote heroku \u6700\u5f8c\u306b\u4f5c\u6210\u3057\u305f\u30ea\u30e2\u30fc\u30c8\u30ea\u30dd\u30b8\u30c8\u30ea\u306b\u30b3\u30df\u30c3\u30c8\u5185\u5bb9\u3092\u30d7\u30c3\u30b7\u30e5\u3059\u308b\u3053\u3068\u3067\u30c7\u30d7\u30ed\u30a4\u3092\u884c\u3044\u307e\u3059 (\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d6\u30e9\u30f3\u30c1\u304c main \u306e\u5834\u5408\u306f master \u3067\u306f\u306a\u304f main \u3092\u30d7\u30c3\u30b7\u30e5\u3057\u3066\u304f\u3060\u3055\u3044): $ git push heroku master [or main] \u4e0a\u8a18\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u30c7\u30d7\u30ed\u30a4\u304c\u958b\u59cb\u3057\uff0c\u6b63\u5e38\u306b\u5b8c\u4e86\u3059\u308b\u3068 remote: https://XXXXXXXXXXXXXXXXXXX.herokuapp.com/ deployed to Heroku \u306e\u3088\u3046\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u306f\u305a\u3067\u3059\uff0e\u7279\u306b https://XXXXXXXXXXXXXXXXXXX.herokuapp.com/ \u306e\u90e8\u5206\u306f\u30c7\u30d7\u30ed\u30a4\u3055\u308c\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30db\u30b9\u30c8\u540d\u306a\u306e\u3067\u63a7\u3048\u3066\u304a\u304d\u307e\u3057\u3087\u3046\uff0e","title":"Heroku \u3092\u5229\u7528\u3057\u305f\u30c7\u30d7\u30ed\u30a4"},{"location":"deploy/heroku/#_2","text":"\u30c7\u30d7\u30ed\u30a4\u304c\u7121\u4e8b\u5b8c\u4e86\u3057\u305f\u3089\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff0e from bamboo.request import https def main ( root : str ): uri = f \" { root } /hello\" with https . get ( uri ) as res : if res . ok : body = json . loads ( res . content ) print ( f \"Response: { body [ 'text' ] } \" ) else : print ( f \"Error occured. Status code: { res . status_code } \" ) if __name__ == \"__main__\" : # TODO EDIT host name # \u63a7\u3048\u3066\u304a\u3044\u305f\u30db\u30b9\u30c8\u540d\u306b\u7de8\u96c6\u3059\u308b root = \"https://XXXXXXXXXXXXXXXXXXXX.herokuapp.com\" main ( root )","title":"\u901a\u4fe1\u30c6\u30b9\u30c8"},{"location":"tutorials/cache/","text":"\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u95a2\u3059\u308b\u8a2d\u5b9a","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u95a2\u3059\u308b\u8a2d\u5b9a"},{"location":"tutorials/cache/#_1","text":"","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u95a2\u3059\u308b\u8a2d\u5b9a"},{"location":"tutorials/concept/","text":"bamboo \u306e\u30b3\u30f3\u30bb\u30d7\u30c8 bamboo \u306f \u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u30b5\u30fc\u30d0\u30fc\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5 \u3059\u308b\u3053\u3068\u3092\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u958b\u767a\u3055\u308c\u307e\u3057\u305f\uff0e\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\uff0c\u8907\u96d1\u306a\u30b5\u30fc\u30d0\u30fc\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u5c0e\u5165\u3055\u308c\u305f2\u3064\u306e bamboo \u306e\u30b3\u30a2\u6982\u5ff5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\uff0c\u3042\u306a\u305f\u304c\u305d\u308c\u3089\u3092\u30b3\u30fc\u30c9\u30ec\u30d9\u30eb\u3067\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u308b\u304b\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3059\uff0e \u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u306b\u3088\u308b\u30b7\u30b9\u30c6\u30e0\u306e\u8907\u96d1\u5316 \u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u306f\uff0c\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5c0f\u3055\u306a\u30b5\u30fc\u30d3\u30b9\u3092\u758e\u7d50\u5408\u3057\u305f\u96c6\u5408\u4f53\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u307e\u3059\uff0e\u305d\u308c\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\uff0c\u8907\u6570\u306e\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3066\u3066\u305d\u306e\u30b5\u30fc\u30d0\u30fc\u9593\u3067\u901a\u4fe1\u3059\u308b\u3053\u3068\u304c\u666e\u901a\u306b\u8d77\u3053\u308a\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u305d\u306e\u8907\u6570\u306e\u30b5\u30fc\u30d0\u30fc\u306b\u6563\u308a\u3070\u3081\u3089\u308c\uff0c\u5358\u4e00\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u7ba1\u7406\u304c\u96e3\u3057\u304f\u306a\u308b\u3068\u540c\u6642\u306b\u5168\u4f53\u306e\u30b7\u30b9\u30c6\u30e0\u306f\u8907\u96d1\u5316\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff0e \u3053\u306e\u3088\u3046\u306a\u8907\u96d1\u306a\u554f\u984c\u3092\u6271\u3046\u305f\u3081\u306b\u306f\u7d71\u4e00\u7684\u3067\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb\u5316\u304c\u5fc5\u8981\u3067\u3059\uff0e\u307e\u305a\uff0c\u4e0a\u8ff0\u3057\u305f\u3088\u3046\u306a\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u56f3\u3067\u8868\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u30e2\u30ce\u30ea\u30b7\u30c3\u30af\u306a\u30b7\u30b9\u30c6\u30e0\u3067\u306f\u30b5\u30fc\u30d0\u30fc\u304c1\u3064\u3067\u69cb\u6210\u3055\u308c\u308b\u306e\u306b\u5bfe\u3057\uff0c\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u306b\u3088\u308b\u30b7\u30b9\u30c6\u30e0\u3067\u306f\u8907\u6570\u306e\u30b5\u30fc\u30d0\u30fc\u304c\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u6301\u3064\u3053\u3068\u3067\u5168\u4f53\u306e\u30b7\u30b9\u30c6\u30e0\u304c\u69cb\u6210\u3055\u308c\u307e\u3059\uff0e \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u3055\u304d\u307b\u3069\u306e\u56f3\u306e\u3088\u3046\u306a\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u969b\u306b\u5b9f\u88c5\u3059\u308b\u306e\u306f\u9aa8\u304c\u6298\u308c\u308b\u4f5c\u696d\u3067\u3059\uff0e\u82e6\u52b4\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3082\uff0c\u4ed5\u69d8\u5909\u66f4\u304c\u8d77\u3053\u3063\u305f\u308a\uff0c\u30b5\u30fc\u30d3\u30b9\u306e\u62e1\u5f35\u306a\u3069\u306b\u3088\u308a\uff0c\u30b3\u30fc\u30c9\u306b\u305d\u306e\u5834\u3057\u306e\u304e\u306e\u4fee\u6b63\u304c\u52a0\u3048\u3089\u308c\uff0c\u6bb5\u3005\u7ba1\u7406\u306f\u96e3\u3057\u304f\u306a\u3063\u3066\u3044\u304f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u305d\u306e\u3088\u3046\u306a\u30ab\u30aa\u30b9\u306a\u72b6\u614b\u306b\u306a\u3089\u306a\u3044\u305f\u3081\u306b\u306f\uff0c\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb\u3092\u5c0e\u5165\u3057\uff0c\u305d\u308c\u306b\u57fa\u3065\u304d\u5b9f\u88c5\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0ebamboo \u3067\u306f\u4e0a\u56f3\u306e\u5404\u30b5\u30fc\u30d0\u30fc\u306b\u5bfe\u5fdc\u3059\u308b\u30e2\u30c7\u30eb\u3092 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u3068\u547c\u3093\u3067\u3044\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c1\u3064\u306e\u30b5\u30fc\u30d0\u30fc\u306b\u306f\u5fc5\u305a1\u3064\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308b\u3068\u3057\u307e\u3059\uff0e\u3053\u308c\u3092\u56f3\u3067\u8868\u3059\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e Note Python \u306b\u306f PEP3333 \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b WSGI \u3084 ASGI (PEP \u3067\u306f\u63d0\u8d77\u3055\u308c\u3066\u3044\u306a\u3044) \u306e\u3088\u3046\u306a Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u305f\u3081\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f Python \u306e\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068 Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u9593\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\uff0c\u591a\u304f\u306e Python \u3067\u5b9f\u88c5\u3055\u308c\u305f Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u3053\u308c\u3089\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u6e96\u62e0\u3057\u3066\u3044\u307e\u3059 (bamboo \u3082\u305d\u306e1\u3064\u3067\u3059) \uff0e\u3057\u304b\u3057\uff0c\u5b9f\u306f\u3053\u306e\u3088\u3046\u306a Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u7528\u3057\u3066\u66f8\u304b\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u5358\u4e00\u3067\u306f\u52d5\u4f5c\u3057\u307e\u305b\u3093\uff0e\u52d5\u4f5c\u3055\u305b\u308b\u305f\u3081\u306b\u306f\u540c\u4e00\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 (WSGI \u306a\u3089 WSGI\uff0cASGI \u306a\u3089 ASGI) \u306b\u6e96\u62e0\u3057\u305f\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u5225\u9014\u306b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059 (WSGI \u306e\u5834\u5408\uff0c\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3082\u5b9f\u88c5\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059) \uff0e\u3064\u307e\u308a\u4e0a\u8a18\u3067\u8aac\u660e\u3057\u305f\u300c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u300d\u3068\u306f bamboo \u306b\u304a\u3051\u308b\u30b5\u30fc\u30d0\u30fc\u3092\u30e2\u30c7\u30eb\u5316\u3059\u308b\u5358\u306a\u308b\u6982\u5ff5\u306a\u306e\u3067\u3042\u308a\uff0c\u30b9\u30bf\u30f3\u30c9\u30a2\u30ed\u30fc\u30f3\u3067\u52d5\u4f5c\u3067\u304d\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8 \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f bamboo \u306b\u304a\u3051\u308b\u3082\u30461\u3064\u306e\u30b3\u30a2\u6982\u5ff5\u306e\u4e00\u3064\u3067\u3059\uff0e \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8 \u306f\u901a\u4fe1\u306e\u7aef\u70b9\u3092\u8868\u3059\u6982\u5ff5\u3067\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u884c\u304d\u7740\u304f\u5730\u70b9\u3067\u3059\uff0e\u5b9f\u969b\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u884c\u304d\u305f\u3044\u5834\u6240\u306b\u3057\u3063\u304b\u308a\u3068\u884c\u304d\u7740\u304f\u306b\u306f\u4f4f\u6240\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\uff0e\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306e\u4e16\u754c\u3067\u306f\u3053\u308c\u3092 URI (URL) \u3068\u3044\u3046\u5f62\u5f0f\u3067\u6307\u5b9a\u3057\u307e\u3059\uff0e\u3059\u306a\u308f\u3061\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u3053\u306e URI \u30681\u5bfe1\u3067\u5bfe\u5fdc\u3057\u307e\u3059\uff0e bamboo \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7ba1\u7406\u3057\u3066\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u5185\u90e8\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u5c0e\u304f\u5f79\u5272\u3092\u3057\u307e\u3059\uff0e\u305d\u308c\u3092\u8868\u3057\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u56f3\u3067\u3059\uff0e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u5185\u90e8\u306b\u8907\u6570\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u307e\u305f\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u4f55\u3089\u304b\u306e URI \u3092\u6307\u5b9a\u3057\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u3068\uff0c\u81ea\u8eab\u306e\u6301\u3063\u3066\u3044\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u305d\u306e URI \u306b\u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u63a2\u3057\u5f53\u3066\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e bamboo \u3067\u306e\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0 \u3053\u3053\u307e\u3067\u3067 bamboo \u306b\u304a\u3051\u308b2\u3064\u306e\u30b3\u30a2\u6982\u5ff5\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\uff0e\u3053\u306e\u30b3\u30a2\u6982\u5ff5\u306b\u3088\u3063\u3066\u6700\u521d\u306b\u793a\u3057\u305f\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u3088\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u306f\uff0c\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u8868\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e Note \u5b9f\u969b\u306b\u5b9f\u88c5\u3059\u308b\u969b\u306b\u306f\u3042\u307e\u308a\u610f\u8b58\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u304c\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u81ea\u4f53\u306f\u4e0b\u56f3\u306e\u3088\u3046\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5c4a\u304f\u3068\u3044\u3046\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\u53b3\u5bc6\u306b\u306f\u30b5\u30fc\u30d0\u30fc\u4e0a\u306e\u6307\u5b9a\u3055\u308c\u305f\u30dd\u30fc\u30c8 (\u901a\u5e38\u306f HTTP \u306a\u3089 80 \u756a\uff0cHTTPS \u306a\u3089 443 \u756a) \u306b\u5c4a\u3044\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u304c\uff0cWSGI \u307e\u305f\u306f ASGI \u6e96\u62e0\u306e\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u8aad\u307f\u8fbc\u307e\u308c\uff0cbamboo \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u6e21\u3055\u308c\u307e\u3059\uff0e\u305d\u3057\u3066\uff0cbamboo \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5165\u3063\u3066\u3044\u308b URI \u3092\u898b\u3066\uff0c\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u3069\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u306e\u304b\u3092\u5224\u65ad\u3057\u307e\u3059\uff0e\u6b63\u5e38\u306a URI \u3067\u3042\u308c\u3070\uff0cbamboo \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u305d\u306e\u6307\u5b9a\u3055\u308c\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u30b5\u30fc\u30d0\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u6e21\u3055\u308c\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff0e \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9f\u88c5 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\uff0c\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u306f\u4e0a\u56f3\u306e\u3088\u3046\u306b\u8868\u3055\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\u3057\u304b\u3057\uff0c\u3053\u3053\u307e\u3067\u306f\u5358\u306a\u308b\u7406\u8ad6\u306b\u904e\u304e\u305a\uff0c\u6211\u3005\u304c\u3057\u305f\u3044\u3053\u3068\u306f\u4e0a\u56f3\u306e\u3088\u3046\u306a\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u969b\u306b\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3067\u3059\uff0e\u305d\u306e\u305f\u3081\u306b bamboo \u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u30b3\u30fc\u30c9\u30ec\u30d9\u30eb\u3067\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u624b\u6bb5\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\uff0c1\u3064\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u542b\u30801\u3064\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3067\u304d\u307e\u3059: # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210 app = WSGIApp () # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3078\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u767b\u9332 @app . route ( \"image\" ) class MockImageEndpoint ( WSGIEndpoint ): def do_GET ( self ) -> None : \"\"\"\u753b\u50cf\u306e\u53d6\u5f97\u51e6\u7406\u3092\u3059\u308b\"\"\" ... def do_DELETE ( self ) -> None : \"\"\"\u753b\u50cf\u306e\u6d88\u53bb\u51e6\u7406\u3092\u3059\u308b\"\"\" ... def do_POST ( self ) -> None : \"\"\"\u753b\u50cf\u306e\u767b\u9332\u51e6\u7406\u3092\u3059\u308b\"\"\" ... def do_PUT ( self ) -> None : \"\"\"\u753b\u50cf\u306e\u5909\u66f4\u51e6\u7406\u3092\u3059\u308b\"\"\" ... \u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u30b9\u30cb\u30da\u30c3\u30c8\u3067\u306f1\u3064\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u307f\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u5148\u7a0b\u306e\u56f3\u306e\u3088\u3046\u306b6\u3064\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7acb\u3061\u4e0a\u3052\u3066\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3057\u305f\u3044\u306e\u3067\u3042\u308c\u3070\uff0c\u305d\u306e\u5206\u3060\u3051\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3066\uff0c\u305d\u3053\u306b\u5b9a\u7fa9\u3057\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u305f\u3060\uff0c\u4e0a\u306e\u4f8b\u304b\u3089\u308f\u304b\u308b\u3088\u3046\u306b\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5\u306f\u8907\u6570\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9f\u88c5\u306b\u3088\u3063\u3066\u307b\u307c\u81ea\u52d5\u7684\u306b\u5b9f\u73fe\u3055\u308c\u307e\u3059\uff0e\u3057\u305f\u304c\u3063\u3066\uff0c\u3042\u306a\u305f\u304c\u3069\u3093\u306a\u306b\u8907\u96d1\u306a\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3057\u3088\u3046\u3068\u3082\uff0c\u305d\u308c\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9f\u88c5\u306b\u5e30\u7740\u3059\u308b\u306e\u3067\u3059\uff0e Note bamboo \u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5c0e\u5165\u306b\u3088\u3063\u3066\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u30e2\u30c7\u30eb\u5316\u3059\u308b\u3053\u3068\u3067\uff0c\u8ad6\u7406\u30ec\u30d9\u30eb\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u30b3\u30fc\u30c9\u30ec\u30d9\u30eb\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7d50\u3073\u3064\u3051\u3089\u308c\u308b\u4ed5\u7d44\u307f\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\uff0e\u3053\u308c\u306f\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u306e\u3088\u3046\u306a\u8907\u96d1\u306a\u30b7\u30b9\u30c6\u30e0\u958b\u767a\u3092\u624b\u52a9\u3051\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u304c\uff0c \u30e2\u30ce\u30ea\u30b7\u30c3\u30af \u306a\u30b7\u30b9\u30c6\u30e0\u3092\u6392\u9664\u3059\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0ebamboo \u3092\u4f7f\u7528\u3057\u3066\u30e2\u30ce\u30ea\u30b7\u30c3\u30af\u306a\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306b\u306f\uff0c1\u3064\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308c\u3070\u826f\u3044\u3060\u3051\u3067\u3059\uff0e","title":"bamboo \u306e\u30b3\u30f3\u30bb\u30d7\u30c8"},{"location":"tutorials/concept/#bamboo","text":"bamboo \u306f \u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u30b5\u30fc\u30d0\u30fc\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5 \u3059\u308b\u3053\u3068\u3092\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u958b\u767a\u3055\u308c\u307e\u3057\u305f\uff0e\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\uff0c\u8907\u96d1\u306a\u30b5\u30fc\u30d0\u30fc\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u5c0e\u5165\u3055\u308c\u305f2\u3064\u306e bamboo \u306e\u30b3\u30a2\u6982\u5ff5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\uff0c\u3042\u306a\u305f\u304c\u305d\u308c\u3089\u3092\u30b3\u30fc\u30c9\u30ec\u30d9\u30eb\u3067\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u308b\u304b\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3059\uff0e","title":"bamboo \u306e\u30b3\u30f3\u30bb\u30d7\u30c8"},{"location":"tutorials/concept/#_1","text":"\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u306f\uff0c\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5c0f\u3055\u306a\u30b5\u30fc\u30d3\u30b9\u3092\u758e\u7d50\u5408\u3057\u305f\u96c6\u5408\u4f53\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u307e\u3059\uff0e\u305d\u308c\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\uff0c\u8907\u6570\u306e\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3066\u3066\u305d\u306e\u30b5\u30fc\u30d0\u30fc\u9593\u3067\u901a\u4fe1\u3059\u308b\u3053\u3068\u304c\u666e\u901a\u306b\u8d77\u3053\u308a\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u305d\u306e\u8907\u6570\u306e\u30b5\u30fc\u30d0\u30fc\u306b\u6563\u308a\u3070\u3081\u3089\u308c\uff0c\u5358\u4e00\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u7ba1\u7406\u304c\u96e3\u3057\u304f\u306a\u308b\u3068\u540c\u6642\u306b\u5168\u4f53\u306e\u30b7\u30b9\u30c6\u30e0\u306f\u8907\u96d1\u5316\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff0e \u3053\u306e\u3088\u3046\u306a\u8907\u96d1\u306a\u554f\u984c\u3092\u6271\u3046\u305f\u3081\u306b\u306f\u7d71\u4e00\u7684\u3067\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb\u5316\u304c\u5fc5\u8981\u3067\u3059\uff0e\u307e\u305a\uff0c\u4e0a\u8ff0\u3057\u305f\u3088\u3046\u306a\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u56f3\u3067\u8868\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u30e2\u30ce\u30ea\u30b7\u30c3\u30af\u306a\u30b7\u30b9\u30c6\u30e0\u3067\u306f\u30b5\u30fc\u30d0\u30fc\u304c1\u3064\u3067\u69cb\u6210\u3055\u308c\u308b\u306e\u306b\u5bfe\u3057\uff0c\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u306b\u3088\u308b\u30b7\u30b9\u30c6\u30e0\u3067\u306f\u8907\u6570\u306e\u30b5\u30fc\u30d0\u30fc\u304c\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u6301\u3064\u3053\u3068\u3067\u5168\u4f53\u306e\u30b7\u30b9\u30c6\u30e0\u304c\u69cb\u6210\u3055\u308c\u307e\u3059\uff0e","title":"\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u306b\u3088\u308b\u30b7\u30b9\u30c6\u30e0\u306e\u8907\u96d1\u5316"},{"location":"tutorials/concept/#_2","text":"\u3055\u304d\u307b\u3069\u306e\u56f3\u306e\u3088\u3046\u306a\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u969b\u306b\u5b9f\u88c5\u3059\u308b\u306e\u306f\u9aa8\u304c\u6298\u308c\u308b\u4f5c\u696d\u3067\u3059\uff0e\u82e6\u52b4\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3082\uff0c\u4ed5\u69d8\u5909\u66f4\u304c\u8d77\u3053\u3063\u305f\u308a\uff0c\u30b5\u30fc\u30d3\u30b9\u306e\u62e1\u5f35\u306a\u3069\u306b\u3088\u308a\uff0c\u30b3\u30fc\u30c9\u306b\u305d\u306e\u5834\u3057\u306e\u304e\u306e\u4fee\u6b63\u304c\u52a0\u3048\u3089\u308c\uff0c\u6bb5\u3005\u7ba1\u7406\u306f\u96e3\u3057\u304f\u306a\u3063\u3066\u3044\u304f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u305d\u306e\u3088\u3046\u306a\u30ab\u30aa\u30b9\u306a\u72b6\u614b\u306b\u306a\u3089\u306a\u3044\u305f\u3081\u306b\u306f\uff0c\u30b7\u30f3\u30d7\u30eb\u306a\u30e2\u30c7\u30eb\u3092\u5c0e\u5165\u3057\uff0c\u305d\u308c\u306b\u57fa\u3065\u304d\u5b9f\u88c5\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0ebamboo \u3067\u306f\u4e0a\u56f3\u306e\u5404\u30b5\u30fc\u30d0\u30fc\u306b\u5bfe\u5fdc\u3059\u308b\u30e2\u30c7\u30eb\u3092 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u3068\u547c\u3093\u3067\u3044\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c1\u3064\u306e\u30b5\u30fc\u30d0\u30fc\u306b\u306f\u5fc5\u305a1\u3064\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308b\u3068\u3057\u307e\u3059\uff0e\u3053\u308c\u3092\u56f3\u3067\u8868\u3059\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e Note Python \u306b\u306f PEP3333 \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b WSGI \u3084 ASGI (PEP \u3067\u306f\u63d0\u8d77\u3055\u308c\u3066\u3044\u306a\u3044) \u306e\u3088\u3046\u306a Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u305f\u3081\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f Python \u306e\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068 Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u9593\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\uff0c\u591a\u304f\u306e Python \u3067\u5b9f\u88c5\u3055\u308c\u305f Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u3053\u308c\u3089\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u6e96\u62e0\u3057\u3066\u3044\u307e\u3059 (bamboo \u3082\u305d\u306e1\u3064\u3067\u3059) \uff0e\u3057\u304b\u3057\uff0c\u5b9f\u306f\u3053\u306e\u3088\u3046\u306a Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u7528\u3057\u3066\u66f8\u304b\u308c\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u5358\u4e00\u3067\u306f\u52d5\u4f5c\u3057\u307e\u305b\u3093\uff0e\u52d5\u4f5c\u3055\u305b\u308b\u305f\u3081\u306b\u306f\u540c\u4e00\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9 (WSGI \u306a\u3089 WSGI\uff0cASGI \u306a\u3089 ASGI) \u306b\u6e96\u62e0\u3057\u305f\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u5225\u9014\u306b\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059 (WSGI \u306e\u5834\u5408\uff0c\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3082\u5b9f\u88c5\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059) \uff0e\u3064\u307e\u308a\u4e0a\u8a18\u3067\u8aac\u660e\u3057\u305f\u300c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u300d\u3068\u306f bamboo \u306b\u304a\u3051\u308b\u30b5\u30fc\u30d0\u30fc\u3092\u30e2\u30c7\u30eb\u5316\u3059\u308b\u5358\u306a\u308b\u6982\u5ff5\u306a\u306e\u3067\u3042\u308a\uff0c\u30b9\u30bf\u30f3\u30c9\u30a2\u30ed\u30fc\u30f3\u3067\u52d5\u4f5c\u3067\u304d\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3"},{"location":"tutorials/concept/#_3","text":"\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f bamboo \u306b\u304a\u3051\u308b\u3082\u30461\u3064\u306e\u30b3\u30a2\u6982\u5ff5\u306e\u4e00\u3064\u3067\u3059\uff0e \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8 \u306f\u901a\u4fe1\u306e\u7aef\u70b9\u3092\u8868\u3059\u6982\u5ff5\u3067\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u884c\u304d\u7740\u304f\u5730\u70b9\u3067\u3059\uff0e\u5b9f\u969b\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u884c\u304d\u305f\u3044\u5834\u6240\u306b\u3057\u3063\u304b\u308a\u3068\u884c\u304d\u7740\u304f\u306b\u306f\u4f4f\u6240\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\uff0e\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306e\u4e16\u754c\u3067\u306f\u3053\u308c\u3092 URI (URL) \u3068\u3044\u3046\u5f62\u5f0f\u3067\u6307\u5b9a\u3057\u307e\u3059\uff0e\u3059\u306a\u308f\u3061\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u3053\u306e URI \u30681\u5bfe1\u3067\u5bfe\u5fdc\u3057\u307e\u3059\uff0e bamboo \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3053\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7ba1\u7406\u3057\u3066\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u5185\u90e8\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u5c0e\u304f\u5f79\u5272\u3092\u3057\u307e\u3059\uff0e\u305d\u308c\u3092\u8868\u3057\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u56f3\u3067\u3059\uff0e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u5185\u90e8\u306b\u8907\u6570\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u6301\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\u307e\u305f\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u4f55\u3089\u304b\u306e URI \u3092\u6307\u5b9a\u3057\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u3068\uff0c\u81ea\u8eab\u306e\u6301\u3063\u3066\u3044\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u305d\u306e URI \u306b\u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u63a2\u3057\u5f53\u3066\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e","title":"\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8"},{"location":"tutorials/concept/#bamboo_1","text":"\u3053\u3053\u307e\u3067\u3067 bamboo \u306b\u304a\u3051\u308b2\u3064\u306e\u30b3\u30a2\u6982\u5ff5\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\uff0e\u3053\u306e\u30b3\u30a2\u6982\u5ff5\u306b\u3088\u3063\u3066\u6700\u521d\u306b\u793a\u3057\u305f\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u3088\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u306f\uff0c\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u8868\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e Note \u5b9f\u969b\u306b\u5b9f\u88c5\u3059\u308b\u969b\u306b\u306f\u3042\u307e\u308a\u610f\u8b58\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u304c\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u81ea\u4f53\u306f\u4e0b\u56f3\u306e\u3088\u3046\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5c4a\u304f\u3068\u3044\u3046\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\u53b3\u5bc6\u306b\u306f\u30b5\u30fc\u30d0\u30fc\u4e0a\u306e\u6307\u5b9a\u3055\u308c\u305f\u30dd\u30fc\u30c8 (\u901a\u5e38\u306f HTTP \u306a\u3089 80 \u756a\uff0cHTTPS \u306a\u3089 443 \u756a) \u306b\u5c4a\u3044\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u304c\uff0cWSGI \u307e\u305f\u306f ASGI \u6e96\u62e0\u306e\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u8aad\u307f\u8fbc\u307e\u308c\uff0cbamboo \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u6e21\u3055\u308c\u307e\u3059\uff0e\u305d\u3057\u3066\uff0cbamboo \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u5165\u3063\u3066\u3044\u308b URI \u3092\u898b\u3066\uff0c\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u3069\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u306e\u304b\u3092\u5224\u65ad\u3057\u307e\u3059\uff0e\u6b63\u5e38\u306a URI \u3067\u3042\u308c\u3070\uff0cbamboo \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u305d\u306e\u6307\u5b9a\u3055\u308c\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u30b5\u30fc\u30d0\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304b\u3089\u6e21\u3055\u308c\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff0e","title":"bamboo \u3067\u306e\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0"},{"location":"tutorials/concept/#_4","text":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5c0e\u5165\u3059\u308b\u3053\u3068\u3067\uff0c\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u306f\u4e0a\u56f3\u306e\u3088\u3046\u306b\u8868\u3055\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\u3057\u304b\u3057\uff0c\u3053\u3053\u307e\u3067\u306f\u5358\u306a\u308b\u7406\u8ad6\u306b\u904e\u304e\u305a\uff0c\u6211\u3005\u304c\u3057\u305f\u3044\u3053\u3068\u306f\u4e0a\u56f3\u306e\u3088\u3046\u306a\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u969b\u306b\u69cb\u7bc9\u3059\u308b\u3053\u3068\u3067\u3059\uff0e\u305d\u306e\u305f\u3081\u306b bamboo \u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u30b3\u30fc\u30c9\u30ec\u30d9\u30eb\u3067\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u624b\u6bb5\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\uff0c1\u3064\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u542b\u30801\u3064\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3067\u304d\u307e\u3059: # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210 app = WSGIApp () # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3078\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u767b\u9332 @app . route ( \"image\" ) class MockImageEndpoint ( WSGIEndpoint ): def do_GET ( self ) -> None : \"\"\"\u753b\u50cf\u306e\u53d6\u5f97\u51e6\u7406\u3092\u3059\u308b\"\"\" ... def do_DELETE ( self ) -> None : \"\"\"\u753b\u50cf\u306e\u6d88\u53bb\u51e6\u7406\u3092\u3059\u308b\"\"\" ... def do_POST ( self ) -> None : \"\"\"\u753b\u50cf\u306e\u767b\u9332\u51e6\u7406\u3092\u3059\u308b\"\"\" ... def do_PUT ( self ) -> None : \"\"\"\u753b\u50cf\u306e\u5909\u66f4\u51e6\u7406\u3092\u3059\u308b\"\"\" ... \u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u30b9\u30cb\u30da\u30c3\u30c8\u3067\u306f1\u3064\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u307f\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u5148\u7a0b\u306e\u56f3\u306e\u3088\u3046\u306b6\u3064\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7acb\u3061\u4e0a\u3052\u3066\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3057\u305f\u3044\u306e\u3067\u3042\u308c\u3070\uff0c\u305d\u306e\u5206\u3060\u3051\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3057\u3066\uff0c\u305d\u3053\u306b\u5b9a\u7fa9\u3057\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u305f\u3060\uff0c\u4e0a\u306e\u4f8b\u304b\u3089\u308f\u304b\u308b\u3088\u3046\u306b\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5\u306f\u8907\u6570\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9f\u88c5\u306b\u3088\u3063\u3066\u307b\u307c\u81ea\u52d5\u7684\u306b\u5b9f\u73fe\u3055\u308c\u307e\u3059\uff0e\u3057\u305f\u304c\u3063\u3066\uff0c\u3042\u306a\u305f\u304c\u3069\u3093\u306a\u306b\u8907\u96d1\u306a\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3057\u3088\u3046\u3068\u3082\uff0c\u305d\u308c\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9f\u88c5\u306b\u5e30\u7740\u3059\u308b\u306e\u3067\u3059\uff0e Note bamboo \u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5c0e\u5165\u306b\u3088\u3063\u3066\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u30e2\u30c7\u30eb\u5316\u3059\u308b\u3053\u3068\u3067\uff0c\u8ad6\u7406\u30ec\u30d9\u30eb\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u30b3\u30fc\u30c9\u30ec\u30d9\u30eb\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7d50\u3073\u3064\u3051\u3089\u308c\u308b\u4ed5\u7d44\u307f\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\uff0e\u3053\u308c\u306f\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u306e\u3088\u3046\u306a\u8907\u96d1\u306a\u30b7\u30b9\u30c6\u30e0\u958b\u767a\u3092\u624b\u52a9\u3051\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u304c\uff0c \u30e2\u30ce\u30ea\u30b7\u30c3\u30af \u306a\u30b7\u30b9\u30c6\u30e0\u3092\u6392\u9664\u3059\u308b\u3082\u306e\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0ebamboo \u3092\u4f7f\u7528\u3057\u3066\u30e2\u30ce\u30ea\u30b7\u30c3\u30af\u306a\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306b\u306f\uff0c1\u3064\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308c\u3070\u826f\u3044\u3060\u3051\u3067\u3059\uff0e","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9f\u88c5"},{"location":"tutorials/cookie/","text":"Cookie \u306b\u95a2\u3059\u308b\u8a2d\u5b9a","title":"Cookie \u306b\u95a2\u3059\u308b\u8a2d\u5b9a"},{"location":"tutorials/cookie/#cookie","text":"","title":"Cookie \u306b\u95a2\u3059\u308b\u8a2d\u5b9a"},{"location":"tutorials/define_api/","text":"API \u306e\u5b9a\u7fa9 Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8a2d\u8a08\u306b\u304a\u3044\u3066 API \u306e\u5b9a\u7fa9\u306f\u6b20\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u305b\u3093\uff0e\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f Bamboo \u306e\u6a5f\u80fd\u306e\u4e00\u3064\u3067\u3042\u308b API \u306e\u5b9a\u7fa9\u306b\u3064\u3044\u3066\u8ff0\u3079\u307e\u3059\uff0e \u6982\u8981 Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u306e\u901a\u4fe1\u306b\u3088\u3063\u3066\u6210\u7acb\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\uff0e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5185\u90e8\u5b9f\u88c5\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u77e5\u308b\u5fc5\u8981\u306f\u306a\u304f\uff0c\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092\u9001\u308c\u3070\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u304c\u8fd4\u3055\u308c\u3066\u304f\u308b\u306e\u304b\u3055\u3048\u308f\u304b\u3063\u3066\u3044\u308c\u3070\u5341\u5206\u3067\u3059\uff0e\u305d\u306e\u30c7\u30fc\u30bf\u306e\u5165\u51fa\u529b\u306e\u898f\u5247\u3092 API \u3068\u547c\u3073\u307e\u3059\uff0e API \u306f\u57fa\u672c\u7684\u306b\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u304c\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u306f\uff0c\u5b9a\u7fa9\u3057\u305f API \u901a\u308a\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u9001\u3089\u308c\u3066\u304f\u308b\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u9069\u5207\u306a\u51e6\u7406\u3092\u884c\u3044\uff0cAPI \u306b\u5247\u3063\u305f\u51fa\u529b\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u8fd4\u3057\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u5b9f\u969b\u306b\u306f API \u306e\u5b9a\u7fa9\u306b\u5247\u3063\u305f\u30c7\u30fc\u30bf\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u9001\u3089\u308c\u3066\u304f\u308b\u4fdd\u8a3c\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u3053\u308c\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306b\u306f\u30c7\u30fc\u30bf\u304c API \u306b\u5247\u3063\u3066\u3044\u308b\u304b\u691c\u8a3c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u306e\u64cd\u4f5c\u3092 \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3 \u3068\u3044\u3044\u307e\u3059\uff0e \u307e\u3068\u3081\u308b\u3068\uff0cAPI \u3092\u5b9a\u7fa9\u3057\uff0c\u305d\u306e API \u306b\u5bfe\u5fdc\u3059\u308b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3053\u3068\u3067\uff0c\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u5165\u529b\u30c7\u30fc\u30bf\u304c API \u306b\u5247\u3063\u305f\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0eBamboo \u3067\u306f\u3053\u306e API \u5b9a\u7fa9\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u305f\u3081\u306b ApiData \u30af\u30e9\u30b9\u3068 data_format \u30c7\u30b3\u30ec\u30fc\u30bf\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3053\u308c\u3089\u306e\u6982\u5ff5\u3068\u305d\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e ApiData \u30af\u30e9\u30b9 ApiData \u306f API \u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306e\u62bd\u8c61\u30af\u30e9\u30b9\u3067\u3059\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u5165\u529b\u30c7\u30fc\u30bf\u304c API \u306b\u5f93\u3046\u3082\u306e\u304b\u3069\u3046\u304b\u3092\uff0c\u3053\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u65ad\u3057\u307e\u3059\uff0e\u3053\u306e\u3088\u3046\u306a\u7406\u7531\u304b\u3089\uff0c\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9\u306f ApiData \u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306e __init__ \u30e1\u30bd\u30c3\u30c9\u3067\u3059\uff0e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u5931\u6557\u3059\u308b\u3068\uff0c\u3053\u306e\u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306f ValidationFailedError \u3092\u9001\u51fa\u3057\u307e\u3059 (\u72ec\u81ea\u5b9f\u88c5\u3059\u308b\u5834\u5408\u306f\u9001\u51fa\u3059\u3079\u304d\u3067\u3059) \uff0e \u4ee5\u4e0b\u3067\u306f\u65e2\u5b58\u306e ApiData \u5177\u8c61\u30af\u30e9\u30b9\u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3057\u307e\u3059\uff0e BinaryApiData \u30af\u30e9\u30b9 ApiData \u30af\u30e9\u30b9\u306e\u6700\u3082\u5358\u7d14\u306a\u5177\u8c61\u30af\u30e9\u30b9\u306f BinaryApiData \u3067\u3059\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u307b\u3068\u3093\u3069\u3057\u306a\u3044\u30af\u30e9\u30b9\u3067\u3059\uff0e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u307b\u3068\u3093\u3069\u3057\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u3068\u3057\u3066\u4efb\u610f\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3059\uff0e\u3064\u307e\u308a\u5236\u9650\u304c\u306a\u3044\u3068\u3044\u3046\u306e\u304c\uff0c\u3053\u306e\u30af\u30e9\u30b9\u306b\u5bfe\u5fdc\u3059\u308b API \u306e\u8ab2\u3059\u898f\u5247\u3067\u3059\uff0e \u3053\u306e\u30af\u30e9\u30b9\u306f raw \u3068\u3044\u3046\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3063\u3066\u304a\u308a\uff0c\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304b\u3089\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\uff0e Endpoint.body \u30d7\u30ed\u30d1\u30c6\u30a3\u304b\u3089\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3053\u3068\u3092\u8003\u3048\u308c\u3070\uff0c\u3053\u306e\u30af\u30e9\u30b9\u306f\u307b\u3068\u3093\u3069\u610f\u5473\u3092\u6301\u3061\u307e\u305b\u3093\u304c\uff0c text/plain \u3068\u3044\u3046 Content-Type \u3092\u8868\u3059\u305f\u3081\u306b\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e JsonApiData \u30af\u30e9\u30b9 JsonApiData \u30af\u30e9\u30b9\u306f JSON \u30c7\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f\u751f\u30c7\u30fc\u30bf\u304c\u5b9a\u7fa9\u3057\u305f JSON \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u8a3c\u3057\u307e\u3059\uff0eAPI \u30c7\u30fc\u30bf\u306e\u5b9a\u7fa9\u306f Python \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e dataclass \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u5b9a\u7fa9\u3068\u4f3c\u3066\u3044\u307e\u3059: class MockApiData ( JsonApiData ): name : str email : str age : int \u4e0a\u8a18\u306e JsonApiData \u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059: { \"name\" : \"jjj999\" , \"email\" : \"hogehoge@example.com\" , \"age\" : 10 } \u4e0a\u8a18\u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059: class MockListApiData ( JsonApiData ): mocks : List [ MockApiData ] \u3053\u306e\u3088\u3046\u306b JsonApiData \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u9023\u9396\u7684\u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\uff0c\u8907\u96d1\u306a JSON \u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e data_format \u30c7\u30b3\u30ec\u30fc\u30bf \u3053\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u306f Endpoint \u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9 (\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570) \u306b\u30c7\u30b3\u30ec\u30fc\u30c8\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\uff0c\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306e API \u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\u5177\u4f53\u7684\u306b\u306f\uff0cAPI \u306e\u5b9a\u7fa9\u306f data_format \u30c7\u30b3\u30ec\u30fc\u30bf\u306e input \u5f15\u6570\u3068 output \u5f15\u6570\u306b ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u884c\u3044\u307e\u3059\uff0e\u3053\u308c\u3089\u306e\u5f15\u6570\u306b\u306f\u5165\u51fa\u529b\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306b\u306f ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u3092\uff0c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u306f None \u3092\u6307\u5b9a\u3057\u307e\u3059\uff0e\u4ee5\u4e0b\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u304c\u5148\u7a0b\u5b9a\u7fa9\u3057\u305f MockApiData \u3067\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u304c\u5b58\u5728\u3057\u306a\u3044\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u5b9a\u7fa9\u4f8b\u3067\u3059: @data_format ( input = MockApiData , output = None ) def do_GET ( self , rec_body : MockApiData ) -> None : # Do something... \u4e0a\u8a18\u306e\u4f8b\u304b\u3089\u308f\u304b\u308b\u3088\u3046\u306b\uff0c data_format \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u3053\u3068\u306b\u3088\u308a\uff0c\u5f15\u6570\u304c\u4e00\u3064\u5897\u3048\u307e\u3059\uff0e\u5897\u3048\u305f\u5f15\u6570\u306f input \u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\uff0eApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306f\uff0c\u524d\u8ff0\u3057\u305f\u3088\u3046\u306b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u6210\u529f\u3057\u305f\u3068\u3044\u3046\u610f\u5473\u3067\u3059\uff0e\u3064\u307e\u308a\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u304c\u5b9a\u7fa9\u3055\u308c\u305f API \u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5247\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u307e\u3059\uff0e\u3061\u306a\u307f\u306b\uff0c data_format \u30c7\u30b3\u30ec\u30fc\u30bf\u306e is_validate \u5f15\u6570\u306b False \u3092\u6307\u5b9a\u3059\u308b\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306f\u884c\u308f\u308c\u305a\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3082\u5897\u3048\u307e\u305b\u3093\uff0e \u5b9f\u88c5\u4f8b API \u306e\u5b9a\u7fa9\u306f ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u5b9f\u88c5 data_format \u30c7\u30b3\u30ec\u30fc\u30bf\u306b\u9069\u5207\u306a ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u307e\u305f\u306f None \u3092\u6307\u5b9a \u306e\u624b\u9806\u3067\u884c\u3044\u307e\u3059\uff0e ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306f API \u3068\u3057\u3066\u5229\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u4f9d\u5b58\u3057\u307e\u3059\uff0eJSON \u30c7\u30fc\u30bf\u3092 API \u3068\u3057\u3066\u5229\u7528\u3059\u308b\u306e\u3067\u3042\u308c\u3070\uff0c\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u95a2\u3059\u308b\u5b9f\u88c5\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\uff0e\u4e0a\u8ff0\u3057\u305f\u3088\u3046\u306b\uff0c JsonApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306b\u9069\u5f53\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u3068 type hints \u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3067\u3059\uff0e\u305d\u306e\u4ed6\u306e\u7279\u5225\u306a\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092 API \u3068\u3057\u3066\u5229\u7528\u3059\u308b\u5834\u5408\u306b\u306f ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u72ec\u81ea\u306b\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e API \u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3068\u3057\u3066\u5229\u7528\u3059\u308b ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u304c\u6e96\u5099\u3067\u304d\u305f\u3089\uff0c\u305d\u308c\u3092 data_format \u30c7\u30b3\u30ec\u30fc\u30bf\u306e input \u307e\u305f\u306f output \u5f15\u6570\u306b\u6307\u5b9a\u3057\u307e\u3059\uff0e\u7279\u306b input \u5f15\u6570\u306b None \u3067\u306f\u306a\u3044\u5f15\u6570\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\uff0c\u6307\u5b9a\u3057\u305f ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\uff0e\u3082\u3057\uff0c is_validate \u5f15\u6570\u3092 False \u306b\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u306b\u306f\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306f\u884c\u308f\u308c\u305a\uff0c\u5f15\u6570\u306e\u8ffd\u52a0\u3082\u3042\u308a\u307e\u305b\u3093\uff0e\u307e\u305f\uff0c err_validate \u5f15\u6570\u306b\u306f ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u3053\u306e\u5f15\u6570\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\uff0c\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u5931\u6557\u3057 ValidationFailedError \u304c\u9001\u51fa\u3055\u308c\u305f\u5834\u5408\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30c7\u30fc\u30bf\u3092\u5236\u5fa1\u3067\u304d\u307e\u3059\uff0e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\uff0c\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9 415 \u306e\u307f\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u8fd4\u3055\u308c\u307e\u3059\uff0e \u62e1\u5f35\u6027 \u4e0a\u8a18\u306e\u3088\u3046\u306a\u65e2\u5b58\u306e ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u304c\uff0c\u72ec\u81ea\u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\uff0e ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u4e0a\u3067\u6ce8\u610f\u3059\u308b\u3053\u3068\u306f\uff0c __init__ \u30e1\u30bd\u30c3\u30c9\u306b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30ed\u30b8\u30c3\u30af\u3092\u5b9a\u7fa9\u3059\u308b \u751f\u6210\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u89e3\u6790\u3057\u305f\u751f\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b \u306e2\u70b9\u3067\u3059\uff0e\u4ee5\u4e0b\u3067\u306f BinaryApiData \u306e\u5b9f\u88c5\u3092\u4f8b\u306b\u3068\u308a\uff0c\u3053\u308c\u3089\u306e\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30ed\u30b8\u30c3\u30af\u306e\u5b9a\u7fa9 \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30ed\u30b8\u30c3\u30af\u3068\u306f\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u7528\u3044\u308b\u30ed\u30b8\u30c3\u30af\u306e\u3053\u3068\u3067\uff0c\u3064\u307e\u308a\u3069\u306e\u3088\u3046\u306b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u304b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u3088\u308a\u5177\u4f53\u7684\u306b\u8a00\u3046\u3068\uff0c if \u6587\u306a\u3069\u3092\u7528\u3044\u3066\uff0c\u53d7\u3051\u53d6\u3063\u305f\u30c7\u30fc\u30bf\u304c\u9069\u5207\u306a\u3082\u306e\u306a\u306e\u304b\u3092\u691c\u8a3c\u3059\u308b\u30b3\u30fc\u30c9\u306e\u3053\u3068\u3067\u3059\uff0e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30ed\u30b8\u30c3\u30af\u306f\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092\u7528\u3044\u308b\u304b\u306b\u3088\u3063\u3066\u6c7a\u307e\u308b\u306e\u3067\uff0c\u4e00\u6982\u306b\u3053\u3046\u3042\u308b\u3079\u304d\u3068\u3044\u3046\u3082\u306e\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u3057\u305f\u304c\u3063\u3066\uff0c\u307e\u305a\u306f\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6c7a\u3081\uff0c\u53d7\u3051\u53d6\u3063\u305f\u30c7\u30fc\u30bf\u304c\u305d\u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u6e96\u305a\u308b\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u3092\u691c\u8a3c\u3059\u308b\u305f\u3081\u306e\u30ed\u30b8\u30c3\u30af\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e \u4f8b\u3068\u3057\u3066\uff0c BinaryApiData \u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u90e8\u5206\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u307b\u3068\u3093\u3069\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u308f\u306a\u3044\u3068\u8ff0\u3079\u307e\u3057\u305f\u304c\uff0c\u5b9f\u969b\u306b\u306f\u751f\u30c7\u30fc\u30bf raw \u306e\u578b\u306e\u307f\u3092\u691c\u8a3c\u3057\u307e\u3059\uff0e BinaryApiData \u306f\u4efb\u610f\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u8a31\u5bb9\u3059\u308b ApiData \u3067\u3059\u304c\uff0c\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u5177\u4f53\u7684\u306b\u6c7a\u307e\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3088\u308a\u8907\u96d1\u306a\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30ed\u30b8\u30c3\u30af\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\uff0e\u3082\u3057\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306f\uff0c ValidationFailedError \u3092\u9001\u51fa\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\uff0e class BinaryApiData ( ApiData ): def __init__ ( self , raw : bytes , content_type : ContentType ) -> None : super () . __init__ ( raw , content_type ) # \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30ed\u30b8\u30c3\u30af if not isinstance ( raw , bytes ): raise ValidationFailedError ( f \"'raw' must be a 'bytes', but was { raw . __class__ . __name__ } .\" ) # \u751f\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e\u4fdd\u6301\u3057\u3066\u304a\u304f self . _raw = raw ... ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e __init__ \u30e1\u30bd\u30c3\u30c9\u306e\u7b2c2\u5f15\u6570\u306b\u306f ContentType \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6e21\u3055\u308c\u307e\u3059\uff0e ContentType \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f media_type charset boundary \u3068\u3044\u3046 str \u307e\u305f\u306f None \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3092\u6301\u3061\u307e\u3059\uff0e\u3053\u308c\u3089\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306f MIME \u30bf\u30a4\u30d7\u306e\u691c\u8a3c\u3084\u751f\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c9\u306e\u305f\u3081\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u306e\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\uff0e boundary \u306b\u306f Content-Type \u30d8\u30c3\u30c0\u304c multipart/form-data \u306e\u3068\u304d\u306e boundary \u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u306e\u5024\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\uff0e\u958b\u767a\u8005\u306f\u3053\u308c\u3089\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306f None \u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u3092\u610f\u8b58\u3059\u3079\u304d\u3067\u3059\uff0e None \u3067\u3042\u308b\u3068\u306f\uff0c\u3059\u306a\u308f\u3061 Content-Type \u30d8\u30c3\u30c0\u306b\u305d\u306e\u60c5\u5831\u304c\u306a\u304b\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u307e\u3059\uff0e\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u30b9\u30cb\u30da\u30c3\u30c8\u306f JsonApiData \u306e content_type \u5f15\u6570\u306b\u5bfe\u3059\u308b\u691c\u8a3c\u90e8\u5206\u3092\u793a\u3057\u305f\u3082\u306e\u3067\u3059\uff0e class JsonApiData ( ApiData ): def __init__ ( self , raw : bytes , content_type : ContentType ) -> None : super () . __init__ ( raw , content_type ) # \u6587\u5b57\u30b3\u30fc\u30c9\u306e\u691c\u8a3c encoding = content_type . charset if encoding is None : encoding = \"utf-8\" # MIME \u30bf\u30a4\u30d7\u306e\u691c\u8a3c media_type = content_type . media_type if media_type is None : raise ValidationFailedError ( \"'Content-Type' header was not specified. Specify \" f \"' { MediaTypes . json } ' as media type.\" ) if media_type . lower () != MediaTypes . json : raise ValidationFailedError ( \"Media type of 'Content-Type' header was not \" f \" { MediaTypes . json } , but { content_type . media_type } .\" ) ... \u89e3\u6790\u3057\u305f\u751f\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u5f79\u5272\u306f\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u307f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u5f8c\uff0c\u305d\u306e\u89e3\u6790\u3057\u305f\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u30a2\u30af\u30bb\u30b9\u306e\u63d0\u4f9b\u65b9\u6cd5\u306f\u7279\u306b\u5236\u9650\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u4e00\u4f8b\u3068\u3057\u3066\uff0c BinaryApiData \u306f\u30c7\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u65b9\u6cd5\u3068\u3057\u3066 raw \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\uff0e\u307e\u305f\uff0c JsonApiData \u306e\u5834\u5408\u306f\uff0c\u958b\u767a\u8005\u306b\u305d\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3068 JSON \u30c7\u30fc\u30bf\u306e\u30ad\u30fc\u3092\u5b9a\u7fa9\u3055\u305b\u308b\u3053\u3068\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u5f8c\u306b\u305d\u306e\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\uff0e # BinaryApiData \u306e\u4f8b class BinaryApiData ( ApiData ): def __init__ ( self , raw : bytes , content_type : ContentType ) -> None : ... @property def raw ( self ) -> bytes : return self . _raw # JsonApiData \u306e\u4f8b class UserData ( JsonApiData ): name : str email : str age : int","title":"API \u306e\u5b9a\u7fa9"},{"location":"tutorials/define_api/#api","text":"Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8a2d\u8a08\u306b\u304a\u3044\u3066 API \u306e\u5b9a\u7fa9\u306f\u6b20\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u305b\u3093\uff0e\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f Bamboo \u306e\u6a5f\u80fd\u306e\u4e00\u3064\u3067\u3042\u308b API \u306e\u5b9a\u7fa9\u306b\u3064\u3044\u3066\u8ff0\u3079\u307e\u3059\uff0e","title":"API \u306e\u5b9a\u7fa9"},{"location":"tutorials/define_api/#_1","text":"Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u306e\u901a\u4fe1\u306b\u3088\u3063\u3066\u6210\u7acb\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059\uff0e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5185\u90e8\u5b9f\u88c5\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u77e5\u308b\u5fc5\u8981\u306f\u306a\u304f\uff0c\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092\u9001\u308c\u3070\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u304c\u8fd4\u3055\u308c\u3066\u304f\u308b\u306e\u304b\u3055\u3048\u308f\u304b\u3063\u3066\u3044\u308c\u3070\u5341\u5206\u3067\u3059\uff0e\u305d\u306e\u30c7\u30fc\u30bf\u306e\u5165\u51fa\u529b\u306e\u898f\u5247\u3092 API \u3068\u547c\u3073\u307e\u3059\uff0e API \u306f\u57fa\u672c\u7684\u306b\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3059\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u304c\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u306f\uff0c\u5b9a\u7fa9\u3057\u305f API \u901a\u308a\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u9001\u3089\u308c\u3066\u304f\u308b\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u9069\u5207\u306a\u51e6\u7406\u3092\u884c\u3044\uff0cAPI \u306b\u5247\u3063\u305f\u51fa\u529b\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u8fd4\u3057\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u5b9f\u969b\u306b\u306f API \u306e\u5b9a\u7fa9\u306b\u5247\u3063\u305f\u30c7\u30fc\u30bf\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u9001\u3089\u308c\u3066\u304f\u308b\u4fdd\u8a3c\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u3053\u308c\u3092\u4fdd\u8a3c\u3059\u308b\u305f\u3081\u306b\u306f\u30c7\u30fc\u30bf\u304c API \u306b\u5247\u3063\u3066\u3044\u308b\u304b\u691c\u8a3c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u306e\u64cd\u4f5c\u3092 \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3 \u3068\u3044\u3044\u307e\u3059\uff0e \u307e\u3068\u3081\u308b\u3068\uff0cAPI \u3092\u5b9a\u7fa9\u3057\uff0c\u305d\u306e API \u306b\u5bfe\u5fdc\u3059\u308b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u3053\u3068\u3067\uff0c\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u5165\u529b\u30c7\u30fc\u30bf\u304c API \u306b\u5247\u3063\u305f\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0eBamboo \u3067\u306f\u3053\u306e API \u5b9a\u7fa9\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u305f\u3081\u306b ApiData \u30af\u30e9\u30b9\u3068 data_format \u30c7\u30b3\u30ec\u30fc\u30bf\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3053\u308c\u3089\u306e\u6982\u5ff5\u3068\u305d\u306e\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e","title":"\u6982\u8981"},{"location":"tutorials/define_api/#apidata","text":"ApiData \u306f API \u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u306e\u62bd\u8c61\u30af\u30e9\u30b9\u3067\u3059\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u5165\u529b\u30c7\u30fc\u30bf\u304c API \u306b\u5f93\u3046\u3082\u306e\u304b\u3069\u3046\u304b\u3092\uff0c\u3053\u306e\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u65ad\u3057\u307e\u3059\uff0e\u3053\u306e\u3088\u3046\u306a\u7406\u7531\u304b\u3089\uff0c\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9\u306f ApiData \u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306e __init__ \u30e1\u30bd\u30c3\u30c9\u3067\u3059\uff0e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u5931\u6557\u3059\u308b\u3068\uff0c\u3053\u306e\u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306f ValidationFailedError \u3092\u9001\u51fa\u3057\u307e\u3059 (\u72ec\u81ea\u5b9f\u88c5\u3059\u308b\u5834\u5408\u306f\u9001\u51fa\u3059\u3079\u304d\u3067\u3059) \uff0e \u4ee5\u4e0b\u3067\u306f\u65e2\u5b58\u306e ApiData \u5177\u8c61\u30af\u30e9\u30b9\u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3057\u307e\u3059\uff0e","title":"ApiData \u30af\u30e9\u30b9"},{"location":"tutorials/define_api/#binaryapidata","text":"ApiData \u30af\u30e9\u30b9\u306e\u6700\u3082\u5358\u7d14\u306a\u5177\u8c61\u30af\u30e9\u30b9\u306f BinaryApiData \u3067\u3059\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u307b\u3068\u3093\u3069\u3057\u306a\u3044\u30af\u30e9\u30b9\u3067\u3059\uff0e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u307b\u3068\u3093\u3069\u3057\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u3068\u3057\u3066\u4efb\u610f\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u4ed8\u3051\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3059\uff0e\u3064\u307e\u308a\u5236\u9650\u304c\u306a\u3044\u3068\u3044\u3046\u306e\u304c\uff0c\u3053\u306e\u30af\u30e9\u30b9\u306b\u5bfe\u5fdc\u3059\u308b API \u306e\u8ab2\u3059\u898f\u5247\u3067\u3059\uff0e \u3053\u306e\u30af\u30e9\u30b9\u306f raw \u3068\u3044\u3046\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3063\u3066\u304a\u308a\uff0c\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u304b\u3089\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\uff0e Endpoint.body \u30d7\u30ed\u30d1\u30c6\u30a3\u304b\u3089\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3053\u3068\u3092\u8003\u3048\u308c\u3070\uff0c\u3053\u306e\u30af\u30e9\u30b9\u306f\u307b\u3068\u3093\u3069\u610f\u5473\u3092\u6301\u3061\u307e\u305b\u3093\u304c\uff0c text/plain \u3068\u3044\u3046 Content-Type \u3092\u8868\u3059\u305f\u3081\u306b\u4f7f\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e","title":"BinaryApiData \u30af\u30e9\u30b9"},{"location":"tutorials/define_api/#jsonapidata","text":"JsonApiData \u30af\u30e9\u30b9\u306f JSON \u30c7\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f\u751f\u30c7\u30fc\u30bf\u304c\u5b9a\u7fa9\u3057\u305f JSON \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u8a3c\u3057\u307e\u3059\uff0eAPI \u30c7\u30fc\u30bf\u306e\u5b9a\u7fa9\u306f Python \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e dataclass \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u305f\u5b9a\u7fa9\u3068\u4f3c\u3066\u3044\u307e\u3059: class MockApiData ( JsonApiData ): name : str email : str age : int \u4e0a\u8a18\u306e JsonApiData \u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059: { \"name\" : \"jjj999\" , \"email\" : \"hogehoge@example.com\" , \"age\" : 10 } \u4e0a\u8a18\u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6301\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059: class MockListApiData ( JsonApiData ): mocks : List [ MockApiData ] \u3053\u306e\u3088\u3046\u306b JsonApiData \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u9023\u9396\u7684\u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\uff0c\u8907\u96d1\u306a JSON \u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e","title":"JsonApiData \u30af\u30e9\u30b9"},{"location":"tutorials/define_api/#data_format","text":"\u3053\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u306f Endpoint \u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9 (\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570) \u306b\u30c7\u30b3\u30ec\u30fc\u30c8\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\uff0c\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u306e API \u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\u5177\u4f53\u7684\u306b\u306f\uff0cAPI \u306e\u5b9a\u7fa9\u306f data_format \u30c7\u30b3\u30ec\u30fc\u30bf\u306e input \u5f15\u6570\u3068 output \u5f15\u6570\u306b ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u884c\u3044\u307e\u3059\uff0e\u3053\u308c\u3089\u306e\u5f15\u6570\u306b\u306f\u5165\u51fa\u529b\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306b\u306f ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u3092\uff0c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u306f None \u3092\u6307\u5b9a\u3057\u307e\u3059\uff0e\u4ee5\u4e0b\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u304c\u5148\u7a0b\u5b9a\u7fa9\u3057\u305f MockApiData \u3067\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u304c\u5b58\u5728\u3057\u306a\u3044\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u5b9a\u7fa9\u4f8b\u3067\u3059: @data_format ( input = MockApiData , output = None ) def do_GET ( self , rec_body : MockApiData ) -> None : # Do something... \u4e0a\u8a18\u306e\u4f8b\u304b\u3089\u308f\u304b\u308b\u3088\u3046\u306b\uff0c data_format \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u305f\u3053\u3068\u306b\u3088\u308a\uff0c\u5f15\u6570\u304c\u4e00\u3064\u5897\u3048\u307e\u3059\uff0e\u5897\u3048\u305f\u5f15\u6570\u306f input \u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u3059\uff0eApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u306f\uff0c\u524d\u8ff0\u3057\u305f\u3088\u3046\u306b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u6210\u529f\u3057\u305f\u3068\u3044\u3046\u610f\u5473\u3067\u3059\uff0e\u3064\u307e\u308a\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u304c\u5b9a\u7fa9\u3055\u308c\u305f API \u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5247\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u307e\u3059\uff0e\u3061\u306a\u307f\u306b\uff0c data_format \u30c7\u30b3\u30ec\u30fc\u30bf\u306e is_validate \u5f15\u6570\u306b False \u3092\u6307\u5b9a\u3059\u308b\u3068\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306f\u884c\u308f\u308c\u305a\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3082\u5897\u3048\u307e\u305b\u3093\uff0e","title":"data_format \u30c7\u30b3\u30ec\u30fc\u30bf"},{"location":"tutorials/define_api/#_2","text":"API \u306e\u5b9a\u7fa9\u306f ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u5b9f\u88c5 data_format \u30c7\u30b3\u30ec\u30fc\u30bf\u306b\u9069\u5207\u306a ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u307e\u305f\u306f None \u3092\u6307\u5b9a \u306e\u624b\u9806\u3067\u884c\u3044\u307e\u3059\uff0e ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306f API \u3068\u3057\u3066\u5229\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u4f9d\u5b58\u3057\u307e\u3059\uff0eJSON \u30c7\u30fc\u30bf\u3092 API \u3068\u3057\u3066\u5229\u7528\u3059\u308b\u306e\u3067\u3042\u308c\u3070\uff0c\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u95a2\u3059\u308b\u5b9f\u88c5\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\uff0e\u4e0a\u8ff0\u3057\u305f\u3088\u3046\u306b\uff0c JsonApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306b\u9069\u5f53\u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u3068 type hints \u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3067\u3059\uff0e\u305d\u306e\u4ed6\u306e\u7279\u5225\u306a\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092 API \u3068\u3057\u3066\u5229\u7528\u3059\u308b\u5834\u5408\u306b\u306f ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u72ec\u81ea\u306b\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e API \u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3068\u3057\u3066\u5229\u7528\u3059\u308b ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u304c\u6e96\u5099\u3067\u304d\u305f\u3089\uff0c\u305d\u308c\u3092 data_format \u30c7\u30b3\u30ec\u30fc\u30bf\u306e input \u307e\u305f\u306f output \u5f15\u6570\u306b\u6307\u5b9a\u3057\u307e\u3059\uff0e\u7279\u306b input \u5f15\u6570\u306b None \u3067\u306f\u306a\u3044\u5f15\u6570\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\uff0c\u6307\u5b9a\u3057\u305f ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\uff0e\u3082\u3057\uff0c is_validate \u5f15\u6570\u3092 False \u306b\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u306b\u306f\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306f\u884c\u308f\u308c\u305a\uff0c\u5f15\u6570\u306e\u8ffd\u52a0\u3082\u3042\u308a\u307e\u305b\u3093\uff0e\u307e\u305f\uff0c err_validate \u5f15\u6570\u306b\u306f ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u3053\u306e\u5f15\u6570\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\uff0c\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u5931\u6557\u3057 ValidationFailedError \u304c\u9001\u51fa\u3055\u308c\u305f\u5834\u5408\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30c7\u30fc\u30bf\u3092\u5236\u5fa1\u3067\u304d\u307e\u3059\uff0e\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\uff0c\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9 415 \u306e\u307f\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u8fd4\u3055\u308c\u307e\u3059\uff0e","title":"\u5b9f\u88c5\u4f8b"},{"location":"tutorials/define_api/#_3","text":"\u4e0a\u8a18\u306e\u3088\u3046\u306a\u65e2\u5b58\u306e ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u304c\uff0c\u72ec\u81ea\u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\uff0e ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u4e0a\u3067\u6ce8\u610f\u3059\u308b\u3053\u3068\u306f\uff0c __init__ \u30e1\u30bd\u30c3\u30c9\u306b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30ed\u30b8\u30c3\u30af\u3092\u5b9a\u7fa9\u3059\u308b \u751f\u6210\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u89e3\u6790\u3057\u305f\u751f\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b \u306e2\u70b9\u3067\u3059\uff0e\u4ee5\u4e0b\u3067\u306f BinaryApiData \u306e\u5b9f\u88c5\u3092\u4f8b\u306b\u3068\u308a\uff0c\u3053\u308c\u3089\u306e\u6ce8\u610f\u70b9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e","title":"\u62e1\u5f35\u6027"},{"location":"tutorials/define_api/#_4","text":"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30ed\u30b8\u30c3\u30af\u3068\u306f\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u7528\u3044\u308b\u30ed\u30b8\u30c3\u30af\u306e\u3053\u3068\u3067\uff0c\u3064\u307e\u308a\u3069\u306e\u3088\u3046\u306b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u304b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u3088\u308a\u5177\u4f53\u7684\u306b\u8a00\u3046\u3068\uff0c if \u6587\u306a\u3069\u3092\u7528\u3044\u3066\uff0c\u53d7\u3051\u53d6\u3063\u305f\u30c7\u30fc\u30bf\u304c\u9069\u5207\u306a\u3082\u306e\u306a\u306e\u304b\u3092\u691c\u8a3c\u3059\u308b\u30b3\u30fc\u30c9\u306e\u3053\u3068\u3067\u3059\uff0e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30ed\u30b8\u30c3\u30af\u306f\u3069\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u3092\u7528\u3044\u308b\u304b\u306b\u3088\u3063\u3066\u6c7a\u307e\u308b\u306e\u3067\uff0c\u4e00\u6982\u306b\u3053\u3046\u3042\u308b\u3079\u304d\u3068\u3044\u3046\u3082\u306e\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u3057\u305f\u304c\u3063\u3066\uff0c\u307e\u305a\u306f\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6c7a\u3081\uff0c\u53d7\u3051\u53d6\u3063\u305f\u30c7\u30fc\u30bf\u304c\u305d\u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u6e96\u305a\u308b\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u3092\u691c\u8a3c\u3059\u308b\u305f\u3081\u306e\u30ed\u30b8\u30c3\u30af\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e \u4f8b\u3068\u3057\u3066\uff0c BinaryApiData \u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u90e8\u5206\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u307b\u3068\u3093\u3069\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u884c\u308f\u306a\u3044\u3068\u8ff0\u3079\u307e\u3057\u305f\u304c\uff0c\u5b9f\u969b\u306b\u306f\u751f\u30c7\u30fc\u30bf raw \u306e\u578b\u306e\u307f\u3092\u691c\u8a3c\u3057\u307e\u3059\uff0e BinaryApiData \u306f\u4efb\u610f\u306e\u30d0\u30a4\u30ca\u30ea\u3092\u8a31\u5bb9\u3059\u308b ApiData \u3067\u3059\u304c\uff0c\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u5177\u4f53\u7684\u306b\u6c7a\u307e\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u3088\u308a\u8907\u96d1\u306a\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30ed\u30b8\u30c3\u30af\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\uff0e\u3082\u3057\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306f\uff0c ValidationFailedError \u3092\u9001\u51fa\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\uff0e class BinaryApiData ( ApiData ): def __init__ ( self , raw : bytes , content_type : ContentType ) -> None : super () . __init__ ( raw , content_type ) # \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30ed\u30b8\u30c3\u30af if not isinstance ( raw , bytes ): raise ValidationFailedError ( f \"'raw' must be a 'bytes', but was { raw . __class__ . __name__ } .\" ) # \u751f\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e\u4fdd\u6301\u3057\u3066\u304a\u304f self . _raw = raw ... ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e __init__ \u30e1\u30bd\u30c3\u30c9\u306e\u7b2c2\u5f15\u6570\u306b\u306f ContentType \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u6e21\u3055\u308c\u307e\u3059\uff0e ContentType \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f media_type charset boundary \u3068\u3044\u3046 str \u307e\u305f\u306f None \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3092\u6301\u3061\u307e\u3059\uff0e\u3053\u308c\u3089\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306f MIME \u30bf\u30a4\u30d7\u306e\u691c\u8a3c\u3084\u751f\u30c7\u30fc\u30bf\u306e\u30c7\u30b3\u30fc\u30c9\u306e\u305f\u3081\u306e\u6587\u5b57\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u306e\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\uff0e boundary \u306b\u306f Content-Type \u30d8\u30c3\u30c0\u304c multipart/form-data \u306e\u3068\u304d\u306e boundary \u30c7\u30a3\u30ec\u30af\u30c6\u30a3\u30d6\u306e\u5024\u304c\u683c\u7d0d\u3055\u308c\u307e\u3059\uff0e\u958b\u767a\u8005\u306f\u3053\u308c\u3089\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306f None \u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u3092\u610f\u8b58\u3059\u3079\u304d\u3067\u3059\uff0e None \u3067\u3042\u308b\u3068\u306f\uff0c\u3059\u306a\u308f\u3061 Content-Type \u30d8\u30c3\u30c0\u306b\u305d\u306e\u60c5\u5831\u304c\u306a\u304b\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u3092\u610f\u5473\u3057\u3066\u3044\u307e\u3059\uff0e\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u30b9\u30cb\u30da\u30c3\u30c8\u306f JsonApiData \u306e content_type \u5f15\u6570\u306b\u5bfe\u3059\u308b\u691c\u8a3c\u90e8\u5206\u3092\u793a\u3057\u305f\u3082\u306e\u3067\u3059\uff0e class JsonApiData ( ApiData ): def __init__ ( self , raw : bytes , content_type : ContentType ) -> None : super () . __init__ ( raw , content_type ) # \u6587\u5b57\u30b3\u30fc\u30c9\u306e\u691c\u8a3c encoding = content_type . charset if encoding is None : encoding = \"utf-8\" # MIME \u30bf\u30a4\u30d7\u306e\u691c\u8a3c media_type = content_type . media_type if media_type is None : raise ValidationFailedError ( \"'Content-Type' header was not specified. Specify \" f \"' { MediaTypes . json } ' as media type.\" ) if media_type . lower () != MediaTypes . json : raise ValidationFailedError ( \"Media type of 'Content-Type' header was not \" f \" { MediaTypes . json } , but { content_type . media_type } .\" ) ...","title":"\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30ed\u30b8\u30c3\u30af\u306e\u5b9a\u7fa9"},{"location":"tutorials/define_api/#_5","text":"ApiData \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u5f79\u5272\u306f\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u307f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u5f8c\uff0c\u305d\u306e\u89e3\u6790\u3057\u305f\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u30a2\u30af\u30bb\u30b9\u306e\u63d0\u4f9b\u65b9\u6cd5\u306f\u7279\u306b\u5236\u9650\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u4e00\u4f8b\u3068\u3057\u3066\uff0c BinaryApiData \u306f\u30c7\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u65b9\u6cd5\u3068\u3057\u3066 raw \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\uff0e\u307e\u305f\uff0c JsonApiData \u306e\u5834\u5408\u306f\uff0c\u958b\u767a\u8005\u306b\u305d\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3068 JSON \u30c7\u30fc\u30bf\u306e\u30ad\u30fc\u3092\u5b9a\u7fa9\u3055\u305b\u308b\u3053\u3068\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u5f8c\u306b\u305d\u306e\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\uff0e # BinaryApiData \u306e\u4f8b class BinaryApiData ( ApiData ): def __init__ ( self , raw : bytes , content_type : ContentType ) -> None : ... @property def raw ( self ) -> bytes : return self . _raw # JsonApiData \u306e\u4f8b class UserData ( JsonApiData ): name : str email : str age : int","title":"\u89e3\u6790\u3057\u305f\u751f\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b"},{"location":"tutorials/error_handling/","text":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0 \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f bamboo \u3067\u306e\u30a8\u30e9\u30fc\u6642\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u9001\u4fe1\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e \u6982\u8981 Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u306e\u30a8\u30e9\u30fc\u767a\u751f\u6642\u306b\u9069\u5207\u306a\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306f\u901a\u5e38\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3068 HTTP \u3068\u3044\u3046\u70b9\u3067\u306f\u5909\u308f\u308a\u3042\u308a\u307e\u305b\u3093\u304c\uff0c\u57fa\u672c\u7684\u306b\u306f\u6c7a\u307e\u3063\u305f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u8fd4\u3055\u308c\u308b\u3079\u304d\u3067\u3059\uff0e\u307e\u305f\uff0c Endpoint \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u30a8\u30e9\u30fc\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3057\u9001\u4fe1\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u304c\uff0c\u3042\u307e\u308a\u826f\u3044\u65b9\u6cd5\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\uff0e\u306a\u305c\u306a\u3089\uff0c\u30a8\u30e9\u30fc\u306f\u526f\u6b21\u7684\u306a\u51e6\u7406\u306b\u904e\u304e\u305a\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u306b\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u305f\u3081\u306e\u526f\u6b21\u7684\u306a\u51e6\u7406\u304c\u591a\u304f\u5165\u308a\u8fbc\u3080\u3053\u3068\u306b\u3088\u308a\uff0c\u672c\u51e6\u7406\u304c\u308f\u304b\u308a\u306b\u304f\u304f\u306a\u308a\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u53ef\u8aad\u6027\u304c\u4e0b\u304c\u308b\u305f\u3081\u3067\u3059\uff0e bamboo \u3067\u306e\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u9001\u4fe1\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u884c\u3044\u307e\u3059: ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9 Endpoint.send_err() \u30e1\u30bd\u30c3\u30c9\u306b\u5b9a\u7fa9\u3057\u305f ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059 1 \u306e\u30b9\u30c6\u30c3\u30d7\u306f\u901a\u5e38\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5916\u90e8\u3067\u884c\u3046\u306e\u3067\uff0c\u8907\u6570\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3067\u540c\u4e00\u306e\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u9001\u4fe1\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e Endpoint.send_err() \u30e1\u30bd\u30c3\u30c9\u306f\u5b9a\u7fa9\u3057\u305f ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d7\u3051\u53d6\u3063\u3066\uff0c ErrInfoBase.get_all_form() \u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u5f97\u3089\u308c\u305f\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u60c5\u5831\u3092\u62bd\u51fa\u3057\u307e\u3059\uff0e\u305d\u306e\u5f8c\uff0c\u305d\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u9001\u4fe1\u3057\u307e\u3059\uff0e \u307e\u305a\u306f ErrInfoBase \u306e\u57fa\u672c\u7684\u306a\u5b9a\u7fa9\u65b9\u6cd5\u3092\u8ff0\u3079\uff0c\u305d\u306e\u5f8c\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u306e\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\u65b9\u6cd5 \u958b\u767a\u8005\u304c\u5b9a\u7fa9\u3059\u3079\u304d\u30a8\u30e9\u30fc\u306e\u8981\u7d20\u306f\u4e3b\u306b\u6b21\u306e3\u3064\u3067\u3059: \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9 ErrInfoBase.http_status HTTPStatus \u30af\u30e9\u30b9\u306e\u5909\u6570\u304b\u3089\u9078\u629e\u3057\u307e\u3059 \u30c7\u30d5\u30a9\u30eb\u30c8\u306f HTTPStatus.BAD_REQUEST (\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9 400 ) \u3067\u3059 \u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0 ErrInfoBase.get_headers() \u8ffd\u52a0\u3067\u9001\u4fe1\u3057\u305f\u3044\u30d8\u30c3\u30c0\u3092\u5b9a\u7fa9\u3057\u307e\u3059 \u30d8\u30c3\u30c0\u540d\u3068\u5024\u306e2\u8981\u7d20\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7a7a\u306e\u30ea\u30b9\u30c8\u304c\u8fd4\u3055\u308c\u307e\u3059 \u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3 ErrInfoBase.get_body() \u30a8\u30e9\u30fc\u3092\u8868\u3059\u305f\u3081\u306e\u30dc\u30c7\u30a3\u3092\u5b9a\u7fa9\u3057\u307e\u3059 bytes \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7a7a\u306e bytes \u304c\u8fd4\u3055\u308c\u307e\u3059 _content_type_ \u30af\u30e9\u30b9\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u306e Content-Type \u30d8\u30c3\u30c0\u306e\u5024\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059 \u4ee5\u4e0b\u3067\u306f\u3053\u308c\u3089\u306b\u3064\u3044\u3066\u9806\u306b\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9 \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3059\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u72b6\u614b\u3092\u8868\u3059\u305f\u3081\u306e3\u6841\u306e\u6570\u5b57\u3067\uff0cHTTP \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3067\u3059\uff0e ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u3067 http_status \u30af\u30e9\u30b9\u5909\u6570\u3092\u4e0a\u66f8\u304d\u3059\u308b\u3053\u3068\u3067\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u304c\uff0c\u5b9f\u969b\u306b\u306f Enum \u30af\u30e9\u30b9\u3067\u3042\u308b bamboo.base.HTTPStatus \u30af\u30e9\u30b9\u306e\u30af\u30e9\u30b9\u5909\u6570\u3092\u4ee3\u5165\u3057\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u30b5\u30fc\u30d0\u30fc\u5185\u90e8\u306e\u539f\u56e0\u306b\u3088\u308b\u30a8\u30e9\u30fc\u3092\u793a\u3059\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9 500 \u3092\u8fd4\u3059\u305f\u3081\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059: class UselessErrInfo ( ErrInfoBase ): http_status = HTTPStatus . INTERNAL_SERVER_ERROR ... \u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0 \u30a8\u30e9\u30fc\u6642\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\u306f get_headers() \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066\u5b9a\u7fa9\u3067\u304d\u307e\u3059\uff0e\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059: def get_headers ( self ) -> List [ Tuple [ str , str ]]: ... Tuple[str, str] \u306f\u30d8\u30c3\u30c0\u306e\u540d\u524d\u3068\u5024\u306e\u30da\u30a2\u3067\u3042\u308a\uff0c get_headers() \u30e1\u30bd\u30c3\u30c9\u304c\u8fd4\u3059\u3079\u304d\u306f\u305d\u306e\u30da\u30a2\u306e\u30ea\u30b9\u30c8\u3067\u3059\uff0e\u4e00\u4f8b\u3068\u3057\u3066\uff0cBasic \u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067 Authorization \u30d8\u30c3\u30c0\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u9001\u4fe1\u3059\u308b\u30a8\u30e9\u30fc\u3092\u5b9a\u7fa9\u3057\u305f\u3082\u306e\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059: class BasicAuthHeaderNotExistErrInfo ( ErrInfoBase ): http_status = HTTPStatus . UNAUTHORIZED def get_headers ( self ) -> List [ Tuple [ str , str ]]: return [( \"WWW-Authentication\" , 'Basic realm=\"SECRET AREA\"' )] \u8907\u6570\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\u3092\u8ffd\u52a0\u5b9a\u7fa9\u3059\u308b\u5834\u5408\u306f\uff0c\u4e0a\u8a18\u306e\u30ea\u30b9\u30c8\u5185\u306e\u30bf\u30d7\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\uff0e \u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3 \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u5177\u4f53\u7684\u306a\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u3084\u30a8\u30e9\u30fc\u306e\u89e3\u6d88\u65b9\u6cd5\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306b\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u3092\u542b\u3081\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\u306b\u306f\uff0c get_body() \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3057\u307e\u3059\uff0e\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059: def get_body ( self ) -> bytes : ... \u4f8b\u3048\u3070 JSON \u3092 API \u3068\u3057\u3066\u901a\u4fe1\u3092\u884c\u3046 Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5834\u5408\uff0c\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u3092 JSON \u3067\u9001\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u5834\u5408\u4ee5\u4e0b\u306e\u3088\u3046\u306b get_body() \u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059: def get_body ( self ) -> bytes : data = json . dumps ({ \"err_code\" : 4000 , \"message\" : \"The request was inappropriate\" }) return data . encode ( \"utf-8\" ) _content_type_ \u30af\u30e9\u30b9\u30d7\u30ed\u30d1\u30c6\u30a3 \u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u4ee3\u5165\u4e0d\u53ef\u80fd\u306a\u30af\u30e9\u30b9\u5909\u6570\u3067\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u306e Content-Type \u30d8\u30c3\u30c0\u306e\u5024\u3092\u8868\u3057\u307e\u3059\uff0e ErrInfoBase \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f text/plain \u3067\u3059\uff0e\u4e0a\u8a18\u306e\u3088\u3046\u306b\u3082\u3057 JSON \u30c7\u30fc\u30bf\u3092\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u9001\u4fe1\u3059\u308b\u306e\u306a\u3089\uff0c\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3082\u5909\u66f4\u3059\u3079\u304d\u3067\u3059\uff0e\u4ee5\u4e0b\u306f\uff0c\u4e0a\u8a18\u306e JSON \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\u4f8b\u3067\u3059: from bamboo import ErrInfoBase , HTTPStatus , ContentType , MediaTypes from bamboo.util.deco import class_property class MockErrInfo ( ErrInfoBase ): http_status = HTTPStatus . BAD_REQUEST def get_body ( self ) -> bytes : data = json . dumps ({ \"err_code\" : 4000 , \"message\" : \"The request was inappropriate\" }) return data . encode ( \"utf-8\" ) @class_property def _content_type_ ( cls ) -> ContentType : return ContentType ( MediaTypes . json , \"utf-8\" ) \u52d5\u7684\u306a\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u751f\u6210 ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306b\u306f\u3053\u306e\u4ed6\u306b\u3082 __init__ \u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e __init__ \u30e1\u30bd\u30c3\u30c9\u5185\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306f\u5168\u3066 get_headers() \u30e1\u30bd\u30c3\u30c9\u3084 get_body() \u30e1\u30bd\u30c3\u30c9\u5185\u3067\u4f7f\u7528\u3067\u304d\u307e\u3059\uff0e\u3059\u306a\u308f\u3061\uff0c\u3053\u308c\u307e\u3067\u306e\u5b9f\u88c5\u4f8b\u3067\u306f\u9759\u7684\u306a\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u307f\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3057\u305f\u304c\uff0c __init__ \u30e1\u30bd\u30c3\u30c9\u306e\u5b9a\u7fa9\u306b\u3088\u3063\u3066\u52d5\u7684\u306b\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e \u4f8b\u3048\u3070\u5148\u7a0b\u5b9a\u7fa9\u3057\u305f MockErrInfo \u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3066\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u5185\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u52d5\u7684\u306b\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059: class MockErrInfo ( ErrInfoBase ): http_status = HTTPStatus . BAD_REQUEST def __init__ ( self , message : str ) -> None : self . _message = message def get_body ( self ) -> bytes : # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u306b\u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b data = json . dumps ({ \"err_code\" : 4000 , \"message\" : self . _message \"}) return data . encode ( \"utf-8\" ) @class_property def _content_type_ ( cls ) -> ContentType : return ContentType ( MediaTypes . json , \"utf-8\" ) \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u306e\u30a8\u30e9\u30fc\u9001\u4fe1 \u3053\u3053\u307e\u3067\u30a8\u30e9\u30fc\u306e\u5b9a\u7fa9\u65b9\u6cd5\u3092\u8ff0\u3079\u3066\u304d\u307e\u3057\u305f\u304c\uff0c\u5b9a\u7fa9\u3057\u305f ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306f\u6700\u7d42\u7684\u306b\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\uff0c Endpoint.send_err() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u9001\u4fe1\u3055\u308c\u307e\u3059\uff0e\u4ee5\u4e0b\u306f\u5148\u7a0b\u5b9a\u7fa9\u3057\u305f MockErrInfo \u3092\u9001\u4fe1\u3059\u308b\u4f8b\u3067\u3059: # \u306a\u3093\u3089\u304b\u306e\u691c\u8a3c\u3092\u884c\u3046\u95a2\u6570 def is_valid () -> bool : return False class MockEndpoint ( Endpoint ): @data_format ( input = None , output = None ) def do_GET ( self ) -> None : if not is_valid (): self . send_err ( MockErrInfo ( \"Hogehoge Error!!!\" )) # \u30a8\u30e9\u30fc\u3092\u9001\u4fe1\u306e\u3067\u51e6\u7406\u3092\u7d42\u4e86 return # Do something... \u3053\u306e\u307e\u307e\u3067\u3082\u30a8\u30e9\u30fc\u306e\u9001\u4fe1\u306f\u6a5f\u80fd\u3057\u307e\u3059\u304c\uff0c may_occur \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u5229\u7528\u3059\u308b\u3068\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\u9001\u4fe1\u3055\u308c\u3046\u308b\u30a8\u30e9\u30fc\u3092\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059: from bamboo.sticky.http import data_format , may_occur class MockEndpoint ( Endpoint ): @may_occur ( MockErrInfo ) @data_format ( input = None , output = None ) def do_GET ( self ) -> None : if not is_valid (): self . send_err ( MockErrInfo ( \"Hogehoge Error!!!\" )) # \u30a8\u30e9\u30fc\u3092\u9001\u4fe1\u306e\u3067\u51e6\u7406\u3092\u7d42\u4e86 return # Do something...","title":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0"},{"location":"tutorials/error_handling/#_1","text":"\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f bamboo \u3067\u306e\u30a8\u30e9\u30fc\u6642\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u9001\u4fe1\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e","title":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0"},{"location":"tutorials/error_handling/#_2","text":"Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u306e\u30a8\u30e9\u30fc\u767a\u751f\u6642\u306b\u9069\u5207\u306a\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306f\u901a\u5e38\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3068 HTTP \u3068\u3044\u3046\u70b9\u3067\u306f\u5909\u308f\u308a\u3042\u308a\u307e\u305b\u3093\u304c\uff0c\u57fa\u672c\u7684\u306b\u306f\u6c7a\u307e\u3063\u305f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u8fd4\u3055\u308c\u308b\u3079\u304d\u3067\u3059\uff0e\u307e\u305f\uff0c Endpoint \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u30a8\u30e9\u30fc\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3057\u9001\u4fe1\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\u304c\uff0c\u3042\u307e\u308a\u826f\u3044\u65b9\u6cd5\u3068\u306f\u8a00\u3048\u307e\u305b\u3093\uff0e\u306a\u305c\u306a\u3089\uff0c\u30a8\u30e9\u30fc\u306f\u526f\u6b21\u7684\u306a\u51e6\u7406\u306b\u904e\u304e\u305a\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u306b\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u305f\u3081\u306e\u526f\u6b21\u7684\u306a\u51e6\u7406\u304c\u591a\u304f\u5165\u308a\u8fbc\u3080\u3053\u3068\u306b\u3088\u308a\uff0c\u672c\u51e6\u7406\u304c\u308f\u304b\u308a\u306b\u304f\u304f\u306a\u308a\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u53ef\u8aad\u6027\u304c\u4e0b\u304c\u308b\u305f\u3081\u3067\u3059\uff0e bamboo \u3067\u306e\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u9001\u4fe1\u65b9\u6cd5\u306f\u4ee5\u4e0b\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u884c\u3044\u307e\u3059: ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9 Endpoint.send_err() \u30e1\u30bd\u30c3\u30c9\u306b\u5b9a\u7fa9\u3057\u305f ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3059 1 \u306e\u30b9\u30c6\u30c3\u30d7\u306f\u901a\u5e38\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5916\u90e8\u3067\u884c\u3046\u306e\u3067\uff0c\u8907\u6570\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3067\u540c\u4e00\u306e\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u9001\u4fe1\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\uff0e Endpoint.send_err() \u30e1\u30bd\u30c3\u30c9\u306f\u5b9a\u7fa9\u3057\u305f ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d7\u3051\u53d6\u3063\u3066\uff0c ErrInfoBase.get_all_form() \u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u5f97\u3089\u308c\u305f\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u60c5\u5831\u3092\u62bd\u51fa\u3057\u307e\u3059\uff0e\u305d\u306e\u5f8c\uff0c\u305d\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u9001\u4fe1\u3057\u307e\u3059\uff0e \u307e\u305a\u306f ErrInfoBase \u306e\u57fa\u672c\u7684\u306a\u5b9a\u7fa9\u65b9\u6cd5\u3092\u8ff0\u3079\uff0c\u305d\u306e\u5f8c\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u306e\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e","title":"\u6982\u8981"},{"location":"tutorials/error_handling/#errinfobase","text":"\u958b\u767a\u8005\u304c\u5b9a\u7fa9\u3059\u3079\u304d\u30a8\u30e9\u30fc\u306e\u8981\u7d20\u306f\u4e3b\u306b\u6b21\u306e3\u3064\u3067\u3059: \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9 ErrInfoBase.http_status HTTPStatus \u30af\u30e9\u30b9\u306e\u5909\u6570\u304b\u3089\u9078\u629e\u3057\u307e\u3059 \u30c7\u30d5\u30a9\u30eb\u30c8\u306f HTTPStatus.BAD_REQUEST (\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9 400 ) \u3067\u3059 \u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0 ErrInfoBase.get_headers() \u8ffd\u52a0\u3067\u9001\u4fe1\u3057\u305f\u3044\u30d8\u30c3\u30c0\u3092\u5b9a\u7fa9\u3057\u307e\u3059 \u30d8\u30c3\u30c0\u540d\u3068\u5024\u306e2\u8981\u7d20\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7a7a\u306e\u30ea\u30b9\u30c8\u304c\u8fd4\u3055\u308c\u307e\u3059 \u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3 ErrInfoBase.get_body() \u30a8\u30e9\u30fc\u3092\u8868\u3059\u305f\u3081\u306e\u30dc\u30c7\u30a3\u3092\u5b9a\u7fa9\u3057\u307e\u3059 bytes \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059 \u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u7a7a\u306e bytes \u304c\u8fd4\u3055\u308c\u307e\u3059 _content_type_ \u30af\u30e9\u30b9\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u306e Content-Type \u30d8\u30c3\u30c0\u306e\u5024\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059 \u4ee5\u4e0b\u3067\u306f\u3053\u308c\u3089\u306b\u3064\u3044\u3066\u9806\u306b\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e","title":"ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\u65b9\u6cd5"},{"location":"tutorials/error_handling/#_3","text":"\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3059\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u72b6\u614b\u3092\u8868\u3059\u305f\u3081\u306e3\u6841\u306e\u6570\u5b57\u3067\uff0cHTTP \u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3067\u3059\uff0e ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u3067 http_status \u30af\u30e9\u30b9\u5909\u6570\u3092\u4e0a\u66f8\u304d\u3059\u308b\u3053\u3068\u3067\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u304c\uff0c\u5b9f\u969b\u306b\u306f Enum \u30af\u30e9\u30b9\u3067\u3042\u308b bamboo.base.HTTPStatus \u30af\u30e9\u30b9\u306e\u30af\u30e9\u30b9\u5909\u6570\u3092\u4ee3\u5165\u3057\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u30b5\u30fc\u30d0\u30fc\u5185\u90e8\u306e\u539f\u56e0\u306b\u3088\u308b\u30a8\u30e9\u30fc\u3092\u793a\u3059\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9 500 \u3092\u8fd4\u3059\u305f\u3081\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u307e\u3059: class UselessErrInfo ( ErrInfoBase ): http_status = HTTPStatus . INTERNAL_SERVER_ERROR ...","title":"\u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9"},{"location":"tutorials/error_handling/#_4","text":"\u30a8\u30e9\u30fc\u6642\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\u306f get_headers() \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066\u5b9a\u7fa9\u3067\u304d\u307e\u3059\uff0e\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059: def get_headers ( self ) -> List [ Tuple [ str , str ]]: ... Tuple[str, str] \u306f\u30d8\u30c3\u30c0\u306e\u540d\u524d\u3068\u5024\u306e\u30da\u30a2\u3067\u3042\u308a\uff0c get_headers() \u30e1\u30bd\u30c3\u30c9\u304c\u8fd4\u3059\u3079\u304d\u306f\u305d\u306e\u30da\u30a2\u306e\u30ea\u30b9\u30c8\u3067\u3059\uff0e\u4e00\u4f8b\u3068\u3057\u3066\uff0cBasic \u8a8d\u8a3c\u304c\u5fc5\u8981\u306a\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067 Authorization \u30d8\u30c3\u30c0\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u9001\u4fe1\u3059\u308b\u30a8\u30e9\u30fc\u3092\u5b9a\u7fa9\u3057\u305f\u3082\u306e\u3092\u4ee5\u4e0b\u306b\u793a\u3057\u307e\u3059: class BasicAuthHeaderNotExistErrInfo ( ErrInfoBase ): http_status = HTTPStatus . UNAUTHORIZED def get_headers ( self ) -> List [ Tuple [ str , str ]]: return [( \"WWW-Authentication\" , 'Basic realm=\"SECRET AREA\"' )] \u8907\u6570\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\u3092\u8ffd\u52a0\u5b9a\u7fa9\u3059\u308b\u5834\u5408\u306f\uff0c\u4e0a\u8a18\u306e\u30ea\u30b9\u30c8\u5185\u306e\u30bf\u30d7\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\uff0e","title":"\u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0"},{"location":"tutorials/error_handling/#_5","text":"\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u5177\u4f53\u7684\u306a\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u3084\u30a8\u30e9\u30fc\u306e\u89e3\u6d88\u65b9\u6cd5\u3092\u8aac\u660e\u3059\u308b\u305f\u3081\u306b\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u3092\u542b\u3081\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u305f\u3081\u306b\u306f\uff0c get_body() \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3057\u307e\u3059\uff0e\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059: def get_body ( self ) -> bytes : ... \u4f8b\u3048\u3070 JSON \u3092 API \u3068\u3057\u3066\u901a\u4fe1\u3092\u884c\u3046 Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5834\u5408\uff0c\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u3092 JSON \u3067\u9001\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u5834\u5408\u4ee5\u4e0b\u306e\u3088\u3046\u306b get_body() \u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059: def get_body ( self ) -> bytes : data = json . dumps ({ \"err_code\" : 4000 , \"message\" : \"The request was inappropriate\" }) return data . encode ( \"utf-8\" )","title":"\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3"},{"location":"tutorials/error_handling/#_content_type_","text":"\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306f\u4ee3\u5165\u4e0d\u53ef\u80fd\u306a\u30af\u30e9\u30b9\u5909\u6570\u3067\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u306e Content-Type \u30d8\u30c3\u30c0\u306e\u5024\u3092\u8868\u3057\u307e\u3059\uff0e ErrInfoBase \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f text/plain \u3067\u3059\uff0e\u4e0a\u8a18\u306e\u3088\u3046\u306b\u3082\u3057 JSON \u30c7\u30fc\u30bf\u3092\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u9001\u4fe1\u3059\u308b\u306e\u306a\u3089\uff0c\u3053\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3082\u5909\u66f4\u3059\u3079\u304d\u3067\u3059\uff0e\u4ee5\u4e0b\u306f\uff0c\u4e0a\u8a18\u306e JSON \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\u4f8b\u3067\u3059: from bamboo import ErrInfoBase , HTTPStatus , ContentType , MediaTypes from bamboo.util.deco import class_property class MockErrInfo ( ErrInfoBase ): http_status = HTTPStatus . BAD_REQUEST def get_body ( self ) -> bytes : data = json . dumps ({ \"err_code\" : 4000 , \"message\" : \"The request was inappropriate\" }) return data . encode ( \"utf-8\" ) @class_property def _content_type_ ( cls ) -> ContentType : return ContentType ( MediaTypes . json , \"utf-8\" )","title":"_content_type_ \u30af\u30e9\u30b9\u30d7\u30ed\u30d1\u30c6\u30a3"},{"location":"tutorials/error_handling/#_6","text":"ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306b\u306f\u3053\u306e\u4ed6\u306b\u3082 __init__ \u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e __init__ \u30e1\u30bd\u30c3\u30c9\u5185\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306f\u5168\u3066 get_headers() \u30e1\u30bd\u30c3\u30c9\u3084 get_body() \u30e1\u30bd\u30c3\u30c9\u5185\u3067\u4f7f\u7528\u3067\u304d\u307e\u3059\uff0e\u3059\u306a\u308f\u3061\uff0c\u3053\u308c\u307e\u3067\u306e\u5b9f\u88c5\u4f8b\u3067\u306f\u9759\u7684\u306a\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u307f\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3057\u305f\u304c\uff0c __init__ \u30e1\u30bd\u30c3\u30c9\u306e\u5b9a\u7fa9\u306b\u3088\u3063\u3066\u52d5\u7684\u306b\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e \u4f8b\u3048\u3070\u5148\u7a0b\u5b9a\u7fa9\u3057\u305f MockErrInfo \u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u3066\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u5185\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u52d5\u7684\u306b\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059: class MockErrInfo ( ErrInfoBase ): http_status = HTTPStatus . BAD_REQUEST def __init__ ( self , message : str ) -> None : self . _message = message def get_body ( self ) -> bytes : # \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u306b\u53d7\u3051\u53d6\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b data = json . dumps ({ \"err_code\" : 4000 , \"message\" : self . _message \"}) return data . encode ( \"utf-8\" ) @class_property def _content_type_ ( cls ) -> ContentType : return ContentType ( MediaTypes . json , \"utf-8\" )","title":"\u52d5\u7684\u306a\u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u751f\u6210"},{"location":"tutorials/error_handling/#_7","text":"\u3053\u3053\u307e\u3067\u30a8\u30e9\u30fc\u306e\u5b9a\u7fa9\u65b9\u6cd5\u3092\u8ff0\u3079\u3066\u304d\u307e\u3057\u305f\u304c\uff0c\u5b9a\u7fa9\u3057\u305f ErrInfoBase \u30b5\u30d6\u30af\u30e9\u30b9\u306f\u6700\u7d42\u7684\u306b\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\uff0c Endpoint.send_err() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u9001\u4fe1\u3055\u308c\u307e\u3059\uff0e\u4ee5\u4e0b\u306f\u5148\u7a0b\u5b9a\u7fa9\u3057\u305f MockErrInfo \u3092\u9001\u4fe1\u3059\u308b\u4f8b\u3067\u3059: # \u306a\u3093\u3089\u304b\u306e\u691c\u8a3c\u3092\u884c\u3046\u95a2\u6570 def is_valid () -> bool : return False class MockEndpoint ( Endpoint ): @data_format ( input = None , output = None ) def do_GET ( self ) -> None : if not is_valid (): self . send_err ( MockErrInfo ( \"Hogehoge Error!!!\" )) # \u30a8\u30e9\u30fc\u3092\u9001\u4fe1\u306e\u3067\u51e6\u7406\u3092\u7d42\u4e86 return # Do something... \u3053\u306e\u307e\u307e\u3067\u3082\u30a8\u30e9\u30fc\u306e\u9001\u4fe1\u306f\u6a5f\u80fd\u3057\u307e\u3059\u304c\uff0c may_occur \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u5229\u7528\u3059\u308b\u3068\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\u9001\u4fe1\u3055\u308c\u3046\u308b\u30a8\u30e9\u30fc\u3092\u660e\u793a\u7684\u306b\u5b9a\u7fa9\u3067\u304d\u307e\u3059: from bamboo.sticky.http import data_format , may_occur class MockEndpoint ( Endpoint ): @may_occur ( MockErrInfo ) @data_format ( input = None , output = None ) def do_GET ( self ) -> None : if not is_valid (): self . send_err ( MockErrInfo ( \"Hogehoge Error!!!\" )) # \u30a8\u30e9\u30fc\u3092\u9001\u4fe1\u306e\u3067\u51e6\u7406\u3092\u7d42\u4e86 return # Do something...","title":"\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u306e\u30a8\u30e9\u30fc\u9001\u4fe1"},{"location":"tutorials/headers/","text":"\u30d8\u30c3\u30c0\u30fc\u306e\u53d6\u6271\u3044 HTTP \u30d8\u30c3\u30c0\u30fc\u306f\u901a\u4fe1\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3068\u3057\u3066\u975e\u5e38\u306b\u91cd\u8981\u306a\u60c5\u5831\u3067\u3059\uff0e bamboo \u3067\u306f HTTP \u30d8\u30c3\u30c0\u30fc\u306b\u5bfe\u3059\u308b\u3044\u304f\u3064\u304b\u306e\u30a2\u30af\u30bb\u30b9\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\uff0e \u4f4e\u6c34\u6e96\u306a API \u307e\u305a\u306f\u4f4e\u6c34\u6e96\u306a API \u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\u3053\u306e\u65b9\u6cd5\u306f\u4f4e\u6c34\u6e96\u3067\u306f\u3042\u308a\u307e\u3059\u304c\uff0c\u305d\u308c\u306f\u3059\u306a\u308f\u3061\u30d8\u30c3\u30c0\u30fc\u306e\u53d6\u6271\u3044\u306b\u5bfe\u3057\u3066\u958b\u767a\u8005\u306e\u6a29\u9650\u304c\u5927\u304d\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u3067 EndpointBase.get_header() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u30d8\u30c3\u30c0\u30fc\u60c5\u5831\u3092 str \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff1a from bamboo import WSGIEndpoint class CustomEndpoint ( WSGIEndpoint ): def do_GET ( self ) -> None : user_agent = self . get_header ( \"User-Agent\" ) # user_agent \u3092\u4f7f\u7528\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u51e6\u7406\u3092\u884c\u3048\u308b if user_agent == \"...\" : ... \u3053\u3053\u3067\uff0c EndpointBase.get_header() \u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3067\u3042\u308b\u30d8\u30c3\u30c0\u30fc\u540d\u306f\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u533a\u5225\u3057\u306a\u3044\u3053\u3068\uff0c\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc _ \u306f\u30cf\u30a4\u30d5\u30f3 - \u3068\u89e3\u91c8\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e \u4e0a\u8a18\u306e API \u306f\u6700\u3082\u4f4e\u6c34\u6e96\u306a\u65b9\u6cd5\u3067\u3042\u308a\uff0c\u305d\u306e\u305f\u3081\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u6700\u3082\u4f4e\u3044\u65b9\u6cd5\u4e00\u3064\u3067\u3059\uff0e\u3057\u304b\u3057\uff0c\u5f8c\u8ff0\u3059\u308b \u5ba3\u8a00\u7684\u306a API \u306b\u6bd4\u3079\u3066\u4e00\u76ee\u3067\u3069\u306e\u3088\u3046\u306a\u30d8\u30c3\u30c0\u30fc\u3092\u5fc5\u8981\u3068\u3057\u3066\u3044\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306a\u306e\u304b\u304c\u308f\u304b\u308a\u306b\u304f\u3044\u3068\u3044\u3046\u30c7\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\uff0e \u5ba3\u8a00\u7684\u306a\u9ad8\u6c34\u6e96 API \u6b21\u306b\u5ba3\u8a00\u7684\u306a API \u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\u3053\u308c\u306f bamboo.sticky \u30e2\u30b8\u30e5\u30fc\u30eb\u306e has_header_of() \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3067\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u3053\u306e\u5ba3\u8a00\u7684\u306a API \u3092\u4f7f\u7528\u3057\u3066\u4e0a\u8a18\u306e\u4f8b\u3068\u7b49\u4fa1\u306a\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\uff1a import typing as t from bamboo import WSGIEndpoint from bamboo.sticky import has_header_of class CustomEndpoint ( WSGIEndpoint ): @has_header_of ( \"User-Agent\" ) def do_GET ( self , user_agent : t : Optional [ str ]) -> None : # user_agent \u3092\u4f7f\u7528\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u51e6\u7406\u3092\u884c\u3048\u308b if user_agent == \"...\" : ... \u4e0a\u8a18\u306e\u4f8b\u3067\u306f \u4f4e\u6c34\u6e96\u306a API \u306e\u4f8b\u306b\u6bd4\u3079\u3066\uff0c has_header_of() \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u306e\u30ed\u30b8\u30c3\u30af\u306b\u95a2\u4e0e\u3059\u308b\u5f15\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3067\u304d\u3066\u3044\u308b\u70b9\u3067\uff0c\u5ba3\u8a00\u7684\u3067\u3042\u308b\u3068\u8a00\u3048\u307e\u3059\uff0e has_header_of() \u30c7\u30b3\u30ec\u30fc\u30bf\u306b\u306f err \u5f15\u6570\u304c\u3042\u308a\uff0c\u3053\u306e\u5f15\u6570\u306f\u30c7\u30d5\u30a9\u30eb\u30c8 None \u3067\u3059\uff0e\u3053\u306e\u3068\u304d has_header_of() \u30c7\u30b3\u30ec\u30fc\u30bf\u306f\uff0c\u3082\u3057\u6307\u5b9a\u3057\u305f\u30d8\u30c3\u30c0\u30fc\u304c\u898b\u3064\u304b\u3089\u306a\u304f\u3066\u3082\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u4e00\u65b9\uff0c\u3053\u306e\u5f15\u6570\u306b ErrInfo \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3068\uff0c\u3082\u3057\u6307\u5b9a\u3057\u305f\u30d8\u30c3\u30c0\u30fc\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\uff0c\u6307\u5b9a\u3057\u305f err \u5f15\u6570\u304c\u4f8b\u5916\u3068\u3057\u3066\u9001\u51fa\u3055\u308c\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f User-Agent \u30d8\u30c3\u30c0\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 UserAgentHeaderNotFoundErrInfo \u3092\u4f8b\u5916\u3068\u3057\u3066\u9001\u51fa\u3057\u307e\u3059\uff1a from bamboo import ErrInfo , HTTPStatus , WSGIEndpoint from bamboo.sticky import has_header_of class UserAgentHeaderNotFoundErrInfo ( ErrInfo ): http_status = HTTPStatus . BAD_REQUEST def get_body ( self ) -> bytes : return b \"Header 'User-Agent' not found.\" class CustomEndpoint ( WSGIEndpoint ): @has_header_of ( \"User-Agent\" , err = UserAgentHeaderNotFoundErrInfo ()) def do_GET ( self , user_agent : str ) -> None : # user_agent \u3092\u4f7f\u7528\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u51e6\u7406\u3092\u884c\u3048\u308b if user_agent == \"...\" : ... \u4e0a\u8a18\u306e\u4f8b\u3067\u306f\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3067\u3042\u308b user_agent \u304c str \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u308b\u3068\u3044\u3046\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e \u4f4e\u6c34\u6e96 API \u3092\u4f7f\u7528\u3057\u3066\u72ec\u81ea\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u5b9f\u88c5\u3059\u308b \u6700\u5f8c\u306b has_header_of() \u306e\u3088\u3046\u306a\u5ba3\u8a00\u7684\u3067\u518d\u5229\u7528\u53ef\u80fd\u306a\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\u3053\u306e\u65b9\u6cd5\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5168\u3066\u5b9a\u7fa9\u3067\u304d\u3066\u3057\u307e\u3046\u307b\u3069\u5f37\u529b\u306a\u65b9\u6cd5\u306a\u306e\u3067\uff0c\u30c7\u30b3\u30ec\u30fc\u30bf\u306e\u5b9f\u884c\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u3064\u3044\u3066\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\uff0e\u4f8b\u3048\u3070\u4eca\u56de\u306e\u5834\u5408\u306f\u30d8\u30c3\u30c0\u30fc\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u8a18\u8ff0\u3057\u305f\u3044\u306e\u3067\uff0c\u5b9a\u7fa9\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u5185\u3067\u306f\u30d8\u30c3\u30c0\u30fc\u306b\u95a2\u3059\u308b\u51e6\u7406\u306e\u307f\u3092\u884c\u3044\u307e\u3059\uff0e \u305d\u308c\u3067\u306f\uff0c\u4ee5\u4e0b\u3067\u306f\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u306e\u30a2\u30af\u30bb\u30b9\u3092\u62d2\u5426\u3059\u308b\u96d1\u306a\u5b9f\u88c5\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u4eca\u56de\u306f User-Agent \u30d8\u30c3\u30c0\u30fc\u306e\u5024\u306e\u5148\u982d\u306b Mozilla \u306e\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\uff0c\u305d\u306e\u30e6\u30fc\u30b6\u30fc\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306f\u30d6\u30e9\u30a6\u30b6\u3067\u3042\u308b\u3068\u5224\u65ad\u3057\u4f8b\u5916\u3092\u9001\u51fa\u3057\u3066\u51e6\u7406\u3092\u4e2d\u65ad\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\uff08\u3053\u3053\u3067\u306f\u7c21\u5358\u306e\u305f\u3081 WSGIEndpoint \u306e\u307f\u306b\u5bfe\u5fdc\u3057\u305f\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff09\uff1a from functools import typing as t from bamboo import ErrInfo , WSGIEndpoint # \u578b\u5909\u6570\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\uff08\u4efb\u610f\uff09 from bamboo.sticky import Callback_WSGI_t class BrowserRequestErrInfo ( ErrInfo ): def get_body ( self ) -> bytes : return b \"Access from browsers are forbidden.\" def pass_except_for_browsers ( callback : Callback_WSGI_t ) -> Callback_WSGI_t : @functools . wraps ( callback ) def response_method ( self : WSGIEndpoint , * args ) -> None : user_agent = self . get_header ( \"User-Agent\" ) if user_agent . startswith ( \"Mozilla\" ): raise BrowserRequestErrInfo () callback ( self , * args ) return response_method \u4e0a\u8a18\u3067\u5b9a\u7fa9\u3057\u305f pass_except_for_browsers() \u30c7\u30b3\u30ec\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a class CustomEndpoint ( WSGIEndpoint ): @pass_except_for_browsers def do_GET ( self ) -> None : ... @pass_except_for_browsers def do_POST ( self ) -> None : ... \u3053\u306e\u3088\u3046\u306b\uff0c\u72ec\u81ea\u306b\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\uff0c\u305d\u308c\u3089\u3092\u7528\u3044\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u30c7\u30b3\u30ec\u30fc\u30c8\u3059\u308b\u3053\u3068\u3067\uff0c\u62e1\u5f35\u6027\u306e\u9ad8\u3044\u5ba3\u8a00\u7684\u306a\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e \u3061\u306a\u307f\u306b\uff0c\u4e0a\u8a18\u306e pass_except_for_browsers() \u30c7\u30b3\u30ec\u30fc\u30bf\u306f has_header_of() \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\uff08\u53b3\u5bc6\u306b\u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\uff09\uff1a from functools import typing as t from bamboo import ErrInfo , WSGIEndpoint from bamboo.sticky import Callback_WSGI_t Decorator_t = t . Callable [[ Callback_WSGI_t ], Callback_WSGI_t ] def pass_except_for_browsers ( err : t . Optional [ ErrInfo ], add_arg : bool = True ) -> Decorator_t : def decorator ( callback : Callback_WSGI_t ) -> Callback_WSGI_t : @functools . wraps ( callback ) @has_header_of ( \"User-Agent\" , err = err ) def response_method ( self : WSGIEndpoint , user_agent : t . Optional [ str ], * args ) -> None : if user_agent . startswith ( \"Mozilla\" ): raise BrowserRequestErrInfo () if add_arg : callback ( self , user_agent , * args ) else : callback ( self , * args ) return response_method return decorator \u4e0a\u8a18\u5b9f\u88c5\u3092\u898b\u308b\u3068\uff0c\u95a2\u6570\u5185\u306b2\u3064\u306e\u95a2\u6570\u304c\u5185\u5305\u3055\u308c\u3066\u304a\u308a\uff0c\u3084\u3084\u8907\u96d1\u306b\u611f\u3058\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u307e\u305a pass_except_for_browsers() \u306f\u53b3\u5bc6\u306b\u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3042\u308a\uff0c\u30c7\u30b3\u30ec\u30fc\u30bf\u5185\u306e\u51e6\u7406\u306b\u5bfe\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u305f\u3081\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff08\u5177\u4f53\u7684\u306b\u306f err \u5f15\u6570\uff0c add_arg \u5f15\u6570\u3092\u5b9a\u7fa9\uff09\uff0e\u6b21\u306b decorator() \u3068\u3044\u3046\u5185\u90e8\u306e\u95a2\u6570\u306f\u305d\u306e\u540d\u306e\u901a\u308a\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u3042\u308a\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u30c7\u30b3\u30ec\u30fc\u30c8\u3057\u307e\u3059\uff0e\u6700\u5f8c\u306b response_method \u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u306b\u3088\u3063\u3066\u62e1\u5f35\u3055\u308c\u305f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308a\uff0c\u30c7\u30b3\u30ec\u30fc\u30c8\u3055\u308c\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u306e\u51e6\u7406\u3092\u884c\u3046\u524d\u306b\uff0c User-Agent \u30d8\u30c3\u30c0\u30fc\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\uff0e \u30d8\u30c3\u30c0\u30fc\u51e6\u7406\u306e\u65b9\u91dd HTTP \u30d8\u30c3\u30c0\u30fc\u306e\u4e2d\u306b\u306f\uff0c\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u304a\u3051\u308b\u88dc\u52a9\u7684\u306a\u5f79\u5272\u3092\u62c5\u3046\u3082\u306e\u3084\uff0c\u5927\u65b9\u306e\u30ed\u30b8\u30c3\u30af\u3092\u6c7a\u5b9a\u3059\u308b\u60c5\u5831\u3068\u3057\u3066\u632f\u308b\u821e\u3046\u3082\u306e\u3082\u3042\u308a\u307e\u3059\uff0e\u30d8\u30c3\u30c0\u30fc\u306b\u95a2\u4fc2\u3059\u308b\u5168\u3066\u306e\u51e6\u7406\u3092\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u5b9f\u88c5\u3057\uff0c\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3092\u96a0\u853d\u3059\u308b\u3053\u3068\u306f\u4e8b\u5b9f\u4e0a\u53ef\u80fd\u3067\u3059\u304c\uff0c\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3092\u5b8c\u5168\u306b\u96a0\u853d\u3059\u308b\u3053\u3068\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u53ef\u8aad\u6027\u3092\u640d\u306a\u3046\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u63a8\u5968\u3055\u308c\u307e\u305b\u3093\uff0e\u63a8\u5968\u3055\u308c\u308b\u30d8\u30c3\u30c0\u30fc\u51e6\u7406\u306e\u65b9\u91dd\u3068\u3057\u3066\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u65b9\u91dd\u304c\u8003\u3048\u3089\u308c\u307e\u3059\uff1a \u5bfe\u8c61\u306e\u30d8\u30c3\u30c0\u30fc\u304c\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306b\u304a\u3044\u3066\u88dc\u52a9\u7684\u306a\u5f79\u5272\u3092\u62c5\u3046\u5834\u5408\uff0c\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u30c7\u30b3\u30ec\u30fc\u30c8\u3059\u308b \u5bfe\u8c61\u306e\u30d8\u30c3\u30c0\u30fc\u304c\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306b\u304a\u3044\u3066\u4e2d\u5fc3\u7684\u306a\u5f79\u5272\u3092\u62c5\u3046\u5834\u5408\uff0c has_header_of() \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u5b9f\u88c5\u3059\u308b \u958b\u767a\u8005\u304c\u6700\u3082\u91cd\u8981\u8996\u3059\u3079\u304d\u3053\u3068\u306f\uff0c \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u898b\u308b\u3060\u3051\u3067\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3068 API \u3092\u540c\u6642\u306b\u628a\u63e1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3069\u3046\u304b \u3067\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u524d\u9805\u3067\u8a18\u8ff0\u3057\u305f class CustomEndpoint ( WSGIEndpoint ): @pass_except_for_browsers def do_GET ( self ) -> None : ... @pass_except_for_browsers def do_POST ( self ) -> None : ... \u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u898b\u3066\uff0c\u958b\u767a\u8005\u304c CustomEndpoint \u306b GET \u307e\u305f\u306f POST \u30e1\u30bd\u30c3\u30c9\u3067\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b\u306e\u306f\u30d6\u30e9\u30a6\u30b6\u4ee5\u5916\u3067\u3042\u308b \u3068\u5224\u65ad\u3067\u304d\u308c\u3070\uff0c\u305d\u308c\u3067\u826f\u3044\u308f\u3051\u3067\u3059\uff0e\u305d\u306e\u3088\u3046\u306a\u72b6\u614b\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u72ec\u81ea\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u5b9f\u88c5\u3059\u308b\u969b\u306b\u30c7\u30b3\u30ec\u30fc\u30bf\u540d\u3067\u305d\u306e\u6319\u52d5\u3092\u8aac\u660e\u51fa\u6765\u308b\u7a0b\u5ea6\u306e\u51e6\u7406\u306e\u307f\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u52b9\u679c\u7684\u3067\u3059\uff0e","title":"\u30d8\u30c3\u30c0\u30fc\u306e\u53d6\u6271\u3044"},{"location":"tutorials/headers/#_1","text":"HTTP \u30d8\u30c3\u30c0\u30fc\u306f\u901a\u4fe1\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3068\u3057\u3066\u975e\u5e38\u306b\u91cd\u8981\u306a\u60c5\u5831\u3067\u3059\uff0e bamboo \u3067\u306f HTTP \u30d8\u30c3\u30c0\u30fc\u306b\u5bfe\u3059\u308b\u3044\u304f\u3064\u304b\u306e\u30a2\u30af\u30bb\u30b9\u3092\u7528\u610f\u3057\u3066\u3044\u307e\u3059\uff0e","title":"\u30d8\u30c3\u30c0\u30fc\u306e\u53d6\u6271\u3044"},{"location":"tutorials/headers/#api","text":"\u307e\u305a\u306f\u4f4e\u6c34\u6e96\u306a API \u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\u3053\u306e\u65b9\u6cd5\u306f\u4f4e\u6c34\u6e96\u3067\u306f\u3042\u308a\u307e\u3059\u304c\uff0c\u305d\u308c\u306f\u3059\u306a\u308f\u3061\u30d8\u30c3\u30c0\u30fc\u306e\u53d6\u6271\u3044\u306b\u5bfe\u3057\u3066\u958b\u767a\u8005\u306e\u6a29\u9650\u304c\u5927\u304d\u3044\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u3067 EndpointBase.get_header() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u30d8\u30c3\u30c0\u30fc\u60c5\u5831\u3092 str \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff1a from bamboo import WSGIEndpoint class CustomEndpoint ( WSGIEndpoint ): def do_GET ( self ) -> None : user_agent = self . get_header ( \"User-Agent\" ) # user_agent \u3092\u4f7f\u7528\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u51e6\u7406\u3092\u884c\u3048\u308b if user_agent == \"...\" : ... \u3053\u3053\u3067\uff0c EndpointBase.get_header() \u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3067\u3042\u308b\u30d8\u30c3\u30c0\u30fc\u540d\u306f\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u533a\u5225\u3057\u306a\u3044\u3053\u3068\uff0c\u30a2\u30f3\u30c0\u30fc\u30d0\u30fc _ \u306f\u30cf\u30a4\u30d5\u30f3 - \u3068\u89e3\u91c8\u3055\u308c\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e \u4e0a\u8a18\u306e API \u306f\u6700\u3082\u4f4e\u6c34\u6e96\u306a\u65b9\u6cd5\u3067\u3042\u308a\uff0c\u305d\u306e\u305f\u3081\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u6700\u3082\u4f4e\u3044\u65b9\u6cd5\u4e00\u3064\u3067\u3059\uff0e\u3057\u304b\u3057\uff0c\u5f8c\u8ff0\u3059\u308b \u5ba3\u8a00\u7684\u306a API \u306b\u6bd4\u3079\u3066\u4e00\u76ee\u3067\u3069\u306e\u3088\u3046\u306a\u30d8\u30c3\u30c0\u30fc\u3092\u5fc5\u8981\u3068\u3057\u3066\u3044\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306a\u306e\u304b\u304c\u308f\u304b\u308a\u306b\u304f\u3044\u3068\u3044\u3046\u30c7\u30e1\u30ea\u30c3\u30c8\u304c\u3042\u308a\u307e\u3059\uff0e","title":"\u4f4e\u6c34\u6e96\u306a API"},{"location":"tutorials/headers/#api_1","text":"\u6b21\u306b\u5ba3\u8a00\u7684\u306a API \u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\u3053\u308c\u306f bamboo.sticky \u30e2\u30b8\u30e5\u30fc\u30eb\u306e has_header_of() \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3067\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u3053\u306e\u5ba3\u8a00\u7684\u306a API \u3092\u4f7f\u7528\u3057\u3066\u4e0a\u8a18\u306e\u4f8b\u3068\u7b49\u4fa1\u306a\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u306b\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\uff1a import typing as t from bamboo import WSGIEndpoint from bamboo.sticky import has_header_of class CustomEndpoint ( WSGIEndpoint ): @has_header_of ( \"User-Agent\" ) def do_GET ( self , user_agent : t : Optional [ str ]) -> None : # user_agent \u3092\u4f7f\u7528\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u51e6\u7406\u3092\u884c\u3048\u308b if user_agent == \"...\" : ... \u4e0a\u8a18\u306e\u4f8b\u3067\u306f \u4f4e\u6c34\u6e96\u306a API \u306e\u4f8b\u306b\u6bd4\u3079\u3066\uff0c has_header_of() \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u306e\u30ed\u30b8\u30c3\u30af\u306b\u95a2\u4e0e\u3059\u308b\u5f15\u6570\u3068\u3057\u3066\u5b9a\u7fa9\u3067\u304d\u3066\u3044\u308b\u70b9\u3067\uff0c\u5ba3\u8a00\u7684\u3067\u3042\u308b\u3068\u8a00\u3048\u307e\u3059\uff0e has_header_of() \u30c7\u30b3\u30ec\u30fc\u30bf\u306b\u306f err \u5f15\u6570\u304c\u3042\u308a\uff0c\u3053\u306e\u5f15\u6570\u306f\u30c7\u30d5\u30a9\u30eb\u30c8 None \u3067\u3059\uff0e\u3053\u306e\u3068\u304d has_header_of() \u30c7\u30b3\u30ec\u30fc\u30bf\u306f\uff0c\u3082\u3057\u6307\u5b9a\u3057\u305f\u30d8\u30c3\u30c0\u30fc\u304c\u898b\u3064\u304b\u3089\u306a\u304f\u3066\u3082\u4f8b\u5916\u3092\u9001\u51fa\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u4e00\u65b9\uff0c\u3053\u306e\u5f15\u6570\u306b ErrInfo \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3068\uff0c\u3082\u3057\u6307\u5b9a\u3057\u305f\u30d8\u30c3\u30c0\u30fc\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\uff0c\u6307\u5b9a\u3057\u305f err \u5f15\u6570\u304c\u4f8b\u5916\u3068\u3057\u3066\u9001\u51fa\u3055\u308c\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f User-Agent \u30d8\u30c3\u30c0\u30fc\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408 UserAgentHeaderNotFoundErrInfo \u3092\u4f8b\u5916\u3068\u3057\u3066\u9001\u51fa\u3057\u307e\u3059\uff1a from bamboo import ErrInfo , HTTPStatus , WSGIEndpoint from bamboo.sticky import has_header_of class UserAgentHeaderNotFoundErrInfo ( ErrInfo ): http_status = HTTPStatus . BAD_REQUEST def get_body ( self ) -> bytes : return b \"Header 'User-Agent' not found.\" class CustomEndpoint ( WSGIEndpoint ): @has_header_of ( \"User-Agent\" , err = UserAgentHeaderNotFoundErrInfo ()) def do_GET ( self , user_agent : str ) -> None : # user_agent \u3092\u4f7f\u7528\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u51e6\u7406\u3092\u884c\u3048\u308b if user_agent == \"...\" : ... \u4e0a\u8a18\u306e\u4f8b\u3067\u306f\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3067\u3042\u308b user_agent \u304c str \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u308b\u3068\u3044\u3046\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e","title":"\u5ba3\u8a00\u7684\u306a\u9ad8\u6c34\u6e96 API"},{"location":"tutorials/headers/#api_2","text":"\u6700\u5f8c\u306b has_header_of() \u306e\u3088\u3046\u306a\u5ba3\u8a00\u7684\u3067\u518d\u5229\u7528\u53ef\u80fd\u306a\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\u3053\u306e\u65b9\u6cd5\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5168\u3066\u5b9a\u7fa9\u3067\u304d\u3066\u3057\u307e\u3046\u307b\u3069\u5f37\u529b\u306a\u65b9\u6cd5\u306a\u306e\u3067\uff0c\u30c7\u30b3\u30ec\u30fc\u30bf\u306e\u5b9f\u884c\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u3064\u3044\u3066\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\uff0e\u4f8b\u3048\u3070\u4eca\u56de\u306e\u5834\u5408\u306f\u30d8\u30c3\u30c0\u30fc\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u8a18\u8ff0\u3057\u305f\u3044\u306e\u3067\uff0c\u5b9a\u7fa9\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u5185\u3067\u306f\u30d8\u30c3\u30c0\u30fc\u306b\u95a2\u3059\u308b\u51e6\u7406\u306e\u307f\u3092\u884c\u3044\u307e\u3059\uff0e \u305d\u308c\u3067\u306f\uff0c\u4ee5\u4e0b\u3067\u306f\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u306e\u30a2\u30af\u30bb\u30b9\u3092\u62d2\u5426\u3059\u308b\u96d1\u306a\u5b9f\u88c5\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u4eca\u56de\u306f User-Agent \u30d8\u30c3\u30c0\u30fc\u306e\u5024\u306e\u5148\u982d\u306b Mozilla \u306e\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\uff0c\u305d\u306e\u30e6\u30fc\u30b6\u30fc\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u306f\u30d6\u30e9\u30a6\u30b6\u3067\u3042\u308b\u3068\u5224\u65ad\u3057\u4f8b\u5916\u3092\u9001\u51fa\u3057\u3066\u51e6\u7406\u3092\u4e2d\u65ad\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\uff08\u3053\u3053\u3067\u306f\u7c21\u5358\u306e\u305f\u3081 WSGIEndpoint \u306e\u307f\u306b\u5bfe\u5fdc\u3057\u305f\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff09\uff1a from functools import typing as t from bamboo import ErrInfo , WSGIEndpoint # \u578b\u5909\u6570\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\uff08\u4efb\u610f\uff09 from bamboo.sticky import Callback_WSGI_t class BrowserRequestErrInfo ( ErrInfo ): def get_body ( self ) -> bytes : return b \"Access from browsers are forbidden.\" def pass_except_for_browsers ( callback : Callback_WSGI_t ) -> Callback_WSGI_t : @functools . wraps ( callback ) def response_method ( self : WSGIEndpoint , * args ) -> None : user_agent = self . get_header ( \"User-Agent\" ) if user_agent . startswith ( \"Mozilla\" ): raise BrowserRequestErrInfo () callback ( self , * args ) return response_method \u4e0a\u8a18\u3067\u5b9a\u7fa9\u3057\u305f pass_except_for_browsers() \u30c7\u30b3\u30ec\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u4f7f\u7528\u3067\u304d\u307e\u3059\uff1a class CustomEndpoint ( WSGIEndpoint ): @pass_except_for_browsers def do_GET ( self ) -> None : ... @pass_except_for_browsers def do_POST ( self ) -> None : ... \u3053\u306e\u3088\u3046\u306b\uff0c\u72ec\u81ea\u306b\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u5b9a\u7fa9\u3057\u3066\uff0c\u305d\u308c\u3089\u3092\u7528\u3044\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u30c7\u30b3\u30ec\u30fc\u30c8\u3059\u308b\u3053\u3068\u3067\uff0c\u62e1\u5f35\u6027\u306e\u9ad8\u3044\u5ba3\u8a00\u7684\u306a\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e \u3061\u306a\u307f\u306b\uff0c\u4e0a\u8a18\u306e pass_except_for_browsers() \u30c7\u30b3\u30ec\u30fc\u30bf\u306f has_header_of() \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\uff08\u53b3\u5bc6\u306b\u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\uff09\uff1a from functools import typing as t from bamboo import ErrInfo , WSGIEndpoint from bamboo.sticky import Callback_WSGI_t Decorator_t = t . Callable [[ Callback_WSGI_t ], Callback_WSGI_t ] def pass_except_for_browsers ( err : t . Optional [ ErrInfo ], add_arg : bool = True ) -> Decorator_t : def decorator ( callback : Callback_WSGI_t ) -> Callback_WSGI_t : @functools . wraps ( callback ) @has_header_of ( \"User-Agent\" , err = err ) def response_method ( self : WSGIEndpoint , user_agent : t . Optional [ str ], * args ) -> None : if user_agent . startswith ( \"Mozilla\" ): raise BrowserRequestErrInfo () if add_arg : callback ( self , user_agent , * args ) else : callback ( self , * args ) return response_method return decorator \u4e0a\u8a18\u5b9f\u88c5\u3092\u898b\u308b\u3068\uff0c\u95a2\u6570\u5185\u306b2\u3064\u306e\u95a2\u6570\u304c\u5185\u5305\u3055\u308c\u3066\u304a\u308a\uff0c\u3084\u3084\u8907\u96d1\u306b\u611f\u3058\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u307e\u305a pass_except_for_browsers() \u306f\u53b3\u5bc6\u306b\u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3042\u308a\uff0c\u30c7\u30b3\u30ec\u30fc\u30bf\u5185\u306e\u51e6\u7406\u306b\u5bfe\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u305f\u3081\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff08\u5177\u4f53\u7684\u306b\u306f err \u5f15\u6570\uff0c add_arg \u5f15\u6570\u3092\u5b9a\u7fa9\uff09\uff0e\u6b21\u306b decorator() \u3068\u3044\u3046\u5185\u90e8\u306e\u95a2\u6570\u306f\u305d\u306e\u540d\u306e\u901a\u308a\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u3042\u308a\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u30c7\u30b3\u30ec\u30fc\u30c8\u3057\u307e\u3059\uff0e\u6700\u5f8c\u306b response_method \u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u306b\u3088\u3063\u3066\u62e1\u5f35\u3055\u308c\u305f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308a\uff0c\u30c7\u30b3\u30ec\u30fc\u30c8\u3055\u308c\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u306e\u51e6\u7406\u3092\u884c\u3046\u524d\u306b\uff0c User-Agent \u30d8\u30c3\u30c0\u30fc\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\uff0e","title":"\u4f4e\u6c34\u6e96 API \u3092\u4f7f\u7528\u3057\u3066\u72ec\u81ea\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u5b9f\u88c5\u3059\u308b"},{"location":"tutorials/headers/#_2","text":"HTTP \u30d8\u30c3\u30c0\u30fc\u306e\u4e2d\u306b\u306f\uff0c\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u304a\u3051\u308b\u88dc\u52a9\u7684\u306a\u5f79\u5272\u3092\u62c5\u3046\u3082\u306e\u3084\uff0c\u5927\u65b9\u306e\u30ed\u30b8\u30c3\u30af\u3092\u6c7a\u5b9a\u3059\u308b\u60c5\u5831\u3068\u3057\u3066\u632f\u308b\u821e\u3046\u3082\u306e\u3082\u3042\u308a\u307e\u3059\uff0e\u30d8\u30c3\u30c0\u30fc\u306b\u95a2\u4fc2\u3059\u308b\u5168\u3066\u306e\u51e6\u7406\u3092\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u5b9f\u88c5\u3057\uff0c\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3092\u96a0\u853d\u3059\u308b\u3053\u3068\u306f\u4e8b\u5b9f\u4e0a\u53ef\u80fd\u3067\u3059\u304c\uff0c\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3092\u5b8c\u5168\u306b\u96a0\u853d\u3059\u308b\u3053\u3068\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u53ef\u8aad\u6027\u3092\u640d\u306a\u3046\u53ef\u80fd\u6027\u304c\u3042\u308b\u305f\u3081\u63a8\u5968\u3055\u308c\u307e\u305b\u3093\uff0e\u63a8\u5968\u3055\u308c\u308b\u30d8\u30c3\u30c0\u30fc\u51e6\u7406\u306e\u65b9\u91dd\u3068\u3057\u3066\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u65b9\u91dd\u304c\u8003\u3048\u3089\u308c\u307e\u3059\uff1a \u5bfe\u8c61\u306e\u30d8\u30c3\u30c0\u30fc\u304c\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306b\u304a\u3044\u3066\u88dc\u52a9\u7684\u306a\u5f79\u5272\u3092\u62c5\u3046\u5834\u5408\uff0c\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u30c7\u30b3\u30ec\u30fc\u30c8\u3059\u308b \u5bfe\u8c61\u306e\u30d8\u30c3\u30c0\u30fc\u304c\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306b\u304a\u3044\u3066\u4e2d\u5fc3\u7684\u306a\u5f79\u5272\u3092\u62c5\u3046\u5834\u5408\uff0c has_header_of() \u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3057\u3066\u5b9f\u88c5\u3059\u308b \u958b\u767a\u8005\u304c\u6700\u3082\u91cd\u8981\u8996\u3059\u3079\u304d\u3053\u3068\u306f\uff0c \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u898b\u308b\u3060\u3051\u3067\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3068 API \u3092\u540c\u6642\u306b\u628a\u63e1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3069\u3046\u304b \u3067\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u524d\u9805\u3067\u8a18\u8ff0\u3057\u305f class CustomEndpoint ( WSGIEndpoint ): @pass_except_for_browsers def do_GET ( self ) -> None : ... @pass_except_for_browsers def do_POST ( self ) -> None : ... \u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u898b\u3066\uff0c\u958b\u767a\u8005\u304c CustomEndpoint \u306b GET \u307e\u305f\u306f POST \u30e1\u30bd\u30c3\u30c9\u3067\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b\u306e\u306f\u30d6\u30e9\u30a6\u30b6\u4ee5\u5916\u3067\u3042\u308b \u3068\u5224\u65ad\u3067\u304d\u308c\u3070\uff0c\u305d\u308c\u3067\u826f\u3044\u308f\u3051\u3067\u3059\uff0e\u305d\u306e\u3088\u3046\u306a\u72b6\u614b\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u72ec\u81ea\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u5b9f\u88c5\u3059\u308b\u969b\u306b\u30c7\u30b3\u30ec\u30fc\u30bf\u540d\u3067\u305d\u306e\u6319\u52d5\u3092\u8aac\u660e\u51fa\u6765\u308b\u7a0b\u5ea6\u306e\u51e6\u7406\u306e\u307f\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u52b9\u679c\u7684\u3067\u3059\uff0e","title":"\u30d8\u30c3\u30c0\u30fc\u51e6\u7406\u306e\u65b9\u91dd"},{"location":"tutorials/huge_data_transportation/","text":"\u5de8\u5927\u306a\u30c7\u30fc\u30bf\u306e\u8ee2\u9001","title":"\u5de8\u5927\u306a\u30c7\u30fc\u30bf\u306e\u8ee2\u9001"},{"location":"tutorials/huge_data_transportation/#_1","text":"","title":"\u5de8\u5927\u306a\u30c7\u30fc\u30bf\u306e\u8ee2\u9001"},{"location":"tutorials/make_endpoint_component/","text":"\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u62e1\u5f35 bamboo \u306b\u304a\u3044\u3066\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\uff0c\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u9069\u5207\u306a\u51e6\u7406\u3092\u884c\u3044\uff0c\u305d\u306e\u7d50\u679c\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u8fd4\u3059\u3088\u3046\u306a\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3067\u3059\uff0e\u3053\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u30d7\u30ed\u30c8\u30b3\u30eb\u3084\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3067\u5b9f\u88c5\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u306f\u65e2\u306b\u8ff0\u3079\u307e\u3057\u305f\u304c\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u30af\u30e9\u30b9\u3067\u3042\u308b\u3068\u3044\u3046\u7279\u6027\u3092\u6d3b\u304b\u3057\u305f\u5b9f\u88c5\u3092\u3059\u308b\u3053\u3068\u3067\uff0c\u958b\u767a\u52b9\u7387\u306f\u9ad8\u307e\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\uff0c\u3088\u308a\u67d4\u8edf\u306a\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9f\u88c5\u306e\u305f\u3081\u306b\u5fc5\u8981\u306a setup() \u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u30af\u30e9\u30b9\u3067\u3042\u308b\u3068\u3044\u3046\u5074\u9762\u3092\u6d3b\u304b\u3057\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u62e1\u5f35\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8ff0\u3079\u307e\u3059\uff0e \u7528\u8a9e\u306e\u78ba\u8a8d \u65e2\u306b\u524d\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u307e\u3067\u3067\u51fa\u3066\u304d\u305f\u7528\u8a9e\u3067\u306f\u3042\u308a\u307e\u3059\u304c\uff0c\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3082\u983b\u7e41\u306b\u7528\u3044\u308b bamboo \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u7279\u6709\u306e\u7528\u8a9e\u306b\u3064\u3044\u3066\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3059\uff0e \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8 \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u308b\u5834\u6240\u3068\u3044\u3046\u6982\u5ff5\u3092\u30e2\u30c7\u30eb\u5316\u3057\u305f\u3082\u306e\u3067\u3059\uff0e\u305d\u306e\u5834\u6240\u306e\u4f4f\u6240\u304c URI \u306b\u76f8\u5f53\u3057\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5185\u3067\u56fa\u6709\u306e URI \u30d1\u30bf\u30fc\u30f3\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0e\u307e\u305f\uff0c(\u7279\u306b HTTP \u306e\u5834\u5408) \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064\u3053\u3068\u304c\u51fa\u6765\u308b\uff0e \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f1\u3064\u4ee5\u4e0a\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u6301\u3061\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u305d\u306e URI \u3092\u3082\u3068\u306b\u9069\u5207\u306a\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3078\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\uff0e\u307e\u305f\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306f WSGI \u3084 ASGI \u306a\u3069\u306e Python \u306e Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u5b9f\u88c5\u3055\u308c\u3066\u304a\u308a\uff0c\u305d\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u6cbf\u3063\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u51e6\u7406\u304c\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\uff0e \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9 \u7279\u5b9a\u306e HTTP \u30e1\u30bd\u30c3\u30c9\u304c\u6307\u5b9a\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3067\u3059\uff0e\u5404 HTTP \u30e1\u30bd\u30c3\u30c9 ( GET \u3084 POST ) \u306b\u5bfe\u5fdc\u3059\u308b\u547d\u540d\u898f\u5247 ( do_GET() \u3084 do_POST() ) \u3092\u6301\u3063\u3066\u3044\u307e\u3059\uff0e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\uff0c\u5bfe\u5fdc\u3059\u308b HTTP \u30e1\u30bd\u30c3\u30c9\u3092\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e setup() \u30e1\u30bd\u30c3\u30c9 \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306b\u306f setup() \u3068\u3044\u3046\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\uff0e setup() \u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u751f\u6210\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\uff0e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u3066\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f URI \u306b\u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u3092\u898b\u3064\u3051\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u51e6\u7406\u3092\u884c\u3044\u307e\u3059: URI \u306b\u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b \u751f\u6210\u3055\u308c\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e setup \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059 \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059 \u3064\u307e\u308a\uff0c setup() \u306f do_GET() \u3084 do_POST() \u306e\u3088\u3046\u306a\u5b9f\u969b\u306e\u51e6\u7406\u3092\u884c\u3046\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u524d\u306b\u5b9f\u884c\u3055\u308c\u308b\u95a2\u6570\u3067\u3059\uff0e setup() \u306e\u5b9f\u88c5\u306f\u4efb\u610f\u3067\u3042\u308a\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\uff0e\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e __init__() \u306e\u4ee3\u308f\u308a\u3068\u306a\u308b\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308a\uff0c\u540d\u524d\u306e\u901a\u308a\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u524d\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u306e\u3082\u306e\u3067\u3059\uff0e setup() \u306e\u4f8b \u305d\u308c\u3067\u306f\u7c21\u5358\u306a\u4f8b\u3092\u6319\u3052\u3066 setup() \u306e\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u307e\u3059\uff0e\u307e\u305a\u306f\u4ee5\u4e0b\u306e\u4f8b\u3092\u898b\u3066\u304f\u3060\u3055\u3044: app = WSGIApp () @app . route ( \"mock\" ) class MockEndpoint ( WSGIEndpoint ): # \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u4f55\u3089\u304b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 db \u3092\u4eee\u5b9a def setup ( self , db ) -> None : # \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3068\u3057\u3066\u4ee3\u5165 self . db = db def do_GET ( self ) -> None : # setup() \u5f8c\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u306e\u3067 self.db \u306b\u30a2\u30af\u30bb\u30b9\u53ef\u80fd models = self . db . select () \u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u51e6\u7406\u6642\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u4eee\u5b9a\u3057\u307e\u3057\u305f\uff0e\u305d\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u306f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u6271\u3046\u305f\u3081\u306e\u4f55\u3089\u304b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5fc5\u8981\u306b\u306a\u308b\u3067\u3057\u3087\u3046\uff0e\u305d\u308c\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u6642\u306b\u5f15\u6570\u3067\u53d7\u3051\u53d6\u308a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3068\u3057\u3066\u304a\u3044\u3066\uff0c\u305d\u306e\u5f8c\u5b9f\u884c\u3055\u308c\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9 (\u3053\u3053\u3067\u306f do_GET() ) \u3067\u53c2\u7167\u3057\u3066\u3044\u307e\u3059\uff0e\u305f\u3060\uff0c\u3053\u308c\u3060\u3051\u3067\u306f\u5b9f\u969b\u306b setup() \u306e\u5f15\u6570\u306e db \u306b\u4f55\u304c\u6e21\u3055\u308c\u308b\u306e\u304b\u306f\u6c7a\u307e\u3063\u3066\u3044\u307e\u305b\u3093\uff0e\u305d\u308c\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e set_parcel() \u3092\u4f7f\u7528\u3057\u307e\u3059: # \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 db \u3092 App \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u7d4c\u7531\u3067\u6e21\u3059 # \u3053\u306e\u51e6\u7406\u3092\u3059\u308b\u3053\u3068\u3067 db \u304c MockEndpoint \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e setup() \u5b9f\u884c\u6642\u306b\u6e21\u3055\u308c\u308b app . set_parcel ( MockEndpoint , db ) \u3053\u308c\u306b\u3088\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 app \u306f MockEndpoint \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u5f8c\u306e setup() \u306e\u5b9f\u884c\u6642\u306b db \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u307e\u3059\uff0e Tip bamboo \u3067\u306f setup() \u306e\u5f15\u6570\u306e\u3053\u3068\u3092 parcel \u3068\u547c\u3093\u3067\u3044\u307e\u3059\uff0e parcel \u306e\u5b9f\u4f53\u306f\u5358\u306a\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30bf\u30d7\u30eb\u306b\u904e\u304e\u307e\u305b\u3093\u304c\uff0c parcel \u306f set_parcel() \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u305f\u5f8c\uff0c\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u307e\u3067\u5b58\u7d9a\u3057\u307e\u3059\uff0e\u3053\u308c\u306f parcel \u306f\u5b9f\u969b\u306b\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u306a\u304f\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306e\u540d\u524d\u7a7a\u9593\u4e0b\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u8d77\u56e0\u3057\u307e\u3059\uff0e \u518d\u5229\u7528\u53ef\u80fd\u6027\u3092\u9ad8\u3081\u308b\u305f\u3081\u306e setup() \u4e0a\u306e\u4f8b\u3067\u306f\u56de\u308a\u304f\u3069\u3044\u65b9\u6cd5\u3067 db \u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e setup() \u306b\u6e21\u3057\u3066\u3044\u307e\u3059\uff0e\u4e0a\u8a18\u306e\u4f8b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u3066\u3082\u540c\u7b49\u306e\u52b9\u679c\u304c\u5f97\u3089\u308c\u307e\u3059: app = WSGIApp () @app . route ( \"mock\" ) class MockEndpoint ( WSGIEndpoint ): def do_GET ( self ): models = db . select () \u5f8c\u8005\u306e\u4f8b\u306e\u65b9\u304c\u306f\u308b\u304b\u306b\u7c21\u6f54\u306b\u898b\u3048\u307e\u3059\u304c\uff0c1\u3064\u6b20\u70b9\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u308c\u306f\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u5185\u90e8\u3067 db \u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u660e\u793a\u7684\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u70b9\u3067\u3059\uff0e\u3053\u308c\u306b\u3088\u3063\u3066\uff0c MockEndpoint \u3068\u3044\u3046\u30af\u30e9\u30b9\u306f db \u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u76f4\u63a5\u7684\u306b\u4f9d\u5b58\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u305d\u308c\u306b\u5bfe\u3057 setup() \u3092\u4f7f\u7528\u3057\u305f\u4f8b\u3067\u306f\uff0c db \u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\u3053\u3068\u3067\uff0c MockEndpoint \u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u76f4\u63a5\u7684\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e \u3053\u306e\u3088\u3046\u306a\u6027\u8cea\u306f\u7279\u306b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u3092\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u5316\u3057\uff0c\u518d\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u306b\u6709\u7528\u3067\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u3055\u304d\u307b\u3069\u306e MockEndpoint \u3092 mocklib \u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u307e\u3068\u3081\u305f\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066 MockEndpoint \u3092\u518d\u5229\u7528\u3067\u304d\u307e\u3059: from bamboo import WSGIApp from mocklib import MockEndpoint app = WSGIApp () app . route ( \"mymock\" , MockEndpoint ) # mydb \u3068\u3044\u3046\u5225\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u7528\u3059\u308b app . set_parcel ( MockEndpoint , mydb ) \u72b6\u614b\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e setup() \u307e\u305a\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\u307e\u305a\u3055\u304d\u307b\u3069\u8ff0\u3079\u305f\u3088\u3046\u306b\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u3042\u308b\u305f\u3073\u306b\u751f\u6210\u3055\u308c\u307e\u3059\uff0e\u307e\u305f\uff0c\u751f\u6210\u3055\u308c\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u51e6\u7406\u304c\u7d42\u4e86\u3059\u308b\u3068\u7834\u68c4\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u3057\u305f\u304c\u3063\u3066\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306f\uff0c\u305d\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e URI \u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b URI \u3092\u6301\u3064\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u691c\u77e5\u3055\u308c\u305f\u5730\u70b9\u304b\u3089\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u51e6\u7406\u3055\u308c\u305f\u5730\u70b9\u307e\u3067\u3067\u3059\uff0e \u3072\u3068\u305f\u3073\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u51e6\u7406\u3055\u308c\u308b\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u7834\u68c4\u3055\u308c\u308b\u3053\u3068\u304b\u3089\uff0c\u7279\u306b\u4f55\u3082\u3057\u306a\u3044\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u306f\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306b\u306a\u308a\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u3088\u3063\u3066\u306f\u72b6\u614b\u3092\u4fdd\u6301\u3059\u308b\u3079\u304d\u3082\u306e\u3082\u5b58\u5728\u3057\u307e\u3059\uff0e\u305d\u3053\u3067\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u72b6\u614b\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306b\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3088\u308a\u751f\u5b58\u671f\u9593\u306e\u9577\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u3067\u53c2\u7167\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e setup() \u306f\u305d\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u6709\u7528\u3067\u3059\uff0e\u306a\u305c\u306a\u3089\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e set_parcel() \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u305f parcel \u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306b\u3088\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u307e\u3067\u4fdd\u6301\u3055\u308c\u308b\u304b\u3089\u3067\u3059 (\u4e0a\u8a18 Tip \u53c2\u7167) \uff0e\u3064\u307e\u308a\uff0c setup() \u306b\u6e21\u3055\u308c\u308b parcel \u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u958b\u59cb\u6642\u304b\u3089\u7d42\u4e86\u6642\u307e\u3067\u3067\u3042\u308a\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306b\u6bd4\u3079\u3066\u306f\u308b\u304b\u306b\u9577\u3044\u305f\u3081\uff0c parcel \u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u72b6\u614b\u5909\u6570\u3068\u3057\u3066\u306e\u5f79\u5272\u3092\u6301\u3064\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u62e1\u5f35\u4f8b \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u30af\u30e9\u30b9\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u308b\u305f\u3081\uff0c\u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b Python \u306e\u8a00\u8a9e\u4ed5\u69d8\u306b\u5247\u3063\u305f\u5b9f\u88c5\u3092\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u3053\u3053\u3067\u306f\u305d\u306e\u4f8b\u3068\u3057\u3066\uff0c\u7d99\u627f\u3092\u5229\u7528\u3057\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\uff0e \u4f5c\u6210\u3057\u305f\u3044\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\uff0c\u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u4eee\u5b9a\u3057\u307e\u3059\uff0e\u305d\u3057\u3066\u305d\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b\u305f\u3081\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 db_controller \u3068\u540d\u4ed8\u3051\uff0c\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u4f55\u3089\u304b\u306e\u5f62\u3067\u7528\u610f\u3067\u304d\u308b\u3082\u306e\u3068\u3057\u307e\u3057\u3087\u3046\uff0e\u3053\u306e\u3088\u3046\u306a\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u5185\u90e8\u3067\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\uff0c\u305d\u306e\u5185\u90e8\u30c7\u30fc\u30bf\u306b\u3088\u3063\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u7d50\u679c\u306f\u5909\u5316\u3059\u308b\u305f\u3081\uff0c\u660e\u3089\u304b\u306b\u72b6\u614b\u3092\u6301\u3061\u307e\u3059\uff0e\u305d\u306e\u72b6\u614b\u3092\u3082\u305f\u3089\u3059\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3044\u307e db_controller \u3067\u3042\u308a\uff0c\u3053\u308c\u306f\u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u3092\u53c2\u7167\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u5168\u3066\u306b\u3064\u3044\u3066\u306e\u72b6\u614b\u5909\u6570\u306b\u306a\u308a\u3048\u307e\u3059\uff0e\u305d\u3053\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u57fa\u5e95\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3068\uff0c\u305d\u306e\u3088\u3046\u306a\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u305f\u3061\u306e\u5b9f\u88c5\u3092\u7c21\u7565\u5316\u51fa\u6765\u307e\u3059: class UserDataEndpointBase ( WSGIEndpoint ): def setup ( self , db_controller ) -> None : self . db_controller = db_controller \u305d\u3057\u3066 db_controller \u3092\u5fc5\u8981\u3068\u3059\u308b\u5168\u3066\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067\u3053\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7d99\u627f\u3057\u307e\u3059: @app . route ( AnyStringLocation (), \"images\" ) class UserImagesEndpoint ( UserDataEndpointBase ): @basic_auth () def do_GET ( self , user_id : str , pw : str ) -> None : # \u8a8d\u8a3c\u51e6\u7406\u3092\u884c\u3046 flag = self . db_controller . authenticate ( user_id , pw ) # \u305d\u306e\u4ed6\u306e\u51e6\u7406 ... \u3053\u306e\u3088\u3046\u306b\u4f5c\u6210\u3055\u308c\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306b\u7528\u610f\u3057\u305f db_controller \u3092\u30bb\u30c3\u30c8\u3059\u308b\u306b\u306f\u524d\u8ff0\u3057\u305f\u3088\u3046\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e set_parcel() \u3092\u4f7f\u7528\u3057\u307e\u3059: app . set_parcel ( UserImagesEndpoint , db_controller )","title":"\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u62e1\u5f35"},{"location":"tutorials/make_endpoint_component/#_1","text":"bamboo \u306b\u304a\u3044\u3066\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\uff0c\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u9069\u5207\u306a\u51e6\u7406\u3092\u884c\u3044\uff0c\u305d\u306e\u7d50\u679c\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u8fd4\u3059\u3088\u3046\u306a\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u3067\u3059\uff0e\u3053\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u30d7\u30ed\u30c8\u30b3\u30eb\u3084\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3067\u5b9f\u88c5\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u306f\u65e2\u306b\u8ff0\u3079\u307e\u3057\u305f\u304c\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u30af\u30e9\u30b9\u3067\u3042\u308b\u3068\u3044\u3046\u7279\u6027\u3092\u6d3b\u304b\u3057\u305f\u5b9f\u88c5\u3092\u3059\u308b\u3053\u3068\u3067\uff0c\u958b\u767a\u52b9\u7387\u306f\u9ad8\u307e\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\uff0c\u3088\u308a\u67d4\u8edf\u306a\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9f\u88c5\u306e\u305f\u3081\u306b\u5fc5\u8981\u306a setup() \u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u30af\u30e9\u30b9\u3067\u3042\u308b\u3068\u3044\u3046\u5074\u9762\u3092\u6d3b\u304b\u3057\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u62e1\u5f35\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8ff0\u3079\u307e\u3059\uff0e","title":"\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u62e1\u5f35"},{"location":"tutorials/make_endpoint_component/#_2","text":"\u65e2\u306b\u524d\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u307e\u3067\u3067\u51fa\u3066\u304d\u305f\u7528\u8a9e\u3067\u306f\u3042\u308a\u307e\u3059\u304c\uff0c\u672c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u3082\u983b\u7e41\u306b\u7528\u3044\u308b bamboo \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u7279\u6709\u306e\u7528\u8a9e\u306b\u3064\u3044\u3066\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3059\uff0e","title":"\u7528\u8a9e\u306e\u78ba\u8a8d"},{"location":"tutorials/make_endpoint_component/#_3","text":"\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u4ed8\u3051\u308b\u5834\u6240\u3068\u3044\u3046\u6982\u5ff5\u3092\u30e2\u30c7\u30eb\u5316\u3057\u305f\u3082\u306e\u3067\u3059\uff0e\u305d\u306e\u5834\u6240\u306e\u4f4f\u6240\u304c URI \u306b\u76f8\u5f53\u3057\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5185\u3067\u56fa\u6709\u306e URI \u30d1\u30bf\u30fc\u30f3\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0e\u307e\u305f\uff0c(\u7279\u306b HTTP \u306e\u5834\u5408) \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064\u3053\u3068\u304c\u51fa\u6765\u308b\uff0e","title":"\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8"},{"location":"tutorials/make_endpoint_component/#_4","text":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f1\u3064\u4ee5\u4e0a\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u6301\u3061\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u305d\u306e URI \u3092\u3082\u3068\u306b\u9069\u5207\u306a\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3078\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\uff0e\u307e\u305f\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306f WSGI \u3084 ASGI \u306a\u3069\u306e Python \u306e Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u304c\u5b9f\u88c5\u3055\u308c\u3066\u304a\u308a\uff0c\u305d\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u6cbf\u3063\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u51e6\u7406\u304c\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3059\uff0e","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3"},{"location":"tutorials/make_endpoint_component/#_5","text":"\u7279\u5b9a\u306e HTTP \u30e1\u30bd\u30c3\u30c9\u304c\u6307\u5b9a\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3067\u3059\uff0e\u5404 HTTP \u30e1\u30bd\u30c3\u30c9 ( GET \u3084 POST ) \u306b\u5bfe\u5fdc\u3059\u308b\u547d\u540d\u898f\u5247 ( do_GET() \u3084 do_POST() ) \u3092\u6301\u3063\u3066\u3044\u307e\u3059\uff0e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\uff0c\u5bfe\u5fdc\u3059\u308b HTTP \u30e1\u30bd\u30c3\u30c9\u3092\u51e6\u7406\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e","title":"\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9"},{"location":"tutorials/make_endpoint_component/#setup","text":"\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306b\u306f setup() \u3068\u3044\u3046\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\uff0e setup() \u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u751f\u6210\u3055\u308c\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\uff0e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u3066\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f URI \u306b\u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u3092\u898b\u3064\u3051\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u51e6\u7406\u3092\u884c\u3044\u307e\u3059: URI \u306b\u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b \u751f\u6210\u3055\u308c\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e setup \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059 \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059 \u3064\u307e\u308a\uff0c setup() \u306f do_GET() \u3084 do_POST() \u306e\u3088\u3046\u306a\u5b9f\u969b\u306e\u51e6\u7406\u3092\u884c\u3046\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u524d\u306b\u5b9f\u884c\u3055\u308c\u308b\u95a2\u6570\u3067\u3059\uff0e setup() \u306e\u5b9f\u88c5\u306f\u4efb\u610f\u3067\u3042\u308a\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u4f55\u3082\u3057\u307e\u305b\u3093\uff0e\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e __init__() \u306e\u4ee3\u308f\u308a\u3068\u306a\u308b\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308a\uff0c\u540d\u524d\u306e\u901a\u308a\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u524d\u51e6\u7406\u3092\u884c\u3046\u305f\u3081\u306e\u3082\u306e\u3067\u3059\uff0e","title":"setup() \u30e1\u30bd\u30c3\u30c9"},{"location":"tutorials/make_endpoint_component/#setup_1","text":"\u305d\u308c\u3067\u306f\u7c21\u5358\u306a\u4f8b\u3092\u6319\u3052\u3066 setup() \u306e\u4f7f\u3044\u65b9\u3092\u8aac\u660e\u3057\u307e\u3059\uff0e\u307e\u305a\u306f\u4ee5\u4e0b\u306e\u4f8b\u3092\u898b\u3066\u304f\u3060\u3055\u3044: app = WSGIApp () @app . route ( \"mock\" ) class MockEndpoint ( WSGIEndpoint ): # \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u305f\u3081\u306e\u4f55\u3089\u304b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 db \u3092\u4eee\u5b9a def setup ( self , db ) -> None : # \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3068\u3057\u3066\u4ee3\u5165 self . db = db def do_GET ( self ) -> None : # setup() \u5f8c\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u306e\u3067 self.db \u306b\u30a2\u30af\u30bb\u30b9\u53ef\u80fd models = self . db . select () \u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u51e6\u7406\u6642\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u4eee\u5b9a\u3057\u307e\u3057\u305f\uff0e\u305d\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u306f\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u6271\u3046\u305f\u3081\u306e\u4f55\u3089\u304b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5fc5\u8981\u306b\u306a\u308b\u3067\u3057\u3087\u3046\uff0e\u305d\u308c\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u6642\u306b\u5f15\u6570\u3067\u53d7\u3051\u53d6\u308a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3068\u3057\u3066\u304a\u3044\u3066\uff0c\u305d\u306e\u5f8c\u5b9f\u884c\u3055\u308c\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9 (\u3053\u3053\u3067\u306f do_GET() ) \u3067\u53c2\u7167\u3057\u3066\u3044\u307e\u3059\uff0e\u305f\u3060\uff0c\u3053\u308c\u3060\u3051\u3067\u306f\u5b9f\u969b\u306b setup() \u306e\u5f15\u6570\u306e db \u306b\u4f55\u304c\u6e21\u3055\u308c\u308b\u306e\u304b\u306f\u6c7a\u307e\u3063\u3066\u3044\u307e\u305b\u3093\uff0e\u305d\u308c\u3092\u6307\u5b9a\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e set_parcel() \u3092\u4f7f\u7528\u3057\u307e\u3059: # \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 db \u3092 App \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u7d4c\u7531\u3067\u6e21\u3059 # \u3053\u306e\u51e6\u7406\u3092\u3059\u308b\u3053\u3068\u3067 db \u304c MockEndpoint \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e setup() \u5b9f\u884c\u6642\u306b\u6e21\u3055\u308c\u308b app . set_parcel ( MockEndpoint , db ) \u3053\u308c\u306b\u3088\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 app \u306f MockEndpoint \u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u5f8c\u306e setup() \u306e\u5b9f\u884c\u6642\u306b db \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059\u3088\u3046\u306b\u8a2d\u5b9a\u3055\u308c\u307e\u3059\uff0e Tip bamboo \u3067\u306f setup() \u306e\u5f15\u6570\u306e\u3053\u3068\u3092 parcel \u3068\u547c\u3093\u3067\u3044\u307e\u3059\uff0e parcel \u306e\u5b9f\u4f53\u306f\u5358\u306a\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30bf\u30d7\u30eb\u306b\u904e\u304e\u307e\u305b\u3093\u304c\uff0c parcel \u306f set_parcel() \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u305f\u5f8c\uff0c\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u307e\u3067\u5b58\u7d9a\u3057\u307e\u3059\uff0e\u3053\u308c\u306f parcel \u306f\u5b9f\u969b\u306b\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u306a\u304f\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306e\u540d\u524d\u7a7a\u9593\u4e0b\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u8d77\u56e0\u3057\u307e\u3059\uff0e","title":"setup() \u306e\u4f8b"},{"location":"tutorials/make_endpoint_component/#setup_2","text":"\u4e0a\u306e\u4f8b\u3067\u306f\u56de\u308a\u304f\u3069\u3044\u65b9\u6cd5\u3067 db \u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e setup() \u306b\u6e21\u3057\u3066\u3044\u307e\u3059\uff0e\u4e0a\u8a18\u306e\u4f8b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3057\u3066\u3082\u540c\u7b49\u306e\u52b9\u679c\u304c\u5f97\u3089\u308c\u307e\u3059: app = WSGIApp () @app . route ( \"mock\" ) class MockEndpoint ( WSGIEndpoint ): def do_GET ( self ): models = db . select () \u5f8c\u8005\u306e\u4f8b\u306e\u65b9\u304c\u306f\u308b\u304b\u306b\u7c21\u6f54\u306b\u898b\u3048\u307e\u3059\u304c\uff0c1\u3064\u6b20\u70b9\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u308c\u306f\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u5185\u90e8\u3067 db \u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u660e\u793a\u7684\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u70b9\u3067\u3059\uff0e\u3053\u308c\u306b\u3088\u3063\u3066\uff0c MockEndpoint \u3068\u3044\u3046\u30af\u30e9\u30b9\u306f db \u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u76f4\u63a5\u7684\u306b\u4f9d\u5b58\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u305d\u308c\u306b\u5bfe\u3057 setup() \u3092\u4f7f\u7528\u3057\u305f\u4f8b\u3067\u306f\uff0c db \u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\u3053\u3068\u3067\uff0c MockEndpoint \u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u76f4\u63a5\u7684\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff0e \u3053\u306e\u3088\u3046\u306a\u6027\u8cea\u306f\u7279\u306b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u3092\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u5316\u3057\uff0c\u518d\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u306b\u6709\u7528\u3067\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u3055\u304d\u307b\u3069\u306e MockEndpoint \u3092 mocklib \u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u307e\u3068\u3081\u305f\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066 MockEndpoint \u3092\u518d\u5229\u7528\u3067\u304d\u307e\u3059: from bamboo import WSGIApp from mocklib import MockEndpoint app = WSGIApp () app . route ( \"mymock\" , MockEndpoint ) # mydb \u3068\u3044\u3046\u5225\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f7f\u7528\u3059\u308b app . set_parcel ( MockEndpoint , mydb )","title":"\u518d\u5229\u7528\u53ef\u80fd\u6027\u3092\u9ad8\u3081\u308b\u305f\u3081\u306e setup()"},{"location":"tutorials/make_endpoint_component/#setup_3","text":"\u307e\u305a\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\u307e\u305a\u3055\u304d\u307b\u3069\u8ff0\u3079\u305f\u3088\u3046\u306b\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u3042\u308b\u305f\u3073\u306b\u751f\u6210\u3055\u308c\u307e\u3059\uff0e\u307e\u305f\uff0c\u751f\u6210\u3055\u308c\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u51e6\u7406\u304c\u7d42\u4e86\u3059\u308b\u3068\u7834\u68c4\u3055\u308c\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u3057\u305f\u304c\u3063\u3066\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306f\uff0c\u305d\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e URI \u30d1\u30bf\u30fc\u30f3\u306b\u4e00\u81f4\u3059\u308b URI \u3092\u6301\u3064\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u691c\u77e5\u3055\u308c\u305f\u5730\u70b9\u304b\u3089\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u51e6\u7406\u3055\u308c\u305f\u5730\u70b9\u307e\u3067\u3067\u3059\uff0e \u3072\u3068\u305f\u3073\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u51e6\u7406\u3055\u308c\u308b\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u7834\u68c4\u3055\u308c\u308b\u3053\u3068\u304b\u3089\uff0c\u7279\u306b\u4f55\u3082\u3057\u306a\u3044\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u306f\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306b\u306a\u308a\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u3088\u3063\u3066\u306f\u72b6\u614b\u3092\u4fdd\u6301\u3059\u308b\u3079\u304d\u3082\u306e\u3082\u5b58\u5728\u3057\u307e\u3059\uff0e\u305d\u3053\u3067\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u72b6\u614b\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306b\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3088\u308a\u751f\u5b58\u671f\u9593\u306e\u9577\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u3067\u53c2\u7167\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e setup() \u306f\u305d\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u6709\u7528\u3067\u3059\uff0e\u306a\u305c\u306a\u3089\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e set_parcel() \u306b\u3088\u3063\u3066\u8a2d\u5b9a\u3055\u308c\u305f parcel \u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306b\u3088\u3063\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u7d42\u4e86\u6642\u307e\u3067\u4fdd\u6301\u3055\u308c\u308b\u304b\u3089\u3067\u3059 (\u4e0a\u8a18 Tip \u53c2\u7167) \uff0e\u3064\u307e\u308a\uff0c setup() \u306b\u6e21\u3055\u308c\u308b parcel \u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u958b\u59cb\u6642\u304b\u3089\u7d42\u4e86\u6642\u307e\u3067\u3067\u3042\u308a\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306b\u6bd4\u3079\u3066\u306f\u308b\u304b\u306b\u9577\u3044\u305f\u3081\uff0c parcel \u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u72b6\u614b\u5909\u6570\u3068\u3057\u3066\u306e\u5f79\u5272\u3092\u6301\u3064\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e","title":"\u72b6\u614b\u3092\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e setup()"},{"location":"tutorials/make_endpoint_component/#_6","text":"\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u30af\u30e9\u30b9\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u308b\u305f\u3081\uff0c\u30af\u30e9\u30b9\u306b\u5bfe\u3059\u308b Python \u306e\u8a00\u8a9e\u4ed5\u69d8\u306b\u5247\u3063\u305f\u5b9f\u88c5\u3092\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u3053\u3053\u3067\u306f\u305d\u306e\u4f8b\u3068\u3057\u3066\uff0c\u7d99\u627f\u3092\u5229\u7528\u3057\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\uff0e \u4f5c\u6210\u3057\u305f\u3044\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\u306f\uff0c\u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u64cd\u4f5c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u4eee\u5b9a\u3057\u307e\u3059\uff0e\u305d\u3057\u3066\u305d\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3059\u308b\u305f\u3081\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092 db_controller \u3068\u540d\u4ed8\u3051\uff0c\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u4f55\u3089\u304b\u306e\u5f62\u3067\u7528\u610f\u3067\u304d\u308b\u3082\u306e\u3068\u3057\u307e\u3057\u3087\u3046\uff0e\u3053\u306e\u3088\u3046\u306a\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u5185\u90e8\u3067\u30c7\u30fc\u30bf\u3092\u7ba1\u7406\u3057\uff0c\u305d\u306e\u5185\u90e8\u30c7\u30fc\u30bf\u306b\u3088\u3063\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u7d50\u679c\u306f\u5909\u5316\u3059\u308b\u305f\u3081\uff0c\u660e\u3089\u304b\u306b\u72b6\u614b\u3092\u6301\u3061\u307e\u3059\uff0e\u305d\u306e\u72b6\u614b\u3092\u3082\u305f\u3089\u3059\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3044\u307e db_controller \u3067\u3042\u308a\uff0c\u3053\u308c\u306f\u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u3092\u53c2\u7167\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u5168\u3066\u306b\u3064\u3044\u3066\u306e\u72b6\u614b\u5909\u6570\u306b\u306a\u308a\u3048\u307e\u3059\uff0e\u305d\u3053\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u57fa\u5e95\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3068\uff0c\u305d\u306e\u3088\u3046\u306a\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u305f\u3061\u306e\u5b9f\u88c5\u3092\u7c21\u7565\u5316\u51fa\u6765\u307e\u3059: class UserDataEndpointBase ( WSGIEndpoint ): def setup ( self , db_controller ) -> None : self . db_controller = db_controller \u305d\u3057\u3066 db_controller \u3092\u5fc5\u8981\u3068\u3059\u308b\u5168\u3066\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067\u3053\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7d99\u627f\u3057\u307e\u3059: @app . route ( AnyStringLocation (), \"images\" ) class UserImagesEndpoint ( UserDataEndpointBase ): @basic_auth () def do_GET ( self , user_id : str , pw : str ) -> None : # \u8a8d\u8a3c\u51e6\u7406\u3092\u884c\u3046 flag = self . db_controller . authenticate ( user_id , pw ) # \u305d\u306e\u4ed6\u306e\u51e6\u7406 ... \u3053\u306e\u3088\u3046\u306b\u4f5c\u6210\u3055\u308c\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306b\u7528\u610f\u3057\u305f db_controller \u3092\u30bb\u30c3\u30c8\u3059\u308b\u306b\u306f\u524d\u8ff0\u3057\u305f\u3088\u3046\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e set_parcel() \u3092\u4f7f\u7528\u3057\u307e\u3059: app . set_parcel ( UserImagesEndpoint , db_controller )","title":"\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u62e1\u5f35\u4f8b"},{"location":"tutorials/query_params/","text":"\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d6\u6271\u3044 \u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u4e0e\u3048\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066 URI \u306b\u57cb\u3081\u8fbc\u3080\u3053\u3068\u304c\u51fa\u6765\u308b\u60c5\u5831\u306e\u4e00\u7a2e\u3067\u3042\u308a\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e API \u4f5c\u6210\u6642\u306b\u306f\u5927\u304d\u306a\u5f79\u5272\u3092\u62c5\u3044\u307e\u3059\uff0e bamboo \u3067\u306f\u3053\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u3044\u304f\u3064\u304b\u306e\u30a2\u30af\u30bb\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e \u4f4e\u6c34\u6e96\u306a API \u3053\u3053\u3067\u306f\u307e\u305a\u6700\u3082\u4f4e\u6c34\u6e96\u306a API \u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u3088\u308a\u7d30\u304b\u3044\u5236\u5fa1\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306f\uff0c\u3053\u306e\u65b9\u6cd5\u304c\u6709\u52b9\u3067\u3059\uff0e\u958b\u767a\u8005\u306f EndpointBase.get_queries() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\uff0c\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e from bamboo import WSGIEndpoint class CustomEndpoint ( WSGIEndpoint ): def do_GET ( self ) -> None : # \u4ee5\u4e0b\u306e\u3088\u3046\u306a URI \u306e\u5834\u5408\u306b\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf token \u3092\u53d6\u308a\u51fa\u3059 # https://example.com/signup?token=AAAAAAAAAAAAA token = self . get_queries ( \"token\" ) assert isinstance ( token , list ) # \u4ee5\u4e0b token \u3092\u7528\u3044\u3066\u51e6\u7406\u3092\u884c\u3046 \u3053\u3053\u3067\uff0c get_queries() \u30e1\u30bd\u30c3\u30c9\u306e\u8fd4\u308a\u5024\u306f str \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e list \u3067\u3042\u308b\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\u3053\u308c\u306f\u540c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8907\u6570\u6307\u5b9a\u3092\u8a31\u5bb9\u3059\u308b\u3082\u306e\u3067\uff0c\u4f8b\u3048\u3070 https://example.com/query?a=AAA,a=AAB,a=AAC \u3068\u3044\u3046 URI \u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf a \u3092 get_queries() \u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u62bd\u51fa\u3059\u308b\u3068\uff0c [\"AAA\", \"AAB\", \"AAC\"] \u3068\u3044\u3046 list \u304c\u8fd4\u3055\u308c\u307e\u3059\uff0e \u4e0a\u8a18\u306e API \u306f bamboo \u306b\u304a\u3051\u308b\u3082\u306e\u3068\u3057\u3066\u306f\u6700\u3082\u4f4e\u6c34\u6e96\u306a\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u65b9\u6cd5\u3067\uff0c\u305d\u308c\u3086\u3048\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\u5927\u304d\u304f\u3042\u308a\u307e\u305b\u3093\uff0e\u3082\u3057\uff0c\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u51e6\u7406\u3092\u5b8c\u5168\u306b\u958b\u767a\u8005\u5074\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u5834\u5408\u306b\u306f\uff0c\u3053\u306e\u65b9\u6cd5\u3092\u53d6\u308b\u3053\u3068\u304c\u6700\u5584\u3067\u3059\uff0e \u5ba3\u8a00\u7684\u306a\u9ad8\u6c34\u6e96 API \u6b21\u306b\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u63d0\u4f9b\u3059\u308b\u5ba3\u8a00\u7684\u306a API \u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\u3053\u308c\u306f bamboo.sticky \u30e2\u30b8\u30e5\u30fc\u30eb\u306e has_query_of() \u30c7\u30b3\u30ec\u30fc\u30bf\uff08\u53b3\u5bc6\u306b\u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u95a2\u6570\uff09\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3067\u3059\uff0e\u3053\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3068\uff0c\u4e0a\u8a18\u306e\u4f8b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\uff1a import typing as t from bamboo import WSGIEndpoint from bamboo.sticky import has_query_of class CustomEndpoint ( WSGIEndpoint ): @has_query_of ( \"token\" ) def do_GET ( self , token : t . List [ str ]) -> None : # \u4ee5\u4e0b token \u3092\u7528\u3044\u3066\u51e6\u7406\u3092\u884c\u3046 \u3053\u306e\u65b9\u6cd5\u3092\u53d6\u308b\u3053\u3068\u3067\uff0c\u958b\u767a\u8005\u306b\u3068\u3063\u3066\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf token \u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u304a\u3051\u308b\u5f15\u6570\u3067\u3042\u308b\u304b\u306e\u3088\u3046\u306b\u898b\u305b\u304b\u3051\u308b\u3053\u3068\u304c\u3067\u304d\uff0c\u305d\u308c\u3086\u3048\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u306b\u306f\u30b3\u30a2\u306a\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306e\u307f\u306b\u7d5e\u3063\u3066\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u307e\u305f\uff0c\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u53ef\u8aad\u6027\u304c\u5411\u4e0a\u3057\uff0c token \u3068\u3044\u3046\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a31\u5bb9\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u3067\u3042\u308b \u3068\u3044\u3046\u70b9\u3092\u306f\u3063\u304d\u308a\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e \u8907\u6570\u7a2e\u985e\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf \u3053\u308c\u307e\u3067\u306f\u5358\u4e00\u7a2e\u985e\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u4f8b\u3068\u3057\u3066 token \uff09\u306e\u307f\u3092\u6271\u3063\u3066\u304d\u307e\u3057\u305f\u304c\uff0c\u8907\u6570\u7a2e\u985e\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6271\u3046\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u6642\u9593\u306e\u60c5\u5831\u3092\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u5185\u5bb9\u3092\u5909\u5316\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u3053\u3053\u3067\u6642\u9593\u3092\u7bc4\u56f2\u3067\u6307\u5b9a\u3067\u304d\u308b\u3068\u3057\u3066\uff0c\u305d\u306e\u7bc4\u56f2\u306e\u4e0b\u9650\u3092\u793a\u3059 after \u3068\u4e0a\u9650\u3092\u793a\u3059 before \u3068\u3044\u3046\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u3068\u3057\u307e\u3059\uff0e\u305d\u306e\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff1a class CustomEndpoint ( WSGIEndpoint ): @has_query_of ( \"before\" ) @has_query_of ( \"after\" ) def do_GET ( self , after : t . List [ str ], before : t . List [ str ]) -> None : # \u4ee5\u4e0b after \u3068 before \u3092\u7528\u3044\u3066\u51e6\u7406\u3092\u884c\u3046 \u3053\u3053\u3067\uff0c after \u3084 before \u3068\u3044\u3063\u305f\u5f15\u6570\u306f has_query_of() \u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u89e3\u6790\u3059\u308b\u3053\u3068\u3067\u52dd\u624b\u306b\u6307\u5b9a\u3057\u3066\u304f\u308c\u308b\u3082\u306e\u3067\u3042\u308a\uff0c\u958b\u767a\u8005\u81ea\u3089\u304c\u6307\u5b9a\u3059\u308b\u3082\u306e\u3067\u306f\u306a\u3044\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e err_empty \u5f15\u6570 has_query_of() \u95a2\u6570\u306b\u306f err_empty \u3068\u3044\u3046\u5f15\u6570\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u308c\u306f bamboo \u306b\u304a\u3051\u308b\u30a8\u30e9\u30fc\u3092\u6271\u3046 ErrInfo \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u305f\u306f None \u3092\u53d6\u308b\u5f15\u6570\u3067\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u306f None \u3067\u3059\uff0e\u3053\u306e\u5f15\u6570\u304c None \u306e\u3068\u304d\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f URI \u306b\u6307\u5b9a\u3057\u305f\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u4e00\u3064\u3082\u542b\u307e\u308c\u306a\u304f\u3066\u3082\u30a8\u30e9\u30fc\u306f\u767a\u751f\u305b\u305a\uff0c\u3053\u306e\u5834\u5408\u306f\u7a7a\u306e list \u304c after \u3084 before \u306a\u3069\u306e\u5f15\u6570\u306b\u5165\u308a\u307e\u3059\uff0e\u4e00\u65b9\uff0c err_empty \u5f15\u6570\u306b ErrInfo \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\uff0c\u3082\u3057\u6307\u5b9a\u3057\u305f\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u4e00\u3064\u3082\u542b\u307e\u308c\u306a\u304b\u3063\u305f\u3089\u305d\u306e\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c\u307e\u3059\uff0e \u4f8b\u3048\u3070\uff0c\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf after \u304a\u3088\u3073 before \u306f\u5fc5\u305a\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3068\u5236\u9650\u3059\u308b\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff1a from bamboo import ErrInfo class QueryParamNotExistsErrInfo ( ErrInfo ): def get_body ( self ) -> bytes : return b \"Required query parameter was not found.\" class CustomEndpoint ( WSGIEndpoint ): @has_query_of ( \"before\" , err_empty = QueryParamNotExistsErrInfo ) @has_query_of ( \"after\" , err_empty = QueryParamNotExistsErrInfo ) def do_GET ( self , after : t . List [ str ], before : t . List [ str ]) -> None : assert len ( after ) >= 1 assert len ( before ) >= 1 # \u4ee5\u4e0b after \u3068 before \u3092\u7528\u3044\u3066\u51e6\u7406\u3092\u884c\u3046 \u3053\u306e\u3088\u3046\u306b err_empty \u5f15\u6570\u306b\u3088\u3063\u3066\uff0c\u76ee\u7684\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5fc5\u305a1\u3064\u4ee5\u4e0a\u6307\u5b9a\u3055\u308c\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3067\u304d\u307e\u3059\uff0e err_not_unique \u5f15\u6570 err_empty \u3068\u4f3c\u305f\u3088\u3046\u306a\u5f15\u6570\u3068\u3057\u3066 err_not_unique \u5f15\u6570\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u308c\u3082 err_empty \u5f15\u6570\u3068\u540c\u69d8\u306b\uff0c ErrInfo \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u305f\u306f None \u3092\u53d6\u308b\u5f15\u6570\u3067\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u306f None \u3067\u3059\uff0e\u3053\u306e\u5f15\u6570\u304c None \u306e\u3068\u304d\uff0c\u5358\u4e00\u7a2e\u985e\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8907\u6570\u56de\u306e\u6307\u5b9a\u304c\u8a31\u5bb9\u3055\u308c\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u4e0a\u8a18\u306e\u4f8b\u3067\u306f after \u306e list \u306e\u9577\u3055\u306f2\u4ee5\u4e0a\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u3053\u306e\u3088\u3046\u306a\u5358\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u8907\u6570\u5024\u3092\u53d6\u308b\u3088\u3046\u306a\u72b6\u6cc1\u306f\uff0c\u51e6\u7406\u3059\u308b\u4e0a\u3067\u66d6\u6627\u3055\u3092\u3082\u305f\u3089\u3059\u3053\u3068\u306b\u306a\u308b\u305f\u3081\uff08\u4f8b\u3048\u3070 after \u306e\u5024\u304c\u8907\u6570\u500b\u3042\u308b\u3068\uff0c\u7279\u5225\u306a\u30eb\u30fc\u30eb\u3092\u8a2d\u3051\u306a\u3044\u9650\u308a\u3069\u306e\u5024\u3092\u6642\u9593\u306e\u4e0b\u9650\u3068\u3068\u308b\u3079\u304d\u304b\u3092\u5224\u65ad\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u305b\u3093\uff09\uff0c\u3042\u307e\u308a\u597d\u307e\u3057\u3044\u3053\u3068\u3067\u306f\u306a\u3044\u5834\u5408\u304c\u591a\u3005\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u306f\uff0c err_not_unique \u5f15\u6570\u306b ErrInfo \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\uff0c\u3082\u3057\u76ee\u7684\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u8907\u6570\u5024\u3092\u3068\u308b\u5834\u5408\uff0c\u6307\u5b9a\u3057\u305f\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e \u4f8b\u3048\u3070\uff0c\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf after \u304a\u3088\u3073 before \u306f\u8907\u6570\u5024\u3092\u3068\u3063\u3066\u306f\u3044\u3051\u306a\u3044\u3068\u3059\u308b\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff1a from bamboo import ErrInfo class DuplicatedQueryParamErrInfo ( ErrInfo ): def get_body ( self ) -> bytes : return b \"Duplicated query parameters were found.\" class CustomEndpoint ( WSGIEndpoint ): @has_query_of ( \"before\" , err_not_unique = DuplicatedQueryParamErrInfo ) @has_query_of ( \"after\" , err_not_unique = DuplicatedQueryParamErrInfo ) def do_GET ( self , after : t . Optional [ str ], before : t . Optional [ str ]) -> None : # \u4ee5\u4e0b after \u3068 before \u3092\u7528\u3044\u3066\u51e6\u7406\u3092\u884c\u3046 \u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u306f\uff0c after \u304a\u3088\u3073 before \u5f15\u6570\u306f\u3082\u306f\u3084 list \u3067\u306f\u306a\u3044\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\u3053\u308c\u3089\u306e\u5f15\u6570\u306f\uff0c\u5bfe\u5fdc\u3059\u308b\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6307\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306f None \u304c\u6307\u5b9a\u3055\u308c\uff0c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306f\u305d\u306e\u5024\u304c str \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u6307\u5b9a\u3055\u308c\u307e\u3059\uff0e err_empty \u5f15\u6570\u3068 err_not_unique \u5f15\u6570\u3092\u540c\u6642\u306b\u4e0e\u3048\u308b\u3053\u3068\u306b\u3088\u3063\u3066\uff0c \u76ee\u7684\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5fc5\u305a\u6307\u5b9a\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u91cd\u8907\u3082\u3057\u306a\u3044 \u3068\u3044\u3046\u3053\u3068\u3092\u4fdd\u8a3c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u4e0a\u8a182\u3064\u306e\u4f8b\u3092\u30df\u30c3\u30af\u30b9\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff1a class QueryParamNotExistsErrInfo ( ErrInfo ): def get_body ( self ) -> bytes : return b \"Required query parameter was not found.\" class DuplicatedQueryParamErrInfo ( ErrInfo ): def get_body ( self ) -> bytes : return b \"Duplicated query parameters were found.\" class CustomEndpoint ( WSGIEndpoint ): @has_query_of ( \"before\" , err_empty = QueryParamNotExistsErrInfo , err_not_unique = DuplicatedQueryParamErrInfo , ) @has_query_of ( \"after\" , err_empty = QueryParamNotExistsErrInfo , err_not_unique = DuplicatedQueryParamErrInfo , ) def do_GET ( self , after : str , before : str ) -> None : # \u4ee5\u4e0b after \u3068 before \u3092\u7528\u3044\u3066\u51e6\u7406\u3092\u884c\u3046 mapf \u5f15\u6570 \u4e0a2\u3064\u306e\u5f15\u6570\u304c \u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u500b\u6570 \u3092\u5236\u5fa1\u3067\u304d\u308b\u5f15\u6570\u3067\u3042\u3063\u305f\u306e\u306b\u5bfe\u3057\uff0c\u3053\u306e mapf \u5f15\u6570\u306f \u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024 \u3092\u5236\u5fa1\u3067\u304d\u308b\u5f15\u6570\u3067\u3059\uff0e\u3053\u306e\u5f15\u6570\u306f\u95a2\u6570\u307e\u305f\u306f None \u3092\u5f15\u6570\u306b\u3068\u308a\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u306f None \u3067\u3059\uff0e\u3053\u306e\u5f15\u6570\u306b\u4e0e\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u95a2\u6570\u306f\uff0c\u5f15\u6570\u304c1\u3064\u3067\u3042\u308b\u3082\u306e","title":"\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d6\u6271\u3044"},{"location":"tutorials/query_params/#_1","text":"\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u4e0e\u3048\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066 URI \u306b\u57cb\u3081\u8fbc\u3080\u3053\u3068\u304c\u51fa\u6765\u308b\u60c5\u5831\u306e\u4e00\u7a2e\u3067\u3042\u308a\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e API \u4f5c\u6210\u6642\u306b\u306f\u5927\u304d\u306a\u5f79\u5272\u3092\u62c5\u3044\u307e\u3059\uff0e bamboo \u3067\u306f\u3053\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u3044\u304f\u3064\u304b\u306e\u30a2\u30af\u30bb\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e","title":"\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d6\u6271\u3044"},{"location":"tutorials/query_params/#api","text":"\u3053\u3053\u3067\u306f\u307e\u305a\u6700\u3082\u4f4e\u6c34\u6e96\u306a API \u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u3088\u308a\u7d30\u304b\u3044\u5236\u5fa1\u3092\u884c\u3044\u305f\u3044\u5834\u5408\u306f\uff0c\u3053\u306e\u65b9\u6cd5\u304c\u6709\u52b9\u3067\u3059\uff0e\u958b\u767a\u8005\u306f EndpointBase.get_queries() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\uff0c\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e from bamboo import WSGIEndpoint class CustomEndpoint ( WSGIEndpoint ): def do_GET ( self ) -> None : # \u4ee5\u4e0b\u306e\u3088\u3046\u306a URI \u306e\u5834\u5408\u306b\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf token \u3092\u53d6\u308a\u51fa\u3059 # https://example.com/signup?token=AAAAAAAAAAAAA token = self . get_queries ( \"token\" ) assert isinstance ( token , list ) # \u4ee5\u4e0b token \u3092\u7528\u3044\u3066\u51e6\u7406\u3092\u884c\u3046 \u3053\u3053\u3067\uff0c get_queries() \u30e1\u30bd\u30c3\u30c9\u306e\u8fd4\u308a\u5024\u306f str \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e list \u3067\u3042\u308b\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\u3053\u308c\u306f\u540c\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8907\u6570\u6307\u5b9a\u3092\u8a31\u5bb9\u3059\u308b\u3082\u306e\u3067\uff0c\u4f8b\u3048\u3070 https://example.com/query?a=AAA,a=AAB,a=AAC \u3068\u3044\u3046 URI \u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf a \u3092 get_queries() \u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u62bd\u51fa\u3059\u308b\u3068\uff0c [\"AAA\", \"AAB\", \"AAC\"] \u3068\u3044\u3046 list \u304c\u8fd4\u3055\u308c\u307e\u3059\uff0e \u4e0a\u8a18\u306e API \u306f bamboo \u306b\u304a\u3051\u308b\u3082\u306e\u3068\u3057\u3066\u306f\u6700\u3082\u4f4e\u6c34\u6e96\u306a\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u65b9\u6cd5\u3067\uff0c\u305d\u308c\u3086\u3048\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306f\u5927\u304d\u304f\u3042\u308a\u307e\u305b\u3093\uff0e\u3082\u3057\uff0c\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u51e6\u7406\u3092\u5b8c\u5168\u306b\u958b\u767a\u8005\u5074\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u305f\u3044\u5834\u5408\u306b\u306f\uff0c\u3053\u306e\u65b9\u6cd5\u3092\u53d6\u308b\u3053\u3068\u304c\u6700\u5584\u3067\u3059\uff0e","title":"\u4f4e\u6c34\u6e96\u306a API"},{"location":"tutorials/query_params/#api_1","text":"\u6b21\u306b\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u63d0\u4f9b\u3059\u308b\u5ba3\u8a00\u7684\u306a API \u3092\u7d39\u4ecb\u3057\u307e\u3059\uff0e\u3053\u308c\u306f bamboo.sticky \u30e2\u30b8\u30e5\u30fc\u30eb\u306e has_query_of() \u30c7\u30b3\u30ec\u30fc\u30bf\uff08\u53b3\u5bc6\u306b\u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u95a2\u6570\uff09\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3067\u3059\uff0e\u3053\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3068\uff0c\u4e0a\u8a18\u306e\u4f8b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3067\u304d\u307e\u3059\uff1a import typing as t from bamboo import WSGIEndpoint from bamboo.sticky import has_query_of class CustomEndpoint ( WSGIEndpoint ): @has_query_of ( \"token\" ) def do_GET ( self , token : t . List [ str ]) -> None : # \u4ee5\u4e0b token \u3092\u7528\u3044\u3066\u51e6\u7406\u3092\u884c\u3046 \u3053\u306e\u65b9\u6cd5\u3092\u53d6\u308b\u3053\u3068\u3067\uff0c\u958b\u767a\u8005\u306b\u3068\u3063\u3066\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf token \u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u304a\u3051\u308b\u5f15\u6570\u3067\u3042\u308b\u304b\u306e\u3088\u3046\u306b\u898b\u305b\u304b\u3051\u308b\u3053\u3068\u304c\u3067\u304d\uff0c\u305d\u308c\u3086\u3048\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u5185\u306b\u306f\u30b3\u30a2\u306a\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306e\u307f\u306b\u7d5e\u3063\u3066\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u307e\u305f\uff0c\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u53ef\u8aad\u6027\u304c\u5411\u4e0a\u3057\uff0c token \u3068\u3044\u3046\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a31\u5bb9\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u3067\u3042\u308b \u3068\u3044\u3046\u70b9\u3092\u306f\u3063\u304d\u308a\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e","title":"\u5ba3\u8a00\u7684\u306a\u9ad8\u6c34\u6e96 API"},{"location":"tutorials/query_params/#_2","text":"\u3053\u308c\u307e\u3067\u306f\u5358\u4e00\u7a2e\u985e\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\uff08\u4f8b\u3068\u3057\u3066 token \uff09\u306e\u307f\u3092\u6271\u3063\u3066\u304d\u307e\u3057\u305f\u304c\uff0c\u8907\u6570\u7a2e\u985e\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6271\u3046\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u6642\u9593\u306e\u60c5\u5831\u3092\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u5185\u5bb9\u3092\u5909\u5316\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u3053\u3053\u3067\u6642\u9593\u3092\u7bc4\u56f2\u3067\u6307\u5b9a\u3067\u304d\u308b\u3068\u3057\u3066\uff0c\u305d\u306e\u7bc4\u56f2\u306e\u4e0b\u9650\u3092\u793a\u3059 after \u3068\u4e0a\u9650\u3092\u793a\u3059 before \u3068\u3044\u3046\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u3068\u3057\u307e\u3059\uff0e\u305d\u306e\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff1a class CustomEndpoint ( WSGIEndpoint ): @has_query_of ( \"before\" ) @has_query_of ( \"after\" ) def do_GET ( self , after : t . List [ str ], before : t . List [ str ]) -> None : # \u4ee5\u4e0b after \u3068 before \u3092\u7528\u3044\u3066\u51e6\u7406\u3092\u884c\u3046 \u3053\u3053\u3067\uff0c after \u3084 before \u3068\u3044\u3063\u305f\u5f15\u6570\u306f has_query_of() \u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u89e3\u6790\u3059\u308b\u3053\u3068\u3067\u52dd\u624b\u306b\u6307\u5b9a\u3057\u3066\u304f\u308c\u308b\u3082\u306e\u3067\u3042\u308a\uff0c\u958b\u767a\u8005\u81ea\u3089\u304c\u6307\u5b9a\u3059\u308b\u3082\u306e\u3067\u306f\u306a\u3044\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e","title":"\u8907\u6570\u7a2e\u985e\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf"},{"location":"tutorials/query_params/#err_empty","text":"has_query_of() \u95a2\u6570\u306b\u306f err_empty \u3068\u3044\u3046\u5f15\u6570\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u308c\u306f bamboo \u306b\u304a\u3051\u308b\u30a8\u30e9\u30fc\u3092\u6271\u3046 ErrInfo \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u305f\u306f None \u3092\u53d6\u308b\u5f15\u6570\u3067\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u306f None \u3067\u3059\uff0e\u3053\u306e\u5f15\u6570\u304c None \u306e\u3068\u304d\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f URI \u306b\u6307\u5b9a\u3057\u305f\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u4e00\u3064\u3082\u542b\u307e\u308c\u306a\u304f\u3066\u3082\u30a8\u30e9\u30fc\u306f\u767a\u751f\u305b\u305a\uff0c\u3053\u306e\u5834\u5408\u306f\u7a7a\u306e list \u304c after \u3084 before \u306a\u3069\u306e\u5f15\u6570\u306b\u5165\u308a\u307e\u3059\uff0e\u4e00\u65b9\uff0c err_empty \u5f15\u6570\u306b ErrInfo \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u306f\uff0c\u3082\u3057\u6307\u5b9a\u3057\u305f\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u4e00\u3064\u3082\u542b\u307e\u308c\u306a\u304b\u3063\u305f\u3089\u305d\u306e\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c\u307e\u3059\uff0e \u4f8b\u3048\u3070\uff0c\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf after \u304a\u3088\u3073 before \u306f\u5fc5\u305a\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3068\u5236\u9650\u3059\u308b\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff1a from bamboo import ErrInfo class QueryParamNotExistsErrInfo ( ErrInfo ): def get_body ( self ) -> bytes : return b \"Required query parameter was not found.\" class CustomEndpoint ( WSGIEndpoint ): @has_query_of ( \"before\" , err_empty = QueryParamNotExistsErrInfo ) @has_query_of ( \"after\" , err_empty = QueryParamNotExistsErrInfo ) def do_GET ( self , after : t . List [ str ], before : t . List [ str ]) -> None : assert len ( after ) >= 1 assert len ( before ) >= 1 # \u4ee5\u4e0b after \u3068 before \u3092\u7528\u3044\u3066\u51e6\u7406\u3092\u884c\u3046 \u3053\u306e\u3088\u3046\u306b err_empty \u5f15\u6570\u306b\u3088\u3063\u3066\uff0c\u76ee\u7684\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u5fc5\u305a1\u3064\u4ee5\u4e0a\u6307\u5b9a\u3055\u308c\u308b\u3053\u3068\u3092\u4fdd\u8a3c\u3067\u304d\u307e\u3059\uff0e","title":"err_empty \u5f15\u6570"},{"location":"tutorials/query_params/#err_not_unique","text":"err_empty \u3068\u4f3c\u305f\u3088\u3046\u306a\u5f15\u6570\u3068\u3057\u3066 err_not_unique \u5f15\u6570\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u308c\u3082 err_empty \u5f15\u6570\u3068\u540c\u69d8\u306b\uff0c ErrInfo \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307e\u305f\u306f None \u3092\u53d6\u308b\u5f15\u6570\u3067\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u306f None \u3067\u3059\uff0e\u3053\u306e\u5f15\u6570\u304c None \u306e\u3068\u304d\uff0c\u5358\u4e00\u7a2e\u985e\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8907\u6570\u56de\u306e\u6307\u5b9a\u304c\u8a31\u5bb9\u3055\u308c\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u4e0a\u8a18\u306e\u4f8b\u3067\u306f after \u306e list \u306e\u9577\u3055\u306f2\u4ee5\u4e0a\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u3053\u306e\u3088\u3046\u306a\u5358\u4e00\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u8907\u6570\u5024\u3092\u53d6\u308b\u3088\u3046\u306a\u72b6\u6cc1\u306f\uff0c\u51e6\u7406\u3059\u308b\u4e0a\u3067\u66d6\u6627\u3055\u3092\u3082\u305f\u3089\u3059\u3053\u3068\u306b\u306a\u308b\u305f\u3081\uff08\u4f8b\u3048\u3070 after \u306e\u5024\u304c\u8907\u6570\u500b\u3042\u308b\u3068\uff0c\u7279\u5225\u306a\u30eb\u30fc\u30eb\u3092\u8a2d\u3051\u306a\u3044\u9650\u308a\u3069\u306e\u5024\u3092\u6642\u9593\u306e\u4e0b\u9650\u3068\u3068\u308b\u3079\u304d\u304b\u3092\u5224\u65ad\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u305b\u3093\uff09\uff0c\u3042\u307e\u308a\u597d\u307e\u3057\u3044\u3053\u3068\u3067\u306f\u306a\u3044\u5834\u5408\u304c\u591a\u3005\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u306f\uff0c err_not_unique \u5f15\u6570\u306b ErrInfo \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\uff0c\u3082\u3057\u76ee\u7684\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u8907\u6570\u5024\u3092\u3068\u308b\u5834\u5408\uff0c\u6307\u5b9a\u3057\u305f\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c\u308b\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e \u4f8b\u3048\u3070\uff0c\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf after \u304a\u3088\u3073 before \u306f\u8907\u6570\u5024\u3092\u3068\u3063\u3066\u306f\u3044\u3051\u306a\u3044\u3068\u3059\u308b\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff1a from bamboo import ErrInfo class DuplicatedQueryParamErrInfo ( ErrInfo ): def get_body ( self ) -> bytes : return b \"Duplicated query parameters were found.\" class CustomEndpoint ( WSGIEndpoint ): @has_query_of ( \"before\" , err_not_unique = DuplicatedQueryParamErrInfo ) @has_query_of ( \"after\" , err_not_unique = DuplicatedQueryParamErrInfo ) def do_GET ( self , after : t . Optional [ str ], before : t . Optional [ str ]) -> None : # \u4ee5\u4e0b after \u3068 before \u3092\u7528\u3044\u3066\u51e6\u7406\u3092\u884c\u3046 \u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u306f\uff0c after \u304a\u3088\u3073 before \u5f15\u6570\u306f\u3082\u306f\u3084 list \u3067\u306f\u306a\u3044\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\u3053\u308c\u3089\u306e\u5f15\u6570\u306f\uff0c\u5bfe\u5fdc\u3059\u308b\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u6307\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306f None \u304c\u6307\u5b9a\u3055\u308c\uff0c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306f\u305d\u306e\u5024\u304c str \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u3057\u3066\u6307\u5b9a\u3055\u308c\u307e\u3059\uff0e err_empty \u5f15\u6570\u3068 err_not_unique \u5f15\u6570\u3092\u540c\u6642\u306b\u4e0e\u3048\u308b\u3053\u3068\u306b\u3088\u3063\u3066\uff0c \u76ee\u7684\u306e\u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u5fc5\u305a\u6307\u5b9a\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u305a\u91cd\u8907\u3082\u3057\u306a\u3044 \u3068\u3044\u3046\u3053\u3068\u3092\u4fdd\u8a3c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u4e0a\u8a182\u3064\u306e\u4f8b\u3092\u30df\u30c3\u30af\u30b9\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff1a class QueryParamNotExistsErrInfo ( ErrInfo ): def get_body ( self ) -> bytes : return b \"Required query parameter was not found.\" class DuplicatedQueryParamErrInfo ( ErrInfo ): def get_body ( self ) -> bytes : return b \"Duplicated query parameters were found.\" class CustomEndpoint ( WSGIEndpoint ): @has_query_of ( \"before\" , err_empty = QueryParamNotExistsErrInfo , err_not_unique = DuplicatedQueryParamErrInfo , ) @has_query_of ( \"after\" , err_empty = QueryParamNotExistsErrInfo , err_not_unique = DuplicatedQueryParamErrInfo , ) def do_GET ( self , after : str , before : str ) -> None : # \u4ee5\u4e0b after \u3068 before \u3092\u7528\u3044\u3066\u51e6\u7406\u3092\u884c\u3046","title":"err_not_unique \u5f15\u6570"},{"location":"tutorials/query_params/#mapf","text":"\u4e0a2\u3064\u306e\u5f15\u6570\u304c \u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u500b\u6570 \u3092\u5236\u5fa1\u3067\u304d\u308b\u5f15\u6570\u3067\u3042\u3063\u305f\u306e\u306b\u5bfe\u3057\uff0c\u3053\u306e mapf \u5f15\u6570\u306f \u30af\u30a8\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024 \u3092\u5236\u5fa1\u3067\u304d\u308b\u5f15\u6570\u3067\u3059\uff0e\u3053\u306e\u5f15\u6570\u306f\u95a2\u6570\u307e\u305f\u306f None \u3092\u5f15\u6570\u306b\u3068\u308a\uff0c\u30c7\u30d5\u30a9\u30eb\u30c8\u306f None \u3067\u3059\uff0e\u3053\u306e\u5f15\u6570\u306b\u4e0e\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u95a2\u6570\u306f\uff0c\u5f15\u6570\u304c1\u3064\u3067\u3042\u308b\u3082\u306e","title":"mapf \u5f15\u6570"},{"location":"tutorials/routing/","text":"\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0 \u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306f Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3059\u308b\u4e0a\u3067\u57fa\u672c\u3068\u306a\u308b\u8981\u7d20\u306e\u3046\u3061\u306e\u4e00\u3064\u3067\u3059\uff0e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306f\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u305f URI \u3092\u89e3\u91c8\u3057\uff0c\u305d\u308c\u306b\u898b\u5408\u3046\u51e6\u7406\u3092\u63a2\u3059\u5f79\u5272\u3092\u3057\u307e\u3059\uff0e\u3053\u3053\u3067\u306f\u307e\u305a\uff0c\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u672c\u8cea\u7684\u306b\u3069\u306e\u3088\u3046\u306b\u898b\u3048\u308b\u306e\u304b\u3092\u8aac\u660e\u3057\u307e\u3059\uff0e\u305d\u3057\u3066\u306a\u305c\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u6982\u5ff5\u304c\u767a\u751f\u3059\u308b\u306e\u304b\u306b\u3064\u3044\u3066\u8ff0\u3079\u307e\u3059\uff0e\u6b21\u306b\uff0cbamboo \u3067\u306f\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u3069\u306e\u3088\u3046\u306b\u5b9f\u884c\u3057\u3066\u3044\u308b\u306e\u304b\u306b\u3064\u3044\u3066\u8ff0\u3079\uff0cURI \u8a2d\u5b9a\u6642\u306b\u91cd\u8981\u3068\u306a\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3044\u3046\u6982\u5ff5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e Note \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u4ee5\u964d HTTP \u3067\u306e\u901a\u4fe1\u3092\u4eee\u5b9a\u3057\u307e\u3059\uff0e \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8 \u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u307e\u305a\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u3069\u306e\u3088\u3046\u306b\u898b\u3048\u3066\u3044\u308b\u306e\u304b\u3092\u77e5\u3063\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u3042\u306a\u305f\u304c\u3053\u306e\u30da\u30fc\u30b8\u306e URI \u3067\u3042\u308b https://jjj999.github.io/bamboo/tutorials/routing/ \u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3068\u3057\u307e\u3057\u3087\u3046\uff0e\u3059\u308b\u3068\u3042\u306a\u305f\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f github.io \u3068\u3044\u3046\u30c9\u30e1\u30a4\u30f3\u306b\u5bfe\u5fdc\u3059\u308b IP \u30a2\u30c9\u30ec\u30b9\u306b\u5411\u3051\u3066\u8ee2\u9001\u3055\u308c\u307e\u3059\uff0e\u305d\u306e\u884c\u304d\u5148\u306b\u306f\u3053\u306e\u30da\u30fc\u30b8\u3092\u7ba1\u7406\u3057\u3066\u3044\u308b\u30b5\u30fc\u30d0\u30fc\u304c\u5f85\u3061\u69cb\u3048\u3066\u3044\u307e\u3059\uff0e\u305d\u3057\u3066\u305d\u306e\u30b5\u30fc\u30d0\u30fc\u306f HTTP \u306b\u5247\u3063\u305f\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059: GET /bamboo/tutorials/routing/ HTTP/1.0 \u4ee5\u4e0b \u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9 -------- \u3053\u308c\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u5b9f\u969b\u306b\u9001\u4fe1\u3059\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u3059\uff0e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u901a\u5e38 \u30ea\u30af\u30a8\u30b9\u30c8\u884c \u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9 \u30dc\u30c7\u30a3 \u3067\u69cb\u6210\u3055\u308c\uff0c\u4e0a\u306e\u4f8b\u306e1\u884c\u76ee\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u884c\u306b\u3042\u305f\u308a\u307e\u3059\uff0e\u30ea\u30af\u30a8\u30b9\u30c8\u884c\u306f HTTP \u30e1\u30bd\u30c3\u30c9 URI \u306e\u30d1\u30b9 HTTP \u30d0\u30fc\u30b8\u30e7\u30f3 \u3092\u7a7a\u767d\u533a\u5207\u308a\u3067\u8a18\u5165\u3057\u305f\u3082\u306e\u3067\uff0c1\u884c\u306e\u307f\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\uff0e\u3053\u308c\u3053\u305d\u304c\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u304b\u3089\u898b\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u59ff\u3067\u3059\uff0e \u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u6982\u5ff5 \u4e0a\u306e\u8aac\u660e\u306f\u5c11\u3005\u9055\u548c\u611f\u304c\u3042\u308a\u307e\u3059\uff0e\u306a\u305c\u306a\u3089\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f https://jjj999.github.io/bamboo/tutorials/routing/ \u3068\u3044\u3046 URI \u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u306f\u305a\u306a\u306e\u306b\uff0c\u5b9f\u969b\u306b\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u3063\u305f\u306e\u306f github.io \u306e\u30b5\u30fc\u30d0\u30fc\u306a\u306e\u3067\u3059\uff0e\u305d\u308c\u3067\u306f\u3069\u3046\u3084\u3063\u3066\u6b8b\u308a\u306e bamboo/tutorials/routing/ \u307e\u3067\u3092\u7279\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff0e\u5b9f\u306f\u305d\u308c\u3092\u884c\u3046\u306e\u306f\u30b5\u30fc\u30d0\u30fc\u306e\u4ed5\u4e8b\u306a\u306e\u3067\u3059\uff0e \u30b5\u30fc\u30d0\u30fc\u304c bamboo/tutorials/routing/ \u306e\u3088\u3046\u306a\u53d7\u3051\u53d6\u3063\u305f URI \u306e\u30d1\u30b9\u3092\u3069\u306e\u3088\u3046\u306b\u89e3\u91c8\u3057\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u304b\u306f\u57fa\u672c\u7684\u306b\u306f\u81ea\u7531\u3067\u3059\uff0e bamboo/tutorials/routing/ \u3092\u6307\u5b9a\u3055\u308c\u305f\u304b\u3089\u3068\u8a00\u3063\u3066\uff0c\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306b\u95a2\u4fc2\u3059\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u66f8\u304b\u308c\u305f HTML \u30d5\u30a1\u30a4\u30eb\u3092\u9001\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u305f\u3060\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306b\u95a2\u4fc2\u3059\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u6c42\u3081\u3066\u305d\u306e URI \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u308f\u3051\u3067\u3059\u304b\u3089\uff0c\u305d\u308c\u306b\u76f8\u5fdc\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3079\u304d\u3067\u3059\uff0e \u30b5\u30fc\u30d0\u30fc\u3078\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u4f55\u3082 HTML \u30d5\u30a1\u30a4\u30eb\u3092\u9001\u308c\u3068\u3044\u3046\u547d\u4ee4\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u4f8b\u3048\u3070\uff0c\u30d6\u30e9\u30a6\u30b6\u3084\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u3067\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u3057\u3066\u30ed\u30b0\u30a4\u30f3\u3092\u3059\u308b\u5834\u5408\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u3042\u306a\u305f\u304c\u5165\u529b\u3057\u305f\u30c7\u30fc\u30bf\u306f\u4f55\u306b\u3088\u3063\u3066\u691c\u8a3c\u3055\u308c\uff0c\u4f55\u306b\u3088\u3063\u3066\u30ed\u30b0\u30a4\u30f3\u3092\u8a31\u53ef\u3055\u308c\u305f\u308a\u518d\u5165\u529b\u3092\u6c42\u3081\u3089\u308c\u305f\u308a\u3059\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff0e\u305d\u306e\u6b63\u4f53\u3082\u3084\u306f\u308a\u30b5\u30fc\u30d0\u30fc\u3067\u3059\uff0e\u3042\u306a\u305f\u304c\u30ed\u30b0\u30a4\u30f3\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u6c34\u9762\u4e0b\u3067\u306f\u7279\u5b9a\u306e URI \u3092\u6307\u5b9a\u3057\u3066\u30b5\u30fc\u30d0\u30fc\u5074\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u9001\u4fe1\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\uff0e\u305d\u3057\u3066\u30b5\u30fc\u30d0\u30fc\u306f\u3042\u306a\u305f\u304c\u5165\u529b\u3057\u305f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u898b\u3066\uff0c\u305d\u308c\u304c\u672c\u5f53\u306b\u6b63\u3057\u3044\u3082\u306e\u306a\u306e\u304b\u3092\u5185\u90e8\u3067\u691c\u8a3c\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u8fd4\u3057\u3066\u3044\u308b\u306e\u3067\u3059\uff0e\u305d\u306e\u3068\u304d\u30b5\u30fc\u30d0\u30fc\u306f\u30ed\u30b0\u30a4\u30f3\u5b8c\u4e86\u5f8c\u306e\u30b5\u30a4\u30c8\u3092 HTML \u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u9001\u4fe1\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3057\uff0c\u5358\u306b\u30ed\u30b0\u30a4\u30f3\u5b8c\u4e86\u3092\u793a\u3059\u5c0f\u3055\u306a\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u307f\u3092\u9001\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e \u3053\u3053\u307e\u3067\u6765\u308c\u3070\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u6982\u5ff5\u304c\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3067\u3057\u3087\u3046\uff0e\u305a\u3070\u308a\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3068\u306f\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f URI \u306e\u30d1\u30b9\u3092\u89e3\u6790\u3057\u3066\uff0c\u3069\u3046\u3044\u3046\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u51e6\u7406\u3092\u884c\u3046\u304b\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u3067\u3059\uff0e\u3042\u306a\u305f\u304c\u3053\u308c\u304b\u3089\u4f5c\u308d\u3046\u3068\u3059\u308b\u30b5\u30fc\u30d0\u30fc\u306b\u306f\u305f\u304f\u3055\u3093\u306e\u6a5f\u80fd\u304c\u76db\u308a\u8fbc\u307e\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u3057\u304b\u3057\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u305d\u306e\u6a5f\u80fd\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306b\u306f1\u30641\u3064\u306e\u6a5f\u80fd\u306b\u5bfe\u5fdc\u3057\u305f URI \u304c\u5fc5\u8981\u3067\u3059\uff0e\u305d\u306e URI (\u306e\u30d1\u30b9) \u306e\u5b9a\u7fa9\u306f\u3042\u306a\u305f\u81ea\u8eab\u304c\u884c\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0e HTTP \u30e1\u30bd\u30c3\u30c9 \u3055\u304d\u307b\u3069\uff0c\u30b5\u30fc\u30d0\u30fc\u306f URI \u306e\u30d1\u30b9\u304b\u3089\u884c\u3046\u3079\u304d\u51e6\u7406\u3092\u6c7a\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u8ff0\u3079\u307e\u3057\u305f\uff0e\u3057\u304b\u3057\u5b9f\u969b\u306b\u306f URI \u306e\u30d1\u30b9\u306e\u4ed6\u306b\u3082\u3046\u4e00\u3064\u5fc5\u8981\u306a\u60c5\u5831\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u308c\u304c HTTP \u30e1\u30bd\u30c3\u30c9 \u3067\u3059\uff0eURI \u306e\u30d1\u30b9\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u5834\u6240\u3092\u8868\u3059\u306e\u3067\u3042\u308c\u3070\uff0cHTTP \u30e1\u30bd\u30c3\u30c9\u304c\u8868\u3059\u306e\u306f\u305d\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3067\u3059\uff0e\u305f\u3068\u3048\u3070\uff0c\u3042\u306a\u305f\u304c\u9280\u884c\u306b\u884c\u3063\u305f\u3068\u3057\u307e\u3057\u3087\u3046\uff0e\u305d\u306e\u9280\u884c\u306b\u306f\u3007\u3007\u652f\u5e97\u306a\u3069\u3068\u3044\u3046\u5e97\u540d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u3067\u3057\u3087\u3046\uff0e\u305d\u308c\u306f URI \u306e\u30d1\u30b9\u3068\u4f3c\u305f\u767a\u60f3\u3067\u3059\uff0e\u4e00\u65b9\u3067\uff0c\u9280\u884c\u3067\u306f\u51fa\u6765\u308b\u3053\u3068\u306f\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\uff0e\u53e3\u5ea7\u304b\u3089\u73fe\u91d1\u306e\u5f15\u304d\u51fa\u3057\uff0c\u9810\u3051\u5165\u308c\uff0c\u4ed6\u53e3\u5ea7\u3078\u306e\u632f\u8fbc\uff0c\u7b49\u3005\u3067\u3059\uff0e\u3053\u308c\u3089\u306f\u3042\u306a\u305f\u304c\u9280\u884c\u306b\u884c\u3063\u305f\u969b\u306b\u884c\u3048\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u3067\u3042\u308a\uff0c HTTP \u30e1\u30bd\u30c3\u30c9 \u306b\u4f3c\u305f\u6982\u5ff5\u3067\u3059\uff0e \u6ce8\u610f\u3059\u3079\u304d\u3053\u3068\u306f HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u306f\u9650\u3089\u308c\u305f\u30a2\u30af\u30b7\u30e7\u30f3\u3057\u304b\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u3042\u306a\u305f\u304c\u9280\u884c\u3067\u306f\u306a\u304f\u90f5\u4fbf\u5c40\u306b\u884c\u3051\u3070\uff0c\u3042\u306a\u305f\u306e\u884c\u3048\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5909\u308f\u308a\u307e\u3059\u304c\uff0cHTTP \u30e1\u30bd\u30c3\u30c9\u306f URI \u306e\u30d1\u30b9\u304c\u5909\u308f\u308d\u3046\u3068\u305d\u306e\u9078\u3079\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5909\u308f\u308a\u307e\u305b\u3093\uff0e\u73fe\u5728 bamboo \u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059: GET HEAD POST PUT DELETE CONNECT OPTIONS TRACE PATCH Tip HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u306f\u305d\u308c\u305e\u308c\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u610f\u5473\u304c\u3042\u308a\u307e\u3059 ( \u53c2\u8003 )\uff0e\u610f\u5473\u3092\u7406\u89e3\u3057\u3066\u4e0a\u624b\u304f\u4f7f\u3044\u5206\u3051\u3066\u8a2d\u8a08\u3059\u308b\u3068\uff0c\u30b7\u30b9\u30c6\u30e0\u304c\u7f8e\u3057\u304f\u306a\u308a\u898b\u901a\u3057\u304c\u826f\u304f\u306a\u308a\u307e\u3059\uff0e bamboo \u3067\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0 bamboo \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u65e2\u306b\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u6a5f\u80fd\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3055\u304d\u307b\u3069\u8ff0\u3079\u305f\u3088\u3046\u306b\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u51e6\u7406\u306f URI \u306e\u30d1\u30b9\u3068 HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u7279\u5b9a\u3055\u308c\u308b\u306e\u3067\uff0c\u305d\u308c\u3092\u4e88\u3081\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0ebamboo \u3067\u306f\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\uff0e from bamboo import WSGIApp , WSGIEndpoint app = WSGIApp () # URI \u306e\u30d1\u30b9\u306e\u5b9a\u7fa9 @app . route ( \"hello\" , \"client\" ) class HelloEndpoint ( WSGIEndpoint ): # \u5bfe\u5fdc\u3059\u308b HTTP \u30e1\u30bd\u30c3\u30c9\u306e\u5b9a\u7fa9 def do_GET ( self ) -> None : self . send_body ( b \"Hello, Client!\" ) \u4e0a\u306e\u4f8b\u3067\u306f\u6b21\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u884c\u3092\u6301\u3064\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u9001\u3089\u308c\u3066\u304f\u308b\u3068\uff0c do_GET() \u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059: GET /hello/client HTTP/1.1 \u4e0a\u306e\u4f8b\u304b\u3089\u3082\u57a3\u9593\u898b\u3048\u308b\u3088\u3046\u306b\uff0cbamboo \u3067\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306f2\u6bb5\u968e\u3067\u884c\u308f\u308c\u307e\u3059: \u30ea\u30af\u30a8\u30b9\u30c8\u884c\u306e URI \u306e\u30d1\u30b9\u3092\u89e3\u6790\u3057\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7279\u5b9a\u3059\u308b \u7279\u5b9a\u3055\u308c\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u884c\u306e HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9 (\u4e0a\u306e\u4f8b\u3067\u306f do_GET() ) \u6301\u3063\u3066\u3044\u308b\u304b\u8abf\u3079\u308b \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3068 URI \u306e\u30d1\u30b9\u3092\u7d10\u4ed8\u3051\u308b\u51e6\u7406\u3092\u884c\u3046\u306e\u304c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e route() \u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u3042\u308a\uff0c\u305d\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b HTTP \u30e1\u30bd\u30c3\u30c9\u306f do_[METHOD]() \u306e\u547d\u540d\u898f\u5247\u3092\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u65ad\u3055\u308c\u307e\u3059\uff0e\u3061\u306a\u307f\u306b\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u5b9a\u7fa9\u6642\u3067\u306f\u306a\u304f\u5225\u306e\u5834\u6240\u3067 URI \u306e\u30d1\u30b9\u3092\u7d10\u3065\u3051\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b route() \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059: app . route ( \"hello\" , \"client\" )( HelloEndpoint ) Note \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u3044\u3046\u8a00\u8449\u306f\u3088\u304f\u3053\u306e URI \u306e\u30d1\u30b9\u3068\u3044\u3046\u610f\u5473\u3067\u4f7f\u308f\u308c\u307e\u3059\uff0e\u307e\u305f\uff0c\u30d1\u30b9\u3068\u3044\u3046\u8a00\u8449\u306f\u5143\u6765\u30ea\u30bd\u30fc\u30b9\u306e\u5728\u308a\u51e6\u3092\u6307\u3059\u8a00\u8449\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u304d\u307e\u3057\u305f\uff0e\u4e00\u65b9\u3067\uff0cbamboo \u306b\u304a\u3051\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u3053\u306e URI \u306e\u30d1\u30b9\u3068\u975e\u5e38\u306b\u5bc6\u63a5\u306a\u95a2\u4fc2\u3092\u6301\u3064\u6982\u5ff5\u3067\u3059\uff0ebamboo \u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u884c\u304d\u7740\u304f\u5834\u6240\u3067\u3042\u308a\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u3055\u308c\u308b\u5834\u6240\u3067\u3082\u3042\u308a\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c\u5e38\u306b\u304a\u91d1\u304c\u51fa\u5165\u308a\u3059\u308b\u9280\u884c\u306e\u652f\u5e97\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\uff0eURI \u306e\u30d1\u30b9\u3068\u3044\u3046\u306e\u306f\u4e00\u822c\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u305d\u3053\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u4ed8\u3051\u305f\u4f4f\u6240\u3067\u3042\u308a\uff0cbamboo \u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u3068\u3063\u3066\u306f\u6570\u3042\u308b\u5c5e\u6027\u306e\u3046\u3061\u306e\u4e00\u3064\u306e\u5c5e\u6027\u306b\u904e\u304e\u307e\u305b\u3093\uff0e \u30ed\u30b1\u30fc\u30b7\u30e7\u30f3 URI \u306e\u30d1\u30b9\u306b\u306f\u69d8\u3005\u306a\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0cGithub \u3067\u306f URI \u306e\u30d1\u30b9\u306f <\u30a2\u30ab\u30a6\u30f3\u30c8\u540d>/<\u30ea\u30dd\u30b8\u30c8\u30ea\u540d>/... \u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u308c\u306f\u30e6\u30fc\u30b6\u30fc\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u6271\u3046\u5834\u5408\u306b\u975e\u5e38\u306b\u6709\u7528\u306a\u30d1\u30b9\u306e\u5b9a\u7fa9\u3067\u3059\uff0e\u3057\u304b\u3057\uff0c\u3053\u308c\u3092\u5148\u7a0b\u306e\u4f8b\u306e\u3088\u3046\u306b bamboo \u3067\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u307b\u307c\u4e0d\u53ef\u80fd\u3067\u3059\uff0e\u306a\u305c\u306a\u3089\uff0c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u72b6\u614b\u3067\u306f\u3069\u3093\u306a\u30e6\u30fc\u30b6\u30fc\u540d\u3092\u6301\u3064\u30e6\u30fc\u30b6\u30fc\u304c\u3069\u3093\u306a\u30ea\u30dd\u30b8\u30c8\u30ea\u540d\u3092\u6301\u3064\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u304b\u3089\u3067\u3059\uff0e\u3064\u307e\u308a Github \u306e URI \u30d1\u30bf\u30fc\u30f3\u306f\uff0c\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b URI \u304c\u52d5\u7684\u306b\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\uff0e bamboo \u3067\u306f\u3053\u306e\u3088\u3046\u306a URI \u306e\u30d1\u30b9\u306e\u5b9a\u7fa9\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306b\uff0c \u30ed\u30b1\u30fc\u30b7\u30e7\u30f3 \u3068\u3044\u3046\u6982\u5ff5\u3092\u5c0e\u5165\u3057\u3066\u3044\u307e\u3059\uff0e\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u306f URI \u306e\u30d1\u30b9\u3092\u5206\u89e3\u3057\u305f\u3068\u304d\u306e1\u30641\u3064\u306e\u8981\u7d20\u306e\u3053\u3068\u3067\u3059\uff0e\u4f8b\u3048\u3070 /hello/client \u3068\u3044\u3046\u30d1\u30b9\u306f hello \u3068\u3044\u3046\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3068 client \u3068\u3044\u3046\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5206\u89e3\u3055\u308c\u307e\u3059\uff0e\u3055\u3089\u306b\uff0c\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306f\u6b21\u306e2\u3064\u306e\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059: \u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3 \u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3 \u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u306f\u958b\u767a\u6642\u306b\u56fa\u5b9a\u3055\u308c\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u3053\u3068\u3067\uff0c hello \u3084 client \u306f\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4e00\u7a2e\u3067\u3059\uff0e\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f str \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\uff0e\u4e00\u65b9\uff0c\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u3088\u3046\u306b\u56fa\u5b9a\u3055\u308c\u305a\uff0c\u3042\u308b\u898f\u5247\u306b\u5247\u3063\u305f\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8a31\u5bb9\u3057\u307e\u3059\uff0e\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f bamboo.FlexibleLocation \u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\uff0e\u4e00\u4f8b\u3068\u3057\u3066 bamboo \u306b\u306f AnyStringLocation \u3068\u3044\u3046\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u3069\u3093\u306a\u6587\u5b57\u5217\u3067\u3082\u8a31\u5bb9\u3059\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a31\u5bb9\u3059\u308b\u6587\u5b57\u6570\u306e\u6700\u5927\u5024\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\uff0e\u3053\u308c\u3092\u4f7f\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3055\u304d\u307b\u3069\u306e HelloEndpoint \u306e URI \u306e\u30d1\u30b9\u3092\u518d\u8a2d\u5b9a\u3057\u3066\u307f\u307e\u3059: from bamboo import AnyStringLocation app . route ( \"hello\" , AnyStringLocation ())( HelloEndpoint ) \u3053\u3046\u3059\u308b\u3068\uff0c\u3055\u304d\u307b\u3069\u307e\u3067\u306f /hello/client \u3057\u304b\u53d7\u3051\u4ed8\u3051\u306a\u304b\u3063\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\uff0c hello/world \u3084 hello/bamboo \u306e\u3088\u3046\u306a\u30d1\u30b9\u3082\u53d7\u3051\u4ed8\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\u5192\u982d\u306e Github \u306e URI \u306e\u30d1\u30b9\u3082\u3053\u306e\u3088\u3046\u306a\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3059\u308b\u3068\u7c21\u5358\u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\uff0e Note \u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u767b\u5834\u306b\u3088\u308a\uff0c\u958b\u767a\u6642\u306b\u8a2d\u5b9a\u3059\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d44\u307f\u5408\u308f\u305b\u3068\u5b9f\u969b\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u53d7\u3051\u53d6\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u6b63\u78ba\u306b\u306f\u4e00\u81f4\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f\uff0e\u4f8b\u3048\u3070\u958b\u767a\u6642\u306b (\"hello\", AnyStringLocation()) \u3068\u8a2d\u5b9a\u3057\u3066\u3082\uff0c\u5b9f\u969b\u306b\u53d7\u3051\u53d6\u308b\u306e\u306f (\"hello\", \"client\") \u3060\u3063\u305f\u308a (\"hello\", \"world\") \u3060\u3063\u305f\u308a\u3057\u307e\u3059\uff0e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u53d7\u3051\u53d6\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u300cURI \u306e\u30d1\u30b9\u300d\u3068\u547c\u3076\u5206\u306b\u306f\u66d6\u6627\u3055\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u304c\uff0c\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u542b\u3080\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u300cURI \u306e\u30d1\u30b9\u300d\u3068\u547c\u3076\u306e\u306f\u3075\u3055\u308f\u3057\u304f\u3042\u308a\u307e\u305b\u3093\uff0e\u3053\u306e\u3088\u3046\u306a\u7406\u7531\u304b\u3089\uff0cbamboo \u3067\u306f\u958b\u767a\u6642\u306b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u7d10\u4ed8\u3051\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u3053\u3068\u3092 URI \u30d1\u30bf\u30fc\u30f3 \u3068\u547c\u3093\u3067\u3044\u307e\u3059\uff0e \u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6ce8\u610f\u70b9 \u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u4e0a\u8ff0\u3057\u305f\u3088\u3046\u306b\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u30ab\u30d0\u30fc\u3067\u304d\u306a\u3044\u8868\u73fe\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u305d\u306e\u67d4\u8edf\u3055\u3086\u3048\u306b\u5371\u967a\u6027\u3082\u306f\u3089\u3093\u3067\u3044\u307e\u3059\uff0e\u307e\u305a\u306f\u4ee5\u4e0b\u306e\u4f8b\u3092\u898b\u3066\u304f\u3060\u3055\u3044: ```python app.route(\"superuser\", \"setting\")(SuperUserSettingEndpoint) app.route(AnyStringLocation(max=64), \"setting\")(UserSettingEndpoint) ``` \u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\uff0c\u7ba1\u7406\u8005\u3068\u4e00\u822c\u30e6\u30fc\u30b6\u30fc\u306e\u8a2d\u5b9a\u306e\u5909\u66f4\u3092\u884c\u3046\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u5dee\u5225\u5316\u3092\u56f3\u308d\u3046\u3068\u3057\u3066\u3044\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u3042\u308b\u30d1\u30b9\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306b\u306f\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u30d1\u30b9\u3068\u306f superuser/setting \u3067\u3059\uff0e\u306a\u305c\u306a\u3089\u3053\u306e\u30d1\u30b9\u306f\u4e00\u822c\u30e6\u30fc\u30b6\u30fc\u7528\u306e\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d44\u307f\u5408\u308f\u305b\u3068\u3057\u3066\u3082\u6709\u52b9\u3060\u304b\u3089\u3067\u3059\uff0e\u3057\u305f\u304c\u3063\u3066\uff0c2\u3064\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u5bfe\u3057\u3066\u6709\u52b9\u306a\u30d1\u30b9\u3068\u306a\u3063\u3066\u3057\u307e\u3044\uff0c\u610f\u56f3\u3057\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u5230\u9054\u3057\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff0e \u3053\u306e\u3088\u3046\u306a\u554f\u984c\u306b\u5bfe\u51e6\u3059\u308b\u305f\u3081\u306b\uff0cbamboo \u3067\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c\u6642\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u898f\u5247\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u767b\u9332\u3055\u308c\u305f\u5168\u3066\u306e\u7570\u306a\u308b2\u3064\u306e URI \u30d1\u30bf\u30fc\u30f3\u3092\u691c\u8a3c\u3057\u307e\u3059: URI \u30d1\u30bf\u30fc\u30f3\u306b\u542b\u307e\u308c\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6570\u304c\u7570\u306a\u308b\u5834\u5408\u306f\u6709\u52b9 URI \u30d1\u30bf\u30fc\u30f3\u306b\u542b\u307e\u308c\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6570\u304c\u540c\u3058\u3060\u304c\uff0c\u5185\u90e8\u306e\u540c\u4f4d\u7f6e\u306b\u3042\u308b\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u7570\u306a\u308b\u5834\u5408\u306f\u6709\u52b9 1, 2 \u306b\u5f53\u3066\u306f\u307e\u3089\u306a\u3044\u5834\u5408\u306f\u7121\u52b9 \u3053\u306e\u898f\u5247\u306f\u4f55\u3060\u304b\u96e3\u3057\u3052\u3067\u306f\u3042\u308a\u307e\u3059\u304c\uff0c\u7279\u306b\u6ce8\u610f\u3059\u3079\u304d\u70b9\u306f URI \u30d1\u30bf\u30fc\u30f3\u306b\u542b\u307e\u308c\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6570\u304c\u540c\u3058 URI \u30d1\u30bf\u30fc\u30f3\u306b\u5bfe\u3057\u3066\u306e\u307f\u3067\u3059\uff0e\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306b\uff0c\u4e0a\u8a18\u306e 2 \u756a\u3092\u6e80\u305f\u3057\u3066\u3044\u308c\u3070\uff0c\u6b63\u5e38\u306a URI \u30d1\u30bf\u30fc\u30f3\u3068\u3057\u3066\u51e6\u7406\u3055\u308c\u307e\u3059\uff0e\u4ee5\u4e0b\u306b\u3044\u304f\u3064\u304b\u4f8b\u3092\u6319\u3052\u307e\u3059\u306e\u3067\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff0e # \u6709\u52b9 (\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6570\u304c\u7570\u306a\u308b) app . route ( AnyStringLocation (), AnyStringLocation ())( Endpoint1 ) app . route ( AnyStringLocation (), AnyStringLocation (), AnyStringLocation ())( Endpoint2 ) # \u6709\u52b9 (\u540c\u4f4d\u7f6e\u306e\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u7570\u306a\u308b) app . route ( AnyStringLocation (), \"client\" )( Endpoint1 ) app . route ( AnyStringLocation (), \"server\" )( Endpoint2 ) # \u7121\u52b9 (\u540c\u4f4d\u7f6e\u306b\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u5b58\u5728\u3057\u306a\u3044) app . route ( AnyStringLocation (), AnyStringLocation ())( Endpoint1 ) app . route ( AnyStringLocation (), \"server\" )( Endpoint2 ) # \u7121\u52b9 (\u540c\u4f4d\u7f6e\u306e\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u540c\u3058) app . route ( AnyStringLocation (), \"client\" )( Endpoint1 ) app . route ( AnyStringLocation (), \"client\" )( Endpoint2 ) # \u6709\u52b9 (\u540c\u4f4d\u7f6e\u306e\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u7570\u306a\u308b) app . route ( \"superuser\" , \"setting\" , \"name\" )( Endpoint1 ) app . route ( AnyStringLocation (), \"setting\" , \"email\" )( Endpoint2 ) # \u7121\u52b9 (\u540c\u4f4d\u7f6e\u306e\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u540c\u3058) app . route ( \"superuser\" , \"setting\" , AnyStringLocation ())( Endpoint1 ) app . route ( AnyStringLocation (), \"setting\" , AnyStringLocation ())( Endpoint2 ) Tip URI \u30d1\u30bf\u30fc\u30f3\u306e\u8a2d\u8a08\u306f\u5c11\u3005\u795e\u7d4c\u8cea\u306b\u306a\u308b\u4f5c\u696d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u4e0a\u624b\u304f URI \u30d1\u30bf\u30fc\u30f3\u3092\u8a2d\u8a08\u3059\u308b\u30b3\u30c4\u306f\uff0c\u7121\u52b9\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u8a2d\u8a08\u3059\u308b\u306e\u3067\u306f\u306a\u304f\uff0c \u6709\u52b9\u306b\u306a\u308b\u3088\u3046\u306b\u8a2d\u8a08 \u3059\u308b\u3053\u3068\u3067\u3059\uff0e\u3064\u307e\u308a\u795e\u7d4c\u8cea\u306b\u306a\u308b\u306e\u306f\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6570\u304c\u540c\u3058\u6642\u3060\u3051\u3067\uff0c\u78ba\u8a8d\u3059\u3079\u304d\u306f\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4f4d\u7f6e\u3068\u305d\u306e\u5185\u5bb9\u3060\u3051\u3067\u3059\uff0e\u3061\u306a\u307f\u306b\uff0c\u7121\u52b9\u306a2\u3064\u306e URI \u30d1\u30bf\u30fc\u30f3\u691c\u51fa\u3055\u308c\u308b\u3068 bamboo \u306f DuplicatedUriRegisteredError \u3092\u9001\u51fa\u3057\u307e\u3059\uff0e\u3053\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3068\u304d\uff0c\u7121\u52b9\u3068\u5224\u65ad\u3055\u308c\u305f2\u3064\u306e URI \u30d1\u30bf\u30fc\u30f3\u304c\u51fa\u529b\u3055\u308c\u308b\u306e\u3067\uff0c\u305d\u306e\u5185\u5bb9\u3092\u5143\u306b\u5fc5\u8981\u306a\u90e8\u5206\u3092\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\uff0e \u72ec\u81ea\u306e\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5 \u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f bamboo.FlexibleLocation \u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\uff0e\u3064\u307e\u308a\uff0c FlexibleLocation \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\uff0c\u72ec\u81ea\u306e\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff0e\u5b9f\u88c5\u3059\u3079\u304d\u30e1\u30bd\u30c3\u30c9\u306f is_valid() \u30e1\u30bd\u30c3\u30c9\u305f\u30601\u3064\u3067\u3059\uff0e\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f FlexibleLocation \u3067\u306f\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u304a\u308a\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\uff0c\u81ea\u8eab\u306e\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u3075\u3055\u308f\u3057\u3044\u3082\u306e\u304b\u3092\u691c\u8a3c\u3057\u307e\u3059\uff0e\u3055\u304d\u307b\u3069\u7d39\u4ecb\u3057\u305f AnyStringLocation \u306f\u6587\u5b57\u6570\u304c\u6700\u5927\u5024\u3092\u8d85\u3048\u3066\u3044\u306a\u3044\u304b\u306e\u307f\u3092\u691c\u8a3c\u3059\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059 (\u6587\u5b57\u6570\u306e\u6700\u5927\u5024\u306e\u8a2d\u5b9a\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u306a\u306e\u3067\uff0c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u4f55\u3082\u691c\u8a3c\u3057\u306a\u3044\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306a\u308a\u307e\u3059)\uff0e \u4eca\u56de\u306f\u5b9f\u88c5\u4f8b\u3068\u3057\u3066\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57\u306e\u307f\u3092\u8a31\u5bb9\u3059\u308b\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u691c\u8a3c\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u884c\u3044\u307e\u3059: \u30d1\u30fc\u30bb\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30d1\u30b9\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b \u6587\u5b57\u5217\u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304b\u3064\u5c0f\u6587\u5b57\u3067\u3042\u308b\u3053\u3068\u3092\u691c\u8a3c\u3059\u308b \u5b9f\u969b\u306b\u5b9f\u88c5\u3057\u305f\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059: from urllib.parse import unquote from bamboo import FlexibleLocation class LowercaseAlphaLocation ( FlexibleLocation ): # loc \u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u305f URI \u306e # \u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u6e21\u3055\u308c\u308b def is_valid ( self , loc : str ) -> bool : loc = unquote ( loc ) return loc . isalpha () and loc . islower () \u3053\u306e\u4f5c\u6210\u3057\u305f\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e URI \u30d1\u30bf\u30fc\u30f3\u3092\u8a2d\u5b9a\u3059\u308b\u969b\u306b\u305d\u306e\u307e\u307e\u4f7f\u7528\u3067\u304d\u307e\u3059: app . route ( \"test\" , LowercaseAlphaLocation ())( SampleEndpoint ) \u3055\u304d\u307b\u3069\u5b9f\u88c5\u3057\u305f\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\uff0c\u6587\u5b57\u6570\u306e\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f\uff0c __init__() \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059 (\u7c21\u6613\u7684\u306a\u5b9f\u88c5\u3067\u3059) : class LowercaseAlphaLocation ( FlexibleLocation ): def __init__ ( self , max : int ) -> None : self . _max = max def is_valid ( self , loc : str ) -> bool : loc = unquote ( loc ) return loc . isalpha () and loc . islower () and len ( loc ) <= self . _max \u3053\u306e\u5834\u5408\u306f\uff0cURI \u30d1\u30bf\u30fc\u30f3\u306e\u8a2d\u5b9a\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059: app . route ( \"test\" , LowercaseAlphaLocation ( 5 ))( SampleEndpoint )","title":"\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0"},{"location":"tutorials/routing/#_1","text":"\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306f Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3059\u308b\u4e0a\u3067\u57fa\u672c\u3068\u306a\u308b\u8981\u7d20\u306e\u3046\u3061\u306e\u4e00\u3064\u3067\u3059\uff0e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306f\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u305f URI \u3092\u89e3\u91c8\u3057\uff0c\u305d\u308c\u306b\u898b\u5408\u3046\u51e6\u7406\u3092\u63a2\u3059\u5f79\u5272\u3092\u3057\u307e\u3059\uff0e\u3053\u3053\u3067\u306f\u307e\u305a\uff0c\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u672c\u8cea\u7684\u306b\u3069\u306e\u3088\u3046\u306b\u898b\u3048\u308b\u306e\u304b\u3092\u8aac\u660e\u3057\u307e\u3059\uff0e\u305d\u3057\u3066\u306a\u305c\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u6982\u5ff5\u304c\u767a\u751f\u3059\u308b\u306e\u304b\u306b\u3064\u3044\u3066\u8ff0\u3079\u307e\u3059\uff0e\u6b21\u306b\uff0cbamboo \u3067\u306f\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u3069\u306e\u3088\u3046\u306b\u5b9f\u884c\u3057\u3066\u3044\u308b\u306e\u304b\u306b\u3064\u3044\u3066\u8ff0\u3079\uff0cURI \u8a2d\u5b9a\u6642\u306b\u91cd\u8981\u3068\u306a\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3044\u3046\u6982\u5ff5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e Note \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u4ee5\u964d HTTP \u3067\u306e\u901a\u4fe1\u3092\u4eee\u5b9a\u3057\u307e\u3059\uff0e","title":"\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0"},{"location":"tutorials/routing/#_2","text":"\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u7406\u89e3\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u307e\u305a\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u3069\u306e\u3088\u3046\u306b\u898b\u3048\u3066\u3044\u308b\u306e\u304b\u3092\u77e5\u3063\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\u3042\u306a\u305f\u304c\u3053\u306e\u30da\u30fc\u30b8\u306e URI \u3067\u3042\u308b https://jjj999.github.io/bamboo/tutorials/routing/ \u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u3068\u3057\u307e\u3057\u3087\u3046\uff0e\u3059\u308b\u3068\u3042\u306a\u305f\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f github.io \u3068\u3044\u3046\u30c9\u30e1\u30a4\u30f3\u306b\u5bfe\u5fdc\u3059\u308b IP \u30a2\u30c9\u30ec\u30b9\u306b\u5411\u3051\u3066\u8ee2\u9001\u3055\u308c\u307e\u3059\uff0e\u305d\u306e\u884c\u304d\u5148\u306b\u306f\u3053\u306e\u30da\u30fc\u30b8\u3092\u7ba1\u7406\u3057\u3066\u3044\u308b\u30b5\u30fc\u30d0\u30fc\u304c\u5f85\u3061\u69cb\u3048\u3066\u3044\u307e\u3059\uff0e\u305d\u3057\u3066\u305d\u306e\u30b5\u30fc\u30d0\u30fc\u306f HTTP \u306b\u5247\u3063\u305f\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059: GET /bamboo/tutorials/routing/ HTTP/1.0 \u4ee5\u4e0b \u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9 -------- \u3053\u308c\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u5b9f\u969b\u306b\u9001\u4fe1\u3059\u308b\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u3059\uff0e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u901a\u5e38 \u30ea\u30af\u30a8\u30b9\u30c8\u884c \u30d8\u30c3\u30c0\u30d5\u30a3\u30fc\u30eb\u30c9 \u30dc\u30c7\u30a3 \u3067\u69cb\u6210\u3055\u308c\uff0c\u4e0a\u306e\u4f8b\u306e1\u884c\u76ee\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u884c\u306b\u3042\u305f\u308a\u307e\u3059\uff0e\u30ea\u30af\u30a8\u30b9\u30c8\u884c\u306f HTTP \u30e1\u30bd\u30c3\u30c9 URI \u306e\u30d1\u30b9 HTTP \u30d0\u30fc\u30b8\u30e7\u30f3 \u3092\u7a7a\u767d\u533a\u5207\u308a\u3067\u8a18\u5165\u3057\u305f\u3082\u306e\u3067\uff0c1\u884c\u306e\u307f\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\uff0e\u3053\u308c\u3053\u305d\u304c\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u304b\u3089\u898b\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u59ff\u3067\u3059\uff0e","title":"\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8"},{"location":"tutorials/routing/#_3","text":"\u4e0a\u306e\u8aac\u660e\u306f\u5c11\u3005\u9055\u548c\u611f\u304c\u3042\u308a\u307e\u3059\uff0e\u306a\u305c\u306a\u3089\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f https://jjj999.github.io/bamboo/tutorials/routing/ \u3068\u3044\u3046 URI \u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u306f\u305a\u306a\u306e\u306b\uff0c\u5b9f\u969b\u306b\u305d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u3063\u305f\u306e\u306f github.io \u306e\u30b5\u30fc\u30d0\u30fc\u306a\u306e\u3067\u3059\uff0e\u305d\u308c\u3067\u306f\u3069\u3046\u3084\u3063\u3066\u6b8b\u308a\u306e bamboo/tutorials/routing/ \u307e\u3067\u3092\u7279\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff0e\u5b9f\u306f\u305d\u308c\u3092\u884c\u3046\u306e\u306f\u30b5\u30fc\u30d0\u30fc\u306e\u4ed5\u4e8b\u306a\u306e\u3067\u3059\uff0e \u30b5\u30fc\u30d0\u30fc\u304c bamboo/tutorials/routing/ \u306e\u3088\u3046\u306a\u53d7\u3051\u53d6\u3063\u305f URI \u306e\u30d1\u30b9\u3092\u3069\u306e\u3088\u3046\u306b\u89e3\u91c8\u3057\u3066\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u304b\u306f\u57fa\u672c\u7684\u306b\u306f\u81ea\u7531\u3067\u3059\uff0e bamboo/tutorials/routing/ \u3092\u6307\u5b9a\u3055\u308c\u305f\u304b\u3089\u3068\u8a00\u3063\u3066\uff0c\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306b\u95a2\u4fc2\u3059\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u66f8\u304b\u308c\u305f HTML \u30d5\u30a1\u30a4\u30eb\u3092\u9001\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u305f\u3060\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306f\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306b\u95a2\u4fc2\u3059\u308b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u6c42\u3081\u3066\u305d\u306e URI \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u308f\u3051\u3067\u3059\u304b\u3089\uff0c\u305d\u308c\u306b\u76f8\u5fdc\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3079\u304d\u3067\u3059\uff0e \u30b5\u30fc\u30d0\u30fc\u3078\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u4f55\u3082 HTML \u30d5\u30a1\u30a4\u30eb\u3092\u9001\u308c\u3068\u3044\u3046\u547d\u4ee4\u3060\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u4f8b\u3048\u3070\uff0c\u30d6\u30e9\u30a6\u30b6\u3084\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u3067\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u3057\u3066\u30ed\u30b0\u30a4\u30f3\u3092\u3059\u308b\u5834\u5408\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u3042\u306a\u305f\u304c\u5165\u529b\u3057\u305f\u30c7\u30fc\u30bf\u306f\u4f55\u306b\u3088\u3063\u3066\u691c\u8a3c\u3055\u308c\uff0c\u4f55\u306b\u3088\u3063\u3066\u30ed\u30b0\u30a4\u30f3\u3092\u8a31\u53ef\u3055\u308c\u305f\u308a\u518d\u5165\u529b\u3092\u6c42\u3081\u3089\u308c\u305f\u308a\u3059\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff0e\u305d\u306e\u6b63\u4f53\u3082\u3084\u306f\u308a\u30b5\u30fc\u30d0\u30fc\u3067\u3059\uff0e\u3042\u306a\u305f\u304c\u30ed\u30b0\u30a4\u30f3\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u6c34\u9762\u4e0b\u3067\u306f\u7279\u5b9a\u306e URI \u3092\u6307\u5b9a\u3057\u3066\u30b5\u30fc\u30d0\u30fc\u5074\u306b\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u9001\u4fe1\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\uff0e\u305d\u3057\u3066\u30b5\u30fc\u30d0\u30fc\u306f\u3042\u306a\u305f\u304c\u5165\u529b\u3057\u305f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u898b\u3066\uff0c\u305d\u308c\u304c\u672c\u5f53\u306b\u6b63\u3057\u3044\u3082\u306e\u306a\u306e\u304b\u3092\u5185\u90e8\u3067\u691c\u8a3c\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u8fd4\u3057\u3066\u3044\u308b\u306e\u3067\u3059\uff0e\u305d\u306e\u3068\u304d\u30b5\u30fc\u30d0\u30fc\u306f\u30ed\u30b0\u30a4\u30f3\u5b8c\u4e86\u5f8c\u306e\u30b5\u30a4\u30c8\u3092 HTML \u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u9001\u4fe1\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3057\uff0c\u5358\u306b\u30ed\u30b0\u30a4\u30f3\u5b8c\u4e86\u3092\u793a\u3059\u5c0f\u3055\u306a\u30c6\u30ad\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u307f\u3092\u9001\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e \u3053\u3053\u307e\u3067\u6765\u308c\u3070\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u6982\u5ff5\u304c\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u3067\u3057\u3087\u3046\uff0e\u305a\u3070\u308a\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3068\u306f\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f URI \u306e\u30d1\u30b9\u3092\u89e3\u6790\u3057\u3066\uff0c\u3069\u3046\u3044\u3046\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u51e6\u7406\u3092\u884c\u3046\u304b\u3092\u7279\u5b9a\u3059\u308b\u3053\u3068\u3067\u3059\uff0e\u3042\u306a\u305f\u304c\u3053\u308c\u304b\u3089\u4f5c\u308d\u3046\u3068\u3059\u308b\u30b5\u30fc\u30d0\u30fc\u306b\u306f\u305f\u304f\u3055\u3093\u306e\u6a5f\u80fd\u304c\u76db\u308a\u8fbc\u307e\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u3057\u304b\u3057\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u305d\u306e\u6a5f\u80fd\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306b\u306f1\u30641\u3064\u306e\u6a5f\u80fd\u306b\u5bfe\u5fdc\u3057\u305f URI \u304c\u5fc5\u8981\u3067\u3059\uff0e\u305d\u306e URI (\u306e\u30d1\u30b9) \u306e\u5b9a\u7fa9\u306f\u3042\u306a\u305f\u81ea\u8eab\u304c\u884c\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0e","title":"\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u6982\u5ff5"},{"location":"tutorials/routing/#http","text":"\u3055\u304d\u307b\u3069\uff0c\u30b5\u30fc\u30d0\u30fc\u306f URI \u306e\u30d1\u30b9\u304b\u3089\u884c\u3046\u3079\u304d\u51e6\u7406\u3092\u6c7a\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u8ff0\u3079\u307e\u3057\u305f\uff0e\u3057\u304b\u3057\u5b9f\u969b\u306b\u306f URI \u306e\u30d1\u30b9\u306e\u4ed6\u306b\u3082\u3046\u4e00\u3064\u5fc5\u8981\u306a\u60c5\u5831\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u308c\u304c HTTP \u30e1\u30bd\u30c3\u30c9 \u3067\u3059\uff0eURI \u306e\u30d1\u30b9\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u5834\u6240\u3092\u8868\u3059\u306e\u3067\u3042\u308c\u3070\uff0cHTTP \u30e1\u30bd\u30c3\u30c9\u304c\u8868\u3059\u306e\u306f\u305d\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3067\u3059\uff0e\u305f\u3068\u3048\u3070\uff0c\u3042\u306a\u305f\u304c\u9280\u884c\u306b\u884c\u3063\u305f\u3068\u3057\u307e\u3057\u3087\u3046\uff0e\u305d\u306e\u9280\u884c\u306b\u306f\u3007\u3007\u652f\u5e97\u306a\u3069\u3068\u3044\u3046\u5e97\u540d\u304c\u4ed8\u3051\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u3067\u3057\u3087\u3046\uff0e\u305d\u308c\u306f URI \u306e\u30d1\u30b9\u3068\u4f3c\u305f\u767a\u60f3\u3067\u3059\uff0e\u4e00\u65b9\u3067\uff0c\u9280\u884c\u3067\u306f\u51fa\u6765\u308b\u3053\u3068\u306f\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\uff0e\u53e3\u5ea7\u304b\u3089\u73fe\u91d1\u306e\u5f15\u304d\u51fa\u3057\uff0c\u9810\u3051\u5165\u308c\uff0c\u4ed6\u53e3\u5ea7\u3078\u306e\u632f\u8fbc\uff0c\u7b49\u3005\u3067\u3059\uff0e\u3053\u308c\u3089\u306f\u3042\u306a\u305f\u304c\u9280\u884c\u306b\u884c\u3063\u305f\u969b\u306b\u884c\u3048\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u3067\u3042\u308a\uff0c HTTP \u30e1\u30bd\u30c3\u30c9 \u306b\u4f3c\u305f\u6982\u5ff5\u3067\u3059\uff0e \u6ce8\u610f\u3059\u3079\u304d\u3053\u3068\u306f HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u306f\u9650\u3089\u308c\u305f\u30a2\u30af\u30b7\u30e7\u30f3\u3057\u304b\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\u3042\u306a\u305f\u304c\u9280\u884c\u3067\u306f\u306a\u304f\u90f5\u4fbf\u5c40\u306b\u884c\u3051\u3070\uff0c\u3042\u306a\u305f\u306e\u884c\u3048\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5909\u308f\u308a\u307e\u3059\u304c\uff0cHTTP \u30e1\u30bd\u30c3\u30c9\u306f URI \u306e\u30d1\u30b9\u304c\u5909\u308f\u308d\u3046\u3068\u305d\u306e\u9078\u3079\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u306f\u5909\u308f\u308a\u307e\u305b\u3093\uff0e\u73fe\u5728 bamboo \u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059: GET HEAD POST PUT DELETE CONNECT OPTIONS TRACE PATCH Tip HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u306f\u305d\u308c\u305e\u308c\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u610f\u5473\u304c\u3042\u308a\u307e\u3059 ( \u53c2\u8003 )\uff0e\u610f\u5473\u3092\u7406\u89e3\u3057\u3066\u4e0a\u624b\u304f\u4f7f\u3044\u5206\u3051\u3066\u8a2d\u8a08\u3059\u308b\u3068\uff0c\u30b7\u30b9\u30c6\u30e0\u304c\u7f8e\u3057\u304f\u306a\u308a\u898b\u901a\u3057\u304c\u826f\u304f\u306a\u308a\u307e\u3059\uff0e","title":"HTTP \u30e1\u30bd\u30c3\u30c9"},{"location":"tutorials/routing/#bamboo","text":"bamboo \u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u65e2\u306b\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u6a5f\u80fd\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3055\u304d\u307b\u3069\u8ff0\u3079\u305f\u3088\u3046\u306b\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u51e6\u7406\u306f URI \u306e\u30d1\u30b9\u3068 HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u7279\u5b9a\u3055\u308c\u308b\u306e\u3067\uff0c\u305d\u308c\u3092\u4e88\u3081\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0ebamboo \u3067\u306f\u4ee5\u4e0b\u306e\u4f8b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\uff0e from bamboo import WSGIApp , WSGIEndpoint app = WSGIApp () # URI \u306e\u30d1\u30b9\u306e\u5b9a\u7fa9 @app . route ( \"hello\" , \"client\" ) class HelloEndpoint ( WSGIEndpoint ): # \u5bfe\u5fdc\u3059\u308b HTTP \u30e1\u30bd\u30c3\u30c9\u306e\u5b9a\u7fa9 def do_GET ( self ) -> None : self . send_body ( b \"Hello, Client!\" ) \u4e0a\u306e\u4f8b\u3067\u306f\u6b21\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u884c\u3092\u6301\u3064\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u9001\u3089\u308c\u3066\u304f\u308b\u3068\uff0c do_GET() \u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059: GET /hello/client HTTP/1.1 \u4e0a\u306e\u4f8b\u304b\u3089\u3082\u57a3\u9593\u898b\u3048\u308b\u3088\u3046\u306b\uff0cbamboo \u3067\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306f2\u6bb5\u968e\u3067\u884c\u308f\u308c\u307e\u3059: \u30ea\u30af\u30a8\u30b9\u30c8\u884c\u306e URI \u306e\u30d1\u30b9\u3092\u89e3\u6790\u3057\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7279\u5b9a\u3059\u308b \u7279\u5b9a\u3055\u308c\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u884c\u306e HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9 (\u4e0a\u306e\u4f8b\u3067\u306f do_GET() ) \u6301\u3063\u3066\u3044\u308b\u304b\u8abf\u3079\u308b \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3068 URI \u306e\u30d1\u30b9\u3092\u7d10\u4ed8\u3051\u308b\u51e6\u7406\u3092\u884c\u3046\u306e\u304c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e route() \u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u3042\u308a\uff0c\u305d\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u5bfe\u5fdc\u3057\u3066\u3044\u308b HTTP \u30e1\u30bd\u30c3\u30c9\u306f do_[METHOD]() \u306e\u547d\u540d\u898f\u5247\u3092\u6301\u3064\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u65ad\u3055\u308c\u307e\u3059\uff0e\u3061\u306a\u307f\u306b\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u5b9a\u7fa9\u6642\u3067\u306f\u306a\u304f\u5225\u306e\u5834\u6240\u3067 URI \u306e\u30d1\u30b9\u3092\u7d10\u3065\u3051\u305f\u3044\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b route() \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059: app . route ( \"hello\" , \"client\" )( HelloEndpoint ) Note \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u3044\u3046\u8a00\u8449\u306f\u3088\u304f\u3053\u306e URI \u306e\u30d1\u30b9\u3068\u3044\u3046\u610f\u5473\u3067\u4f7f\u308f\u308c\u307e\u3059\uff0e\u307e\u305f\uff0c\u30d1\u30b9\u3068\u3044\u3046\u8a00\u8449\u306f\u5143\u6765\u30ea\u30bd\u30fc\u30b9\u306e\u5728\u308a\u51e6\u3092\u6307\u3059\u8a00\u8449\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u3066\u304d\u307e\u3057\u305f\uff0e\u4e00\u65b9\u3067\uff0cbamboo \u306b\u304a\u3051\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u3053\u306e URI \u306e\u30d1\u30b9\u3068\u975e\u5e38\u306b\u5bc6\u63a5\u306a\u95a2\u4fc2\u3092\u6301\u3064\u6982\u5ff5\u3067\u3059\uff0ebamboo \u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u884c\u304d\u7740\u304f\u5834\u6240\u3067\u3042\u308a\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u3055\u308c\u308b\u5834\u6240\u3067\u3082\u3042\u308a\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c\u5e38\u306b\u304a\u91d1\u304c\u51fa\u5165\u308a\u3059\u308b\u9280\u884c\u306e\u652f\u5e97\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\uff0eURI \u306e\u30d1\u30b9\u3068\u3044\u3046\u306e\u306f\u4e00\u822c\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u305d\u3053\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u4ed8\u3051\u305f\u4f4f\u6240\u3067\u3042\u308a\uff0cbamboo \u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u3068\u3063\u3066\u306f\u6570\u3042\u308b\u5c5e\u6027\u306e\u3046\u3061\u306e\u4e00\u3064\u306e\u5c5e\u6027\u306b\u904e\u304e\u307e\u305b\u3093\uff0e","title":"bamboo \u3067\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0"},{"location":"tutorials/routing/#_4","text":"URI \u306e\u30d1\u30b9\u306b\u306f\u69d8\u3005\u306a\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0cGithub \u3067\u306f URI \u306e\u30d1\u30b9\u306f <\u30a2\u30ab\u30a6\u30f3\u30c8\u540d>/<\u30ea\u30dd\u30b8\u30c8\u30ea\u540d>/... \u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u308c\u306f\u30e6\u30fc\u30b6\u30fc\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u6271\u3046\u5834\u5408\u306b\u975e\u5e38\u306b\u6709\u7528\u306a\u30d1\u30b9\u306e\u5b9a\u7fa9\u3067\u3059\uff0e\u3057\u304b\u3057\uff0c\u3053\u308c\u3092\u5148\u7a0b\u306e\u4f8b\u306e\u3088\u3046\u306b bamboo \u3067\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u307b\u307c\u4e0d\u53ef\u80fd\u3067\u3059\uff0e\u306a\u305c\u306a\u3089\uff0c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u72b6\u614b\u3067\u306f\u3069\u3093\u306a\u30e6\u30fc\u30b6\u30fc\u540d\u3092\u6301\u3064\u30e6\u30fc\u30b6\u30fc\u304c\u3069\u3093\u306a\u30ea\u30dd\u30b8\u30c8\u30ea\u540d\u3092\u6301\u3064\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u304b\u3089\u3067\u3059\uff0e\u3064\u307e\u308a Github \u306e URI \u30d1\u30bf\u30fc\u30f3\u306f\uff0c\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b URI \u304c\u52d5\u7684\u306b\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3059\uff0e bamboo \u3067\u306f\u3053\u306e\u3088\u3046\u306a URI \u306e\u30d1\u30b9\u306e\u5b9a\u7fa9\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306b\uff0c \u30ed\u30b1\u30fc\u30b7\u30e7\u30f3 \u3068\u3044\u3046\u6982\u5ff5\u3092\u5c0e\u5165\u3057\u3066\u3044\u307e\u3059\uff0e\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u306f URI \u306e\u30d1\u30b9\u3092\u5206\u89e3\u3057\u305f\u3068\u304d\u306e1\u30641\u3064\u306e\u8981\u7d20\u306e\u3053\u3068\u3067\u3059\uff0e\u4f8b\u3048\u3070 /hello/client \u3068\u3044\u3046\u30d1\u30b9\u306f hello \u3068\u3044\u3046\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3068 client \u3068\u3044\u3046\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5206\u89e3\u3055\u308c\u307e\u3059\uff0e\u3055\u3089\u306b\uff0c\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306f\u6b21\u306e2\u3064\u306e\u7a2e\u985e\u304c\u3042\u308a\u307e\u3059: \u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3 \u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3 \u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u306f\u958b\u767a\u6642\u306b\u56fa\u5b9a\u3055\u308c\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u3053\u3068\u3067\uff0c hello \u3084 client \u306f\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4e00\u7a2e\u3067\u3059\uff0e\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f str \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\uff0e\u4e00\u65b9\uff0c\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u3088\u3046\u306b\u56fa\u5b9a\u3055\u308c\u305a\uff0c\u3042\u308b\u898f\u5247\u306b\u5247\u3063\u305f\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8a31\u5bb9\u3057\u307e\u3059\uff0e\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f bamboo.FlexibleLocation \u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\uff0e\u4e00\u4f8b\u3068\u3057\u3066 bamboo \u306b\u306f AnyStringLocation \u3068\u3044\u3046\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u3069\u3093\u306a\u6587\u5b57\u5217\u3067\u3082\u8a31\u5bb9\u3059\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a31\u5bb9\u3059\u308b\u6587\u5b57\u6570\u306e\u6700\u5927\u5024\u3092\u6307\u5b9a\u3067\u304d\u307e\u3059\uff0e\u3053\u308c\u3092\u4f7f\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3055\u304d\u307b\u3069\u306e HelloEndpoint \u306e URI \u306e\u30d1\u30b9\u3092\u518d\u8a2d\u5b9a\u3057\u3066\u307f\u307e\u3059: from bamboo import AnyStringLocation app . route ( \"hello\" , AnyStringLocation ())( HelloEndpoint ) \u3053\u3046\u3059\u308b\u3068\uff0c\u3055\u304d\u307b\u3069\u307e\u3067\u306f /hello/client \u3057\u304b\u53d7\u3051\u4ed8\u3051\u306a\u304b\u3063\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\uff0c hello/world \u3084 hello/bamboo \u306e\u3088\u3046\u306a\u30d1\u30b9\u3082\u53d7\u3051\u4ed8\u3051\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\u5192\u982d\u306e Github \u306e URI \u306e\u30d1\u30b9\u3082\u3053\u306e\u3088\u3046\u306a\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5229\u7528\u3059\u308b\u3068\u7c21\u5358\u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\uff0e Note \u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u767b\u5834\u306b\u3088\u308a\uff0c\u958b\u767a\u6642\u306b\u8a2d\u5b9a\u3059\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d44\u307f\u5408\u308f\u305b\u3068\u5b9f\u969b\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u53d7\u3051\u53d6\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u6b63\u78ba\u306b\u306f\u4e00\u81f4\u3057\u306a\u304f\u306a\u308a\u307e\u3057\u305f\uff0e\u4f8b\u3048\u3070\u958b\u767a\u6642\u306b (\"hello\", AnyStringLocation()) \u3068\u8a2d\u5b9a\u3057\u3066\u3082\uff0c\u5b9f\u969b\u306b\u53d7\u3051\u53d6\u308b\u306e\u306f (\"hello\", \"client\") \u3060\u3063\u305f\u308a (\"hello\", \"world\") \u3060\u3063\u305f\u308a\u3057\u307e\u3059\uff0e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u53d7\u3051\u53d6\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u300cURI \u306e\u30d1\u30b9\u300d\u3068\u547c\u3076\u5206\u306b\u306f\u66d6\u6627\u3055\u306f\u767a\u751f\u3057\u307e\u305b\u3093\u304c\uff0c\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u542b\u3080\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u300cURI \u306e\u30d1\u30b9\u300d\u3068\u547c\u3076\u306e\u306f\u3075\u3055\u308f\u3057\u304f\u3042\u308a\u307e\u305b\u3093\uff0e\u3053\u306e\u3088\u3046\u306a\u7406\u7531\u304b\u3089\uff0cbamboo \u3067\u306f\u958b\u767a\u6642\u306b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u7d10\u4ed8\u3051\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d44\u307f\u5408\u308f\u305b\u306e\u3053\u3068\u3092 URI \u30d1\u30bf\u30fc\u30f3 \u3068\u547c\u3093\u3067\u3044\u307e\u3059\uff0e","title":"\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3"},{"location":"tutorials/routing/#_5","text":"\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u4e0a\u8ff0\u3057\u305f\u3088\u3046\u306b\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f\u30ab\u30d0\u30fc\u3067\u304d\u306a\u3044\u8868\u73fe\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u305d\u306e\u67d4\u8edf\u3055\u3086\u3048\u306b\u5371\u967a\u6027\u3082\u306f\u3089\u3093\u3067\u3044\u307e\u3059\uff0e\u307e\u305a\u306f\u4ee5\u4e0b\u306e\u4f8b\u3092\u898b\u3066\u304f\u3060\u3055\u3044: ```python app.route(\"superuser\", \"setting\")(SuperUserSettingEndpoint) app.route(AnyStringLocation(max=64), \"setting\")(UserSettingEndpoint) ``` \u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\uff0c\u7ba1\u7406\u8005\u3068\u4e00\u822c\u30e6\u30fc\u30b6\u30fc\u306e\u8a2d\u5b9a\u306e\u5909\u66f4\u3092\u884c\u3046\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u5dee\u5225\u5316\u3092\u56f3\u308d\u3046\u3068\u3057\u3066\u3044\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f\u3042\u308b\u30d1\u30b9\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u306b\u306f\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u30d1\u30b9\u3068\u306f superuser/setting \u3067\u3059\uff0e\u306a\u305c\u306a\u3089\u3053\u306e\u30d1\u30b9\u306f\u4e00\u822c\u30e6\u30fc\u30b6\u30fc\u7528\u306e\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7d44\u307f\u5408\u308f\u305b\u3068\u3057\u3066\u3082\u6709\u52b9\u3060\u304b\u3089\u3067\u3059\uff0e\u3057\u305f\u304c\u3063\u3066\uff0c2\u3064\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u5bfe\u3057\u3066\u6709\u52b9\u306a\u30d1\u30b9\u3068\u306a\u3063\u3066\u3057\u307e\u3044\uff0c\u610f\u56f3\u3057\u305f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u5230\u9054\u3057\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff0e \u3053\u306e\u3088\u3046\u306a\u554f\u984c\u306b\u5bfe\u51e6\u3059\u308b\u305f\u3081\u306b\uff0cbamboo \u3067\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u5b9f\u884c\u6642\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u898f\u5247\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u767b\u9332\u3055\u308c\u305f\u5168\u3066\u306e\u7570\u306a\u308b2\u3064\u306e URI \u30d1\u30bf\u30fc\u30f3\u3092\u691c\u8a3c\u3057\u307e\u3059: URI \u30d1\u30bf\u30fc\u30f3\u306b\u542b\u307e\u308c\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6570\u304c\u7570\u306a\u308b\u5834\u5408\u306f\u6709\u52b9 URI \u30d1\u30bf\u30fc\u30f3\u306b\u542b\u307e\u308c\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6570\u304c\u540c\u3058\u3060\u304c\uff0c\u5185\u90e8\u306e\u540c\u4f4d\u7f6e\u306b\u3042\u308b\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u7570\u306a\u308b\u5834\u5408\u306f\u6709\u52b9 1, 2 \u306b\u5f53\u3066\u306f\u307e\u3089\u306a\u3044\u5834\u5408\u306f\u7121\u52b9 \u3053\u306e\u898f\u5247\u306f\u4f55\u3060\u304b\u96e3\u3057\u3052\u3067\u306f\u3042\u308a\u307e\u3059\u304c\uff0c\u7279\u306b\u6ce8\u610f\u3059\u3079\u304d\u70b9\u306f URI \u30d1\u30bf\u30fc\u30f3\u306b\u542b\u307e\u308c\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6570\u304c\u540c\u3058 URI \u30d1\u30bf\u30fc\u30f3\u306b\u5bfe\u3057\u3066\u306e\u307f\u3067\u3059\uff0e\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306b\uff0c\u4e0a\u8a18\u306e 2 \u756a\u3092\u6e80\u305f\u3057\u3066\u3044\u308c\u3070\uff0c\u6b63\u5e38\u306a URI \u30d1\u30bf\u30fc\u30f3\u3068\u3057\u3066\u51e6\u7406\u3055\u308c\u307e\u3059\uff0e\u4ee5\u4e0b\u306b\u3044\u304f\u3064\u304b\u4f8b\u3092\u6319\u3052\u307e\u3059\u306e\u3067\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff0e # \u6709\u52b9 (\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6570\u304c\u7570\u306a\u308b) app . route ( AnyStringLocation (), AnyStringLocation ())( Endpoint1 ) app . route ( AnyStringLocation (), AnyStringLocation (), AnyStringLocation ())( Endpoint2 ) # \u6709\u52b9 (\u540c\u4f4d\u7f6e\u306e\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u7570\u306a\u308b) app . route ( AnyStringLocation (), \"client\" )( Endpoint1 ) app . route ( AnyStringLocation (), \"server\" )( Endpoint2 ) # \u7121\u52b9 (\u540c\u4f4d\u7f6e\u306b\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u5b58\u5728\u3057\u306a\u3044) app . route ( AnyStringLocation (), AnyStringLocation ())( Endpoint1 ) app . route ( AnyStringLocation (), \"server\" )( Endpoint2 ) # \u7121\u52b9 (\u540c\u4f4d\u7f6e\u306e\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u540c\u3058) app . route ( AnyStringLocation (), \"client\" )( Endpoint1 ) app . route ( AnyStringLocation (), \"client\" )( Endpoint2 ) # \u6709\u52b9 (\u540c\u4f4d\u7f6e\u306e\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u7570\u306a\u308b) app . route ( \"superuser\" , \"setting\" , \"name\" )( Endpoint1 ) app . route ( AnyStringLocation (), \"setting\" , \"email\" )( Endpoint2 ) # \u7121\u52b9 (\u540c\u4f4d\u7f6e\u306e\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u540c\u3058) app . route ( \"superuser\" , \"setting\" , AnyStringLocation ())( Endpoint1 ) app . route ( AnyStringLocation (), \"setting\" , AnyStringLocation ())( Endpoint2 ) Tip URI \u30d1\u30bf\u30fc\u30f3\u306e\u8a2d\u8a08\u306f\u5c11\u3005\u795e\u7d4c\u8cea\u306b\u306a\u308b\u4f5c\u696d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u4e0a\u624b\u304f URI \u30d1\u30bf\u30fc\u30f3\u3092\u8a2d\u8a08\u3059\u308b\u30b3\u30c4\u306f\uff0c\u7121\u52b9\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u8a2d\u8a08\u3059\u308b\u306e\u3067\u306f\u306a\u304f\uff0c \u6709\u52b9\u306b\u306a\u308b\u3088\u3046\u306b\u8a2d\u8a08 \u3059\u308b\u3053\u3068\u3067\u3059\uff0e\u3064\u307e\u308a\u795e\u7d4c\u8cea\u306b\u306a\u308b\u306e\u306f\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6570\u304c\u540c\u3058\u6642\u3060\u3051\u3067\uff0c\u78ba\u8a8d\u3059\u3079\u304d\u306f\u9759\u7684\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4f4d\u7f6e\u3068\u305d\u306e\u5185\u5bb9\u3060\u3051\u3067\u3059\uff0e\u3061\u306a\u307f\u306b\uff0c\u7121\u52b9\u306a2\u3064\u306e URI \u30d1\u30bf\u30fc\u30f3\u691c\u51fa\u3055\u308c\u308b\u3068 bamboo \u306f DuplicatedUriRegisteredError \u3092\u9001\u51fa\u3057\u307e\u3059\uff0e\u3053\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3068\u304d\uff0c\u7121\u52b9\u3068\u5224\u65ad\u3055\u308c\u305f2\u3064\u306e URI \u30d1\u30bf\u30fc\u30f3\u304c\u51fa\u529b\u3055\u308c\u308b\u306e\u3067\uff0c\u305d\u306e\u5185\u5bb9\u3092\u5143\u306b\u5fc5\u8981\u306a\u90e8\u5206\u3092\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\uff0e","title":"\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6ce8\u610f\u70b9"},{"location":"tutorials/routing/#_6","text":"\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f bamboo.FlexibleLocation \u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\uff0e\u3064\u307e\u308a\uff0c FlexibleLocation \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\uff0c\u72ec\u81ea\u306e\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff0e\u5b9f\u88c5\u3059\u3079\u304d\u30e1\u30bd\u30c3\u30c9\u306f is_valid() \u30e1\u30bd\u30c3\u30c9\u305f\u30601\u3064\u3067\u3059\uff0e\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f FlexibleLocation \u3067\u306f\u62bd\u8c61\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u304a\u308a\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\uff0c\u81ea\u8eab\u306e\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u3075\u3055\u308f\u3057\u3044\u3082\u306e\u304b\u3092\u691c\u8a3c\u3057\u307e\u3059\uff0e\u3055\u304d\u307b\u3069\u7d39\u4ecb\u3057\u305f AnyStringLocation \u306f\u6587\u5b57\u6570\u304c\u6700\u5927\u5024\u3092\u8d85\u3048\u3066\u3044\u306a\u3044\u304b\u306e\u307f\u3092\u691c\u8a3c\u3059\u308b\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3059 (\u6587\u5b57\u6570\u306e\u6700\u5927\u5024\u306e\u8a2d\u5b9a\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u306a\u306e\u3067\uff0c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u4f55\u3082\u691c\u8a3c\u3057\u306a\u3044\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u306a\u308a\u307e\u3059)\uff0e \u4eca\u56de\u306f\u5b9f\u88c5\u4f8b\u3068\u3057\u3066\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u5c0f\u6587\u5b57\u306e\u307f\u3092\u8a31\u5bb9\u3059\u308b\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u691c\u8a3c\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u884c\u3044\u307e\u3059: \u30d1\u30fc\u30bb\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30d1\u30b9\u3092\u30c7\u30b3\u30fc\u30c9\u3059\u308b \u6587\u5b57\u5217\u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u304b\u3064\u5c0f\u6587\u5b57\u3067\u3042\u308b\u3053\u3068\u3092\u691c\u8a3c\u3059\u308b \u5b9f\u969b\u306b\u5b9f\u88c5\u3057\u305f\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059: from urllib.parse import unquote from bamboo import FlexibleLocation class LowercaseAlphaLocation ( FlexibleLocation ): # loc \u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u305f URI \u306e # \u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u6e21\u3055\u308c\u308b def is_valid ( self , loc : str ) -> bool : loc = unquote ( loc ) return loc . isalpha () and loc . islower () \u3053\u306e\u4f5c\u6210\u3057\u305f\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e URI \u30d1\u30bf\u30fc\u30f3\u3092\u8a2d\u5b9a\u3059\u308b\u969b\u306b\u305d\u306e\u307e\u307e\u4f7f\u7528\u3067\u304d\u307e\u3059: app . route ( \"test\" , LowercaseAlphaLocation ())( SampleEndpoint ) \u3055\u304d\u307b\u3069\u5b9f\u88c5\u3057\u305f\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\uff0c\u6587\u5b57\u6570\u306e\u6700\u5927\u5024\u3092\u8a2d\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f\uff0c __init__() \u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059 (\u7c21\u6613\u7684\u306a\u5b9f\u88c5\u3067\u3059) : class LowercaseAlphaLocation ( FlexibleLocation ): def __init__ ( self , max : int ) -> None : self . _max = max def is_valid ( self , loc : str ) -> bool : loc = unquote ( loc ) return loc . isalpha () and loc . islower () and len ( loc ) <= self . _max \u3053\u306e\u5834\u5408\u306f\uff0cURI \u30d1\u30bf\u30fc\u30f3\u306e\u8a2d\u5b9a\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059: app . route ( \"test\" , LowercaseAlphaLocation ( 5 ))( SampleEndpoint )","title":"\u72ec\u81ea\u306e\u30d5\u30ec\u30ad\u30b7\u30d6\u30eb\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5"},{"location":"tutorials/sample_app/","text":"\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b \u3053\u3053\u3067\u306f bamboo \u306b\u3088\u308b\u5b9f\u88c5\u306b\u6163\u308c\u308b\u305f\u3081\u306b\uff0c\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u4eca\u56de\u5b9f\u88c5\u3059\u308b\u306e\u306f\u30e2\u30ce\u30ea\u30b7\u30c3\u30af\u306a\u30b5\u30fc\u30d0\u30fc\u3067\u3059\u304c\uff0c\u3053\u308c\u3092\u5fdc\u7528\u3059\u308b\u3053\u3068\u3067\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u5247\u3063\u305f\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\uff0e \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u7a2e\u985e bamboo \u306b\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\uff0e\u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u306f\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u6839\u5e95\u306e\u6982\u5ff5\u81ea\u4f53\u306f\u5171\u901a\u3067\u3059\u304c\uff0c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3084\u30d7\u30ed\u30c8\u30b3\u30eb\u306a\u3069\u306b\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\uff0e\u73fe\u5728\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059 (\u4eca\u5f8c\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306b\u3088\u308a\u8ffd\u52a0\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059) : WSGIEndpoint (WSGI\u30fbHTTP \u3092\u30b5\u30dd\u30fc\u30c8) ASGIHTTPEndpoint (ASGI\u30fbHTTP \u3092\u30b5\u30dd\u30fc\u30c8) \u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f WSGIEndpoint \u3092\u4f7f\u3063\u3066\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\uff0e Note \u7279\u5b9a\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3057\u304b\u767b\u9332\u3067\u304d\u307e\u305b\u3093\uff0e\u4f8b\u3048\u3070 WSGIEndpoint \u30af\u30e9\u30b9\u306e\u5834\u5408\u306f WSGIApp \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff0c ASGIHTTPEndpoint \u306e\u5834\u5408\u306f ASGIHTTPApp \u306b\u3057\u304b\u767b\u9332\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u305b\u3093\uff0e \u5b9f\u88c5\u306e\u6d41\u308c bamboo \u306b\u3088\u308b\u958b\u767a\u306b\u304a\u3051\u308b\u307b\u3068\u3093\u3069\u306e\u4f5c\u696d\u306f\uff0c \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306e\u5b9f\u88c5 \u3067\u3059\uff0e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306f\u63a1\u7528\u3057\u305f\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u3088\u3063\u3066\uff0c\u305d\u306e\u5143\u3068\u306a\u308b\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u304c\u7570\u306a\u308a\u307e\u3059\uff0e\u4e0a\u8ff0\u3057\u305f\u3088\u3046\u306b\u4eca\u56de\u306f WSGIEndpoint \u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\uff0c\u3053\u306e\u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\uff0e \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u6d41\u308c\u3067\u884c\u3063\u3066\u3044\u304d\u307e\u3059: URI \u3092\u6c7a\u3081\u308b setup \u30e1\u30bd\u30c3\u30c9\u306b\u521d\u671f\u5316\u51e6\u7406\u3092\u66f8\u304f (\u4eca\u56de\u306f\u7701\u7565) \u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u88c5\u3059\u308b Endpoint \u306e\u5b9f\u88c5 \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6982\u8981 \u4eca\u56de\u4f5c\u6210\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6a5f\u80fd\u306f \u30ea\u30af\u30a8\u30b9\u30c8\u3067\u9001\u3089\u308c\u3066\u304d\u305f\u30c6\u30ad\u30b9\u30c8\u3092\u53cd\u8ee2\u3055\u305b\u3066\u8fd4\u3059 \u3068\u3044\u3046\u3082\u306e\u3067\u3059\uff0e\u4f8b\u3048\u3070\uff0c { \"token\" : \"abcdefg\" } \u3068\u3044\u3046 Json \u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\uff0c { \"result\" : \"gfedcba\" } \u3068\u3044\u3046\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3057\u307e\u3059\uff0e\u5165\u51fa\u529b\u306e JSON \u30b9\u30ad\u30fc\u30de\u306f\u4e0a\u306e\u4f8b\u306e\u3082\u306e\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3059\uff0e\u3067\u306f\u3055\u3063\u305d\u304f\u4f5c\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0e URI \u3092\u6c7a\u3081\u308b \u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f URI \u3092\u89e3\u6790\u3057\u3066\u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u63a2\u3057\u5f53\u3066\u308b\u305f\u3081\u306b\u306f\u4e8b\u524d\u306e\u6e96\u5099\u304c\u5fc5\u8981\u3067\u3059\uff0e\u305d\u306e\u6e96\u5099\u3068\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b URI \u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5bfe\u5fdc\u8868\u3092\u6e21\u3059\u3053\u3068\u3067\u3059\uff0e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u305d\u306e\u5bfe\u5fdc\u8868\u3055\u3048\u3042\u308c\u3070\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f URI \u306b\u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3068 URI \u3092\u7d10\u4ed8\u3051\u308b\u305f\u3081\u306b\u306f\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e route \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u540d\u306f UpsideDownEndpoint \u3068\u547d\u540d\u3057\u307e\u3057\u305f (\u304a\u597d\u304d\u306a\u3082\u306e\u3067\u69cb\u3044\u307e\u305b\u3093) \uff0e from bamboo import WSGIApp , WSGIEndpoint app = WSGIApp () # URI \u306e\u6307\u5b9a # http://host:port/upsidedown \u3067\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308b @app . route ( \"upsidedown\" ) class UpsideDownEndpoint ( WSGIEndpoint ): pass \u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u88c5\u3059\u308b \u6b21\u306b\u6700\u3082\u91cd\u8981\u306a\u5de5\u7a0b\u3067\u3042\u308b\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306e\u5b9f\u88c5\u306b\u79fb\u308a\u307e\u3057\u3087\u3046\uff0e\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3068\u306f\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3078\u306e\u5bfe\u51e6\u306e\u4ed5\u65b9\u306e\u3053\u3068\u3067\u3059\uff0e\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306f\u305d\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u3069\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3092\u6301\u305f\u305b\u305f\u3044\u304b\u3067\u69d8\u3005\u306b\u5909\u5316\u3057\u307e\u3059\uff0e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u306f\u305d\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u3088\u3063\u3066\uff0c\u5358\u7d14\u306b HTML \u30d5\u30a1\u30a4\u30eb\u3092\u8fd4\u3059\u3082\u306e\u3082\u3042\u308c\u3070\uff0c\u8a8d\u8a3c\u3092\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u306e\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u3082\u8003\u3048\u3089\u308c\u307e\u3059\uff0e \u4eca\u4f5c\u6210\u3057\u3066\u3044\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067\u306f\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f JSON \u30c7\u30fc\u30bf\u306e\u4e2d\u304b\u3089\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u308a\u51fa\u3057\uff0c\u305d\u306e\u30c8\u30fc\u30af\u30f3\u3092\u53cd\u8ee2\u3055\u305b\u305f\u3082\u306e\u3092 JSON \u5f62\u5f0f\u3067\u8fd4\u3059\u3068\u3044\u3046\u306e\u304c\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\uff0e\u4ee5\u4e0b\u3067\u306f\u305d\u306e\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3092 bamboo \u3067\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9 HTTP \u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u306f \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9 \u3068\u3044\u3046\u7279\u5225\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u5b58\u5728\u3057\u307e\u3059\uff0e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306f\uff0c\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u308b\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3053\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3055\u305b\u307e\u3059\uff0e \u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3057\u3087\u3046\uff0e\u4e0a\u8ff0\u3057\u305f\u3088\u3046\u306b\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f URI \u3092\u89e3\u6790\u3059\u308b\u3053\u3068\u3067\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7279\u5b9a\u3057\u307e\u3059\uff0e\u4e00\u65b9\u3067\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u5185\u306e\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f HTTP \u30e1\u30bd\u30c3\u30c9\u3067\u7279\u5b9a\u3055\u308c\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u306f\u3044\u304f\u3064\u304b\u306e HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u3053\u308c\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u305f\u308b\u6240\u4ee5\u3067\u3082\u3042\u308a\u307e\u3059\uff0e\u3059\u306a\u308f\u3061\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u30a2\u30af\u30bb\u30b9\u3057\u3066\u51e6\u7406\u3092\u884c\u3063\u3066\u3082\u3089\u3046\u5834\u6240 \u306a\u306e\u3067\u3042\u308a\uff0c\u305d\u306e\u5834\u6240\u306b\u884c\u3051\u3070 GET \u3084 POST \u306a\u3069\u306e\u76ee\u7684\u306b\u3042\u3063\u305f\u51e6\u7406\u3092\u884c\u3063\u3066\u3082\u3089\u3048\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\uff0e \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u3044\u304f\u3064\u304b\u306e\u6c7a\u307e\u308a\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u4e2d\u3067\u3082\u6700\u3082\u91cd\u8981\u306a\u306e\u306f\u305d\u306e \u547d\u540d\u898f\u5247 \u3067\u3059\uff0e\u4e0b\u8868\u306f HTTP \u30e1\u30bd\u30c3\u30c9\u3068\u305d\u308c\u3092\u30e1\u30bd\u30c3\u30c9\u3092\u6307\u5b9a\u3057\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u540d\u524d\u306e\u5bfe\u5fdc\u8868\u3067\u3059\uff0e HTTP \u30e1\u30bd\u30c3\u30c9 \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u540d GET do_GET POST do_POST PUT do_PUT DELETE do_DELETE HEAD do_HEAD OPTIONS do_OPTIONS PATCH do_PATCH TRACE do_TRACE CONNECT do_CONNECT \u4e0a\u306e\u8868\u3067\u51fa\u3066\u304d\u305f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u540d\u306f\u5168\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u5b9f\u88c5\u3057\u305f\u3044\u3082\u306e\u3060\u3051\u5b9f\u88c5\u3059\u308c\u3070 OK \u3067\u3059\uff0e\u307e\u305f\uff0c\u8907\u6570\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\uff0e Tip HTTP \u30e1\u30bd\u30c3\u30c9\u306e\u793a\u3059\u610f\u5473\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306e\u6319\u52d5\u306f\u30de\u30c3\u30c1\u3055\u305b\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\uff0e\u4f8b\u3048\u3070\u3042\u306a\u305f\u304c\u753b\u50cf\u6295\u7a3f\u30a2\u30d7\u30ea\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308b\u3068\u3057\u3066\uff0c\u753b\u50cf\u306e\u53d6\u5f97\u3068\u753b\u50cf\u306e\u6295\u7a3f\u3092\u540c\u3058\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067\u884c\u3046\u3068\u3057\u307e\u3057\u3087\u3046\uff0e\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306f\uff0c\u753b\u50cf\u306e\u53d6\u5f97\u3092\u51e6\u7406\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306f do_GET() \uff0c\u753b\u50cf\u306e\u6295\u7a3f\u3092\u51e6\u7406\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306f do_POST() \u306b\u3059\u308b\u306e\u304c\u610f\u5473\u5408\u3044\u7684\u306b\u81ea\u7136\u3067\u3057\u3087\u3046\uff0e\u3053\u308c\u304c\u3082\u3057\u9006\u3067\u3042\u3063\u305f\u3089\uff0cHTTP \u30e1\u30bd\u30c3\u30c9\u306e\u610f\u5473\u3068\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306e\u6319\u52d5\u306f\u304b\u3051\u96e2\u308c\u305f\u3082\u306e\u306b\u306a\u308a\uff0c\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u5074\u306e\u958b\u767a\u8005\u304b\u3089\u5acc\u304c\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0eHTTP \u30e1\u30bd\u30c3\u30c9\u306f\u5358\u306a\u308b\u540d\u524d\u3067\u3042\u308a\uff0c\u305d\u306e\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306b\u3064\u3044\u3066\u306f\u958b\u767a\u8005\u306b\u4e00\u4efb\u3055\u308c\u308b\u3068\u3044\u3046\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e Note \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068\u306f\uff0c\u7279\u5b9a\u306e\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570 (Python \u3067\u306f Callable \u3068\u547c\u3070\u308c\u307e\u3059) \u3067\u3059\uff0e do_GET() \u306f\u300c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u305d\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b GET \u3068\u3044\u3046 HTTP \u30e1\u30bd\u30c3\u30c9\u304c\u9001\u3089\u308c\u3066\u304d\u305f\u300d\u3068\u3044\u3046\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308a\uff0c\u4e00\u7a2e\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068\u8a00\u3048\u307e\u3059\uff0e do_GET() \u4ee5\u5916\u306e\u4ed6\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u3067\u3059\uff0e \u4eca\u56de\u306f GET \u30e1\u30bd\u30c3\u30c9\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\uff0e\u3053\u306e\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059: @app . route ( \"upsidedown\" ) class UpsideDownEndpoint ( WSGIEndpoint ): def do_GET ( self ) -> None : # \u5f8c\u307b\u3069\u5b9f\u88c5 API \u306e\u5b9a\u7fa9 Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u4e0a\u3067\u6700\u3082\u91cd\u8981\u306a\u3053\u3068\u306e1\u3064\u306b Web API \u306e\u5b9a\u7fa9\u304c\u3042\u308a\u307e\u3059\uff0eAPI \u306f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4ed5\u69d8\u306a\u3069\u306e\u3053\u3068\u3092\u6307\u3059\u62bd\u8c61\u7684\u306a\u7528\u8a9e\u3067\u3059\u304c\uff0cWeb API \u3068\u3044\u3046\u3068\u304d\u306b\u306f\uff0c\u3042\u308b URI \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u969b\u306e\u5165\u51fa\u529b\u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3068\u3044\u3046\u610f\u5473\u3067\u4f7f\u308f\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\uff0e\u4ee5\u4e0b\u3067\u3082\u305d\u306e\u3088\u3046\u306a\u610f\u5473\u3092\u6301\u3064\u8a00\u8449\u3068\u3057\u3066\u6271\u3063\u3066\u3044\u304f\u3053\u3068\u306b\u3057\u307e\u3059\uff0e Warninig \u4e00\u90e8\u30b5\u30a4\u30c8\u3067\u306f API \u306f\u4f55\u304b\u7279\u5225\u306a\u6a5f\u80fd\u3092\u6301\u3063\u305f\u3082\u306e\u304b\u306e\u3088\u3046\u306b\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u4e0a\u8ff0\u3057\u305f\u3088\u3046\u306b API \u3068\u3044\u3046\u7528\u8a9e\u306f\u5358\u306a\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4ed5\u69d8\u3084\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u904e\u304e\u307e\u305b\u3093\uff0e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u306f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u3057\u3066\u8a8d\u8b58\u3067\u304d\u308b\u3082\u306e\u306e\u3053\u3068\u3092\u6f20\u7136\u3068\u6307\u3059\u7528\u8a9e\u3067\u3042\u308a\uff0c\u898f\u6a21\u306e\u5c0f\u3055\u3044\u3082\u306e\u3067\u306f\u5909\u6570\u3084\u95a2\u6570\uff0c\u5927\u304d\u3044\u3082\u306e\u3067\u306f Goole \u3084 Amazon\uff0cFacebook \u306a\u3069\u304c\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u4e0a\u306e\u5927\u898f\u6a21\u306a\u30b5\u30fc\u30d3\u30b9\u306a\u3069\u304c\u3042\u308a\u307e\u3059\uff0e\u3061\u306a\u307f\u306b\uff0c\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3069\u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u306e\u4ed5\u69d8\u3092\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5316\u3057\u305f\u3082\u306e\u306f API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3084 API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u547c\u3070\u308c\u305f\u308a\u3057\u307e\u3059\uff0e Web API (\u4ee5\u4e0b\u5358\u306b API) \u306f\u300c\u30c7\u30fc\u30bf\u306e\u5165\u529b\u304a\u3088\u3073\u51fa\u529b\u306f\u3053\u3046\u3042\u308b\u3079\u304d\u3060\u3068\u3044\u3046\u898f\u5247\u300d\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u304c\u3053\u306e\u898f\u5247\u306b\u5f93\u308f\u306a\u3044\u30c7\u30fc\u30bf\u3092\u9001\u3063\u3066\u304d\u305f\u5834\u5408\uff0c\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u306f\u305d\u306e\u30c7\u30fc\u30bf\u3092\u6b63\u3057\u304f\u89e3\u6790\u3067\u304d\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u9006\u306b\uff0c\u30b5\u30fc\u30d0\u30fc\u5074\u304c API \u306b\u5f93\u308f\u306a\u3044\u30c7\u30fc\u30bf\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u9001\u3063\u3066\u3082\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306f\u4e8b\u524d\u306b\u6c7a\u3081\u3089\u308c\u3066\u3044\u305f\u898f\u5247\u306b\u305d\u3050\u308f\u306a\u3044\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u3063\u3066\u6b63\u3057\u304f\u51e6\u7406\u3059\u308b\u3053\u3068\u306f\u56f0\u96e3\u306b\u306a\u308a\u307e\u3059\uff0e\u3053\u306e\u3088\u3046\u306a\u3053\u3068\u304b\u3089\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u4e0a\u3067 API \u3092\u66d6\u6627\u3055\u306a\u304f\u5b9a\u7fa9\u3057\uff0c\u305d\u308c\u3092\u660e\u78ba\u5316\u3057\u3066\u304a\u304f\u3053\u3068\u306f\u91cd\u8981\u3068\u8a00\u3048\u307e\u3059\uff0e \u3053\u3053\u3067\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u304a\u3088\u3073\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f JSON \u3068\u3057\u3066\u8a71\u3092\u9032\u3081\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0e\u3059\u308b\u3068\uff0cWeb API \u3092\u5b9a\u7fa9\u3059\u308b\u3068\u306f\uff0c\u5165\u51fa\u529b\u306b\u5229\u7528\u3055\u308c\u308b JSON \u306e\u30b9\u30ad\u30fc\u30de \uff0c\u3059\u306a\u308f\u3061\uff0c\u3069\u3093\u306a\u30ad\u30fc\u304c\u3042\u3063\u3066\u305d\u3053\u306b\u306f\u3069\u3093\u306a\u578b\u306e\u30c7\u30fc\u30bf\u304c\u5165\u308b\u304b\u3068\u3044\u3046\u898f\u5247\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3068\u540c\u3058\u3067\u3059\uff0ebamboo \u3067\u306f\u3053\u306e\u30b9\u30ad\u30fc\u30de\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u306b JsonApiData \u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3068\uff0c\u4f8b\u3048\u3070 { name: \"user_name\", age: 20, email: \"hoge@example.com\" } \u3068\u3044\u3046 JSON \u30c7\u30fc\u30bf\u3092\u6271\u3044\u305f\u3044\u3068\u3057\u307e\u3057\u3087\u3046\uff0e\u3059\u308b\u3068\uff0c\u4e0a\u8a18\u306e\u30c7\u30fc\u30bf\u306e\u30ad\u30fc\u3068\u578b\u306f from bamboo import JsonApiData class Account ( JsonApiData ): name : str age : int email : str \u3068\u5b9a\u7fa9\u3067\u304d\u307e\u3059\uff0e\u3053\u308c\u306f JSON \u30b9\u30ad\u30fc\u30de\u3092\u5b9a\u7fa9\u3059\u308b\u4e0a\u3067\u5927\u304d\u306a\u52a9\u3051\u3068\u306a\u308b\u3067\u3057\u3087\u3046\uff0e\u307e\u305f\uff0c\u5f8c\u8ff0\u3059\u308b data_format \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u578b\u5b89\u5168\u3092\u4fdd\u8a3c\u3067\u304d\u307e\u3059\uff0e \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5 \u305d\u308c\u3067\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9 do_GET() \u306e\u5b9f\u88c5\u306b\u79fb\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0e\u3053\u308c\u307e\u3067\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u547d\u540d\u898f\u5247\uff0cAPI \u306e\u5b9a\u7fa9\u306e\u8b70\u8ad6\u3092\u8e0f\u307e\u3048\u3066\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\uff0e from bamboo import WSGIApp , WSGIEndpoint , JsonApiData from bamboo.sticky.http import data_format app = WSGIApp () # \u30ea\u30af\u30a8\u30b9\u30c8\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u306eJSON\u30b9\u30ad\u30fc\u30de\u306e\u5b9a\u7fa9 class UpsideDownRequest ( JsonApiData ): token : str class UpsideDownResponse ( JsonApiData ): result : str # \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9a\u7fa9 @app . route ( \"upsidedown\" ) class UpsideDownEndpoint ( WSGIEndpoint ): # \u5165\u51fa\u529b\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u767b\u9332 @bamboo . data_format ( input = UpsideDownRequest , output = UpsideDownResponse ) def do_GET ( self , req_body : UpsideDownRequest ) -> None : # \u53cd\u8ee2\u51e6\u7406 result = req_body . token [:: - 1 ] # \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u4f5c\u6210 body = { \"result\" : result } self . send_json ( body ) \u4e0a\u306e\u4f8b\u3067\uff0c do_GET() \u304c data_format() \u3068\u3044\u3046\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u30c7\u30b3\u30ec\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u306e\u306b\u6c17\u304c\u4ed8\u3044\u305f\u3067\u3057\u3087\u3046\u304b\uff0e\u3053\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u3046\u3068\uff0c\u5165\u51fa\u529b\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u767b\u9332\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u7279\u306b\uff0c input \u5f15\u6570\u306b\u767b\u9332\u3059\u308b\u3068\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u3092\u30c7\u30b3\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u3092\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308c\u307e\u3059\uff0e\u305d\u306e\u5f15\u6570\u306f\u65e2\u306b\u30d0\u30a4\u30ca\u30ea\u304b\u3089\u30c7\u30b3\u30fc\u30c9\u3055\u308c\uff0c\u578b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3 (\u578b\u306e\u691c\u8a3c) \u307e\u3067\u5b9f\u884c\u3057\u307e\u3059\uff0e\u3082\u3057\uff0c\u578b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u6bb5\u968e\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9 415 (Unsupported Media Type) \u304c\u8fd4\u3055\u308c\u307e\u3059\uff0e Tip data_format() \u30c7\u30b3\u30ec\u30fc\u30bf\u306e input \u304a\u3088\u3073 output \u5f15\u6570\u306b\u306f ApiData \u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u8a73\u3057\u304f\u306f API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e \u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3059\u308b \u6700\u5f8c\u306b\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u307e\u3059\uff0e\u4eca\u56de\u306f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306a\u306e\u3067\uff0c\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u3067\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u307e\u3057\u3087\u3046\uff0ebamboo \u306b\u306f\u30c6\u30b9\u30c8\u7528\u306b TestExecutor \u3068\u3044\u3046\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\uff0c\u3053\u306e\u30af\u30e9\u30b9\u3092\u7528\u3044\u3066\u7c21\u5358\u306b\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u3067\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3067\u304d\u307e\u3059\uff0e\u4ee5\u4e0b\u306f\u4eca\u56de\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u4f5c\u6210\u3059\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u5b8c\u5168\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\uff0e from bamboo import WSGIApp , WSGIEndpoint , JsonApiData , TestExecutor from bamboo.sticky.http import data_format app = WSGIApp () class UpsideDownRequest ( JsonApiData ): token : str class UpsideDownResponse ( JsonApiData ): result : str @app . route ( \"upsidedown\" ) class UpsideDownEndpoint ( WSGIEndpoint ): @data_format ( input = UpsideDownRequest , output = UpsideDownResponse ) def do_GET ( self , req_body : UpsideDownRequest ) -> None : result = req_body . token [:: - 1 ] body = { \"result\" : result } self . send_json ( body ) if __name__ == \"__main__\" : TestExecutor . debug ( app , \"debug_app.log\" ) \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u306e\u51e6\u7406 \u3053\u3053\u307e\u3067\u306f bamboo \u306b\u3088\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u51e6\u7406\u3067\u3057\u305f\uff0e\u5b9f\u9a13\u3092\u3059\u308b\u305f\u3081\u306b\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u306e\u51e6\u7406\u3082\u5f53\u7136\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\uff0e\u4eca\u56de\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u5b9f\u88c5\u306e\u89e3\u8aac\u306f\u5272\u611b\u3057\u307e\u3059\uff0e import sys from bamboo import JsonApiData from bamboo.request import http class UpsideDownResponse ( JsonApiData ): result : str def request ( uri : str , token : str ) -> None : body = { \"token\" : token } with http . get ( uri , json = body , datacls = UpsideDownResponse ) as res : # \u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\u306e\u8868\u793a print ( \"Headers\" ) print ( \"-------\" ) for k , v in res . headers . items (): print ( f \" { k } : { v } \" ) print () # \u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u306e\u8868\u793a body = res . attach () print ( \"Bodies\" ) print ( \"------\" ) print ( body . result ) if __name__ == \"__main__\" : URI = \"http://localhost:8000/upsidedown\" token = sys . argv [ 1 ] # \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u3057\u3066\u9001\u4fe1\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3092\u6307\u5b9a request ( URI , token ) \u5b9f\u88c5\u3067\u306f\uff0c\u30b5\u30fc\u30d0\u30fc\u306b\u9001\u308b\u30c8\u30fc\u30af\u30f3\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u3057\u3066\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\uff0e\u3053\u308c\u3067\u3044\u308d\u3093\u306a\u30c8\u30fc\u30af\u30f3\u3092\u6307\u5b9a\u3057\u3066\uff0c\u5168\u3066\u9006\u3055\u307e\u306b\u306a\u3063\u3066\u8fd4\u3063\u3066\u304f\u308b\u304b\u78ba\u304b\u3081\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e \u5b9f\u884c \u30b5\u30fc\u30d0\u30fc\u5074 \u5148\u7a0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092 serve.py \u3068\u3044\u3046\u540d\u524d\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u4fdd\u5b58\u3057\u305f\u3068\u3057\u307e\u3057\u3087\u3046\uff0e\u305d\u306e\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e python serve.py \u5b9f\u884c\u3057\uff0c\u6b63\u5e38\u306b\u52d5\u4f5c\u3059\u308b\u3068 Hosting on localhost:8000 ... WARNING: This is debug mode. Do not use it in your production deployment. \u3068\u8868\u793a\u3055\u308c\u307e\u3059\uff0e \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074 \u30b5\u30fc\u30d0\u30fc\u5074\u306e\u5b9f\u884c\u304c\u7d42\u308f\u3063\u305f\u3089\uff0c\u5225\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\uff0e\u305f\u3060\u3057\uff0c\u5148\u7a0b\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f request.py \u3067\u4fdd\u5b58\u3057\u305f\u3068\u4eee\u5b9a\u3057\u307e\u3059\uff0e python request.py abcdefg \u5b9f\u884c\u5f8c\uff0c\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u305f\u3089\u6210\u529f\u3067\u3059\uff0e Headers ------- Date : Thu, 18 Feb 2021 07:07:58 GMT Server : WSGIServer/0.2 CPython/3.8.5 Content-Type : application/json; charset=UTF-8 Content-Length : 21 Bodies ------ gfedcba \u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u306e\u7d50\u679c\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u30c8\u30fc\u30af\u30f3 (\u4e0a\u306e\u4f8b\u3067\u306f abcdefg) \u304c\u9006\u3055\u307e\u306b\u306a\u3063\u3066\u8fd4\u3063\u3066\u304d\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\uff0e\u307e\u305f\uff0c\u4ed6\u306e\u30c8\u30fc\u30af\u30f3\u3092\u6307\u5b9a\u3057\u3066\u3082\u540c\u69d8\u306e\u7d50\u679c\u306b\u306a\u308b\u304b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e","title":"\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b"},{"location":"tutorials/sample_app/#_1","text":"\u3053\u3053\u3067\u306f bamboo \u306b\u3088\u308b\u5b9f\u88c5\u306b\u6163\u308c\u308b\u305f\u3081\u306b\uff0c\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u4eca\u56de\u5b9f\u88c5\u3059\u308b\u306e\u306f\u30e2\u30ce\u30ea\u30b7\u30c3\u30af\u306a\u30b5\u30fc\u30d0\u30fc\u3067\u3059\u304c\uff0c\u3053\u308c\u3092\u5fdc\u7528\u3059\u308b\u3053\u3068\u3067\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u5247\u3063\u305f\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u69cb\u7bc9\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3059\uff0e","title":"\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b"},{"location":"tutorials/sample_app/#_2","text":"bamboo \u306b\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u304c\u3044\u304f\u3064\u304b\u3042\u308a\u307e\u3059\uff0e\u3053\u308c\u3089\u306e\u30af\u30e9\u30b9\u306f\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u6839\u5e95\u306e\u6982\u5ff5\u81ea\u4f53\u306f\u5171\u901a\u3067\u3059\u304c\uff0c\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3084\u30d7\u30ed\u30c8\u30b3\u30eb\u306a\u3069\u306b\u30d0\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\uff0e\u73fe\u5728\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u308a\u307e\u3059 (\u4eca\u5f8c\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u306b\u3088\u308a\u8ffd\u52a0\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059) : WSGIEndpoint (WSGI\u30fbHTTP \u3092\u30b5\u30dd\u30fc\u30c8) ASGIHTTPEndpoint (ASGI\u30fbHTTP \u3092\u30b5\u30dd\u30fc\u30c8) \u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306f WSGIEndpoint \u3092\u4f7f\u3063\u3066\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\uff0e Note \u7279\u5b9a\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u3057\u304b\u767b\u9332\u3067\u304d\u307e\u305b\u3093\uff0e\u4f8b\u3048\u3070 WSGIEndpoint \u30af\u30e9\u30b9\u306e\u5834\u5408\u306f WSGIApp \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff0c ASGIHTTPEndpoint \u306e\u5834\u5408\u306f ASGIHTTPApp \u306b\u3057\u304b\u767b\u9332\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u305b\u3093\uff0e","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u7a2e\u985e"},{"location":"tutorials/sample_app/#_3","text":"bamboo \u306b\u3088\u308b\u958b\u767a\u306b\u304a\u3051\u308b\u307b\u3068\u3093\u3069\u306e\u4f5c\u696d\u306f\uff0c \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306e\u5b9f\u88c5 \u3067\u3059\uff0e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u30af\u30e9\u30b9\u306f\u63a1\u7528\u3057\u305f\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3068\u30d7\u30ed\u30c8\u30b3\u30eb\u306b\u3088\u3063\u3066\uff0c\u305d\u306e\u5143\u3068\u306a\u308b\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u304c\u7570\u306a\u308a\u307e\u3059\uff0e\u4e0a\u8ff0\u3057\u305f\u3088\u3046\u306b\u4eca\u56de\u306f WSGIEndpoint \u3092\u4f7f\u7528\u3059\u308b\u306e\u3067\uff0c\u3053\u306e\u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\uff0e \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u6d41\u308c\u3067\u884c\u3063\u3066\u3044\u304d\u307e\u3059: URI \u3092\u6c7a\u3081\u308b setup \u30e1\u30bd\u30c3\u30c9\u306b\u521d\u671f\u5316\u51e6\u7406\u3092\u66f8\u304f (\u4eca\u56de\u306f\u7701\u7565) \u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u88c5\u3059\u308b","title":"\u5b9f\u88c5\u306e\u6d41\u308c"},{"location":"tutorials/sample_app/#endpoint","text":"","title":"Endpoint \u306e\u5b9f\u88c5"},{"location":"tutorials/sample_app/#_4","text":"\u4eca\u56de\u4f5c\u6210\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6a5f\u80fd\u306f \u30ea\u30af\u30a8\u30b9\u30c8\u3067\u9001\u3089\u308c\u3066\u304d\u305f\u30c6\u30ad\u30b9\u30c8\u3092\u53cd\u8ee2\u3055\u305b\u3066\u8fd4\u3059 \u3068\u3044\u3046\u3082\u306e\u3067\u3059\uff0e\u4f8b\u3048\u3070\uff0c { \"token\" : \"abcdefg\" } \u3068\u3044\u3046 Json \u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\uff0c { \"result\" : \"gfedcba\" } \u3068\u3044\u3046\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3057\u307e\u3059\uff0e\u5165\u51fa\u529b\u306e JSON \u30b9\u30ad\u30fc\u30de\u306f\u4e0a\u306e\u4f8b\u306e\u3082\u306e\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3059\uff0e\u3067\u306f\u3055\u3063\u305d\u304f\u4f5c\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0e","title":"\u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6982\u8981"},{"location":"tutorials/sample_app/#uri","text":"\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f URI \u3092\u89e3\u6790\u3057\u3066\u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u63a2\u3057\u5f53\u3066\u308b\u305f\u3081\u306b\u306f\u4e8b\u524d\u306e\u6e96\u5099\u304c\u5fc5\u8981\u3067\u3059\uff0e\u305d\u306e\u6e96\u5099\u3068\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b URI \u3068\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5bfe\u5fdc\u8868\u3092\u6e21\u3059\u3053\u3068\u3067\u3059\uff0e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u305d\u306e\u5bfe\u5fdc\u8868\u3055\u3048\u3042\u308c\u3070\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f URI \u306b\u5bfe\u5fdc\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3068 URI \u3092\u7d10\u4ed8\u3051\u308b\u305f\u3081\u306b\u306f\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e route \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\uff0e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u540d\u306f UpsideDownEndpoint \u3068\u547d\u540d\u3057\u307e\u3057\u305f (\u304a\u597d\u304d\u306a\u3082\u306e\u3067\u69cb\u3044\u307e\u305b\u3093) \uff0e from bamboo import WSGIApp , WSGIEndpoint app = WSGIApp () # URI \u306e\u6307\u5b9a # http://host:port/upsidedown \u3067\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u308b @app . route ( \"upsidedown\" ) class UpsideDownEndpoint ( WSGIEndpoint ): pass","title":"URI \u3092\u6c7a\u3081\u308b"},{"location":"tutorials/sample_app/#_5","text":"\u6b21\u306b\u6700\u3082\u91cd\u8981\u306a\u5de5\u7a0b\u3067\u3042\u308b\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306e\u5b9f\u88c5\u306b\u79fb\u308a\u307e\u3057\u3087\u3046\uff0e\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3068\u306f\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3078\u306e\u5bfe\u51e6\u306e\u4ed5\u65b9\u306e\u3053\u3068\u3067\u3059\uff0e\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306f\u305d\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u3069\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3092\u6301\u305f\u305b\u305f\u3044\u304b\u3067\u69d8\u3005\u306b\u5909\u5316\u3057\u307e\u3059\uff0e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u306f\u305d\u306e\u30e6\u30fc\u30b9\u30b1\u30fc\u30b9\u306b\u3088\u3063\u3066\uff0c\u5358\u7d14\u306b HTML \u30d5\u30a1\u30a4\u30eb\u3092\u8fd4\u3059\u3082\u306e\u3082\u3042\u308c\u3070\uff0c\u8a8d\u8a3c\u3092\u3057\u3066\u30e6\u30fc\u30b6\u30fc\u306e\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u3082\u8003\u3048\u3089\u308c\u307e\u3059\uff0e \u4eca\u4f5c\u6210\u3057\u3066\u3044\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067\u306f\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u9001\u3089\u308c\u3066\u304d\u305f JSON \u30c7\u30fc\u30bf\u306e\u4e2d\u304b\u3089\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u308a\u51fa\u3057\uff0c\u305d\u306e\u30c8\u30fc\u30af\u30f3\u3092\u53cd\u8ee2\u3055\u305b\u305f\u3082\u306e\u3092 JSON \u5f62\u5f0f\u3067\u8fd4\u3059\u3068\u3044\u3046\u306e\u304c\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\uff0e\u4ee5\u4e0b\u3067\u306f\u305d\u306e\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3092 bamboo \u3067\u5b9f\u88c5\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e","title":"\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u88c5\u3059\u308b"},{"location":"tutorials/sample_app/#_6","text":"HTTP \u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u306f \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9 \u3068\u3044\u3046\u7279\u5225\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u5b58\u5728\u3057\u307e\u3059\uff0e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306f\uff0c\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u30ea\u30af\u30a8\u30b9\u30c8\u304c\u6765\u308b\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3053\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\u3055\u305b\u307e\u3059\uff0e \u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3057\u3087\u3046\uff0e\u4e0a\u8ff0\u3057\u305f\u3088\u3046\u306b\uff0c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f URI \u3092\u89e3\u6790\u3059\u308b\u3053\u3068\u3067\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u7279\u5b9a\u3057\u307e\u3059\uff0e\u4e00\u65b9\u3067\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u5185\u306e\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u3055\u308c\u305f HTTP \u30e1\u30bd\u30c3\u30c9\u3067\u7279\u5b9a\u3055\u308c\u307e\u3059\uff0e\u3064\u307e\u308a\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u306f\u3044\u304f\u3064\u304b\u306e HTTP \u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u3053\u308c\u306f\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u304c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u305f\u308b\u6240\u4ee5\u3067\u3082\u3042\u308a\u307e\u3059\uff0e\u3059\u306a\u308f\u3061\uff0c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306f \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u30a2\u30af\u30bb\u30b9\u3057\u3066\u51e6\u7406\u3092\u884c\u3063\u3066\u3082\u3089\u3046\u5834\u6240 \u306a\u306e\u3067\u3042\u308a\uff0c\u305d\u306e\u5834\u6240\u306b\u884c\u3051\u3070 GET \u3084 POST \u306a\u3069\u306e\u76ee\u7684\u306b\u3042\u3063\u305f\u51e6\u7406\u3092\u884c\u3063\u3066\u3082\u3089\u3048\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\uff0e \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u3044\u304f\u3064\u304b\u306e\u6c7a\u307e\u308a\u304c\u3042\u308a\u307e\u3059\uff0e\u305d\u306e\u4e2d\u3067\u3082\u6700\u3082\u91cd\u8981\u306a\u306e\u306f\u305d\u306e \u547d\u540d\u898f\u5247 \u3067\u3059\uff0e\u4e0b\u8868\u306f HTTP \u30e1\u30bd\u30c3\u30c9\u3068\u305d\u308c\u3092\u30e1\u30bd\u30c3\u30c9\u3092\u6307\u5b9a\u3057\u305f\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u540d\u524d\u306e\u5bfe\u5fdc\u8868\u3067\u3059\uff0e HTTP \u30e1\u30bd\u30c3\u30c9 \u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u540d GET do_GET POST do_POST PUT do_PUT DELETE do_DELETE HEAD do_HEAD OPTIONS do_OPTIONS PATCH do_PATCH TRACE do_TRACE CONNECT do_CONNECT \u4e0a\u306e\u8868\u3067\u51fa\u3066\u304d\u305f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u540d\u306f\u5168\u3066\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\u5b9f\u88c5\u3057\u305f\u3044\u3082\u306e\u3060\u3051\u5b9f\u88c5\u3059\u308c\u3070 OK \u3067\u3059\uff0e\u307e\u305f\uff0c\u8907\u6570\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\uff0e Tip HTTP \u30e1\u30bd\u30c3\u30c9\u306e\u793a\u3059\u610f\u5473\u3068\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306e\u6319\u52d5\u306f\u30de\u30c3\u30c1\u3055\u305b\u308b\u3053\u3068\u3092\u63a8\u5968\u3057\u307e\u3059\uff0e\u4f8b\u3048\u3070\u3042\u306a\u305f\u304c\u753b\u50cf\u6295\u7a3f\u30a2\u30d7\u30ea\u306e\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308b\u3068\u3057\u3066\uff0c\u753b\u50cf\u306e\u53d6\u5f97\u3068\u753b\u50cf\u306e\u6295\u7a3f\u3092\u540c\u3058\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3067\u884c\u3046\u3068\u3057\u307e\u3057\u3087\u3046\uff0e\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306f\uff0c\u753b\u50cf\u306e\u53d6\u5f97\u3092\u51e6\u7406\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306f do_GET() \uff0c\u753b\u50cf\u306e\u6295\u7a3f\u3092\u51e6\u7406\u3059\u308b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306f do_POST() \u306b\u3059\u308b\u306e\u304c\u610f\u5473\u5408\u3044\u7684\u306b\u81ea\u7136\u3067\u3057\u3087\u3046\uff0e\u3053\u308c\u304c\u3082\u3057\u9006\u3067\u3042\u3063\u305f\u3089\uff0cHTTP \u30e1\u30bd\u30c3\u30c9\u306e\u610f\u5473\u3068\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306e\u6319\u52d5\u306f\u304b\u3051\u96e2\u308c\u305f\u3082\u306e\u306b\u306a\u308a\uff0c\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u5074\u306e\u958b\u767a\u8005\u304b\u3089\u5acc\u304c\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0eHTTP \u30e1\u30bd\u30c3\u30c9\u306f\u5358\u306a\u308b\u540d\u524d\u3067\u3042\u308a\uff0c\u305d\u306e\u5185\u90e8\u30ed\u30b8\u30c3\u30af\u306b\u3064\u3044\u3066\u306f\u958b\u767a\u8005\u306b\u4e00\u4efb\u3055\u308c\u308b\u3068\u3044\u3046\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\uff0e Note \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068\u306f\uff0c\u7279\u5b9a\u306e\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570 (Python \u3067\u306f Callable \u3068\u547c\u3070\u308c\u307e\u3059) \u3067\u3059\uff0e do_GET() \u306f\u300c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u305d\u306e\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b GET \u3068\u3044\u3046 HTTP \u30e1\u30bd\u30c3\u30c9\u304c\u9001\u3089\u308c\u3066\u304d\u305f\u300d\u3068\u3044\u3046\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308a\uff0c\u4e00\u7a2e\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068\u8a00\u3048\u307e\u3059\uff0e do_GET() \u4ee5\u5916\u306e\u4ed6\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u3082\u540c\u69d8\u3067\u3059\uff0e \u4eca\u56de\u306f GET \u30e1\u30bd\u30c3\u30c9\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\uff0e\u3053\u306e\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059: @app . route ( \"upsidedown\" ) class UpsideDownEndpoint ( WSGIEndpoint ): def do_GET ( self ) -> None : # \u5f8c\u307b\u3069\u5b9f\u88c5","title":"\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9"},{"location":"tutorials/sample_app/#api","text":"Web \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u4e0a\u3067\u6700\u3082\u91cd\u8981\u306a\u3053\u3068\u306e1\u3064\u306b Web API \u306e\u5b9a\u7fa9\u304c\u3042\u308a\u307e\u3059\uff0eAPI \u306f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4ed5\u69d8\u306a\u3069\u306e\u3053\u3068\u3092\u6307\u3059\u62bd\u8c61\u7684\u306a\u7528\u8a9e\u3067\u3059\u304c\uff0cWeb API \u3068\u3044\u3046\u3068\u304d\u306b\u306f\uff0c\u3042\u308b URI \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u969b\u306e\u5165\u51fa\u529b\u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3068\u3044\u3046\u610f\u5473\u3067\u4f7f\u308f\u308c\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\uff0e\u4ee5\u4e0b\u3067\u3082\u305d\u306e\u3088\u3046\u306a\u610f\u5473\u3092\u6301\u3064\u8a00\u8449\u3068\u3057\u3066\u6271\u3063\u3066\u3044\u304f\u3053\u3068\u306b\u3057\u307e\u3059\uff0e Warninig \u4e00\u90e8\u30b5\u30a4\u30c8\u3067\u306f API \u306f\u4f55\u304b\u7279\u5225\u306a\u6a5f\u80fd\u3092\u6301\u3063\u305f\u3082\u306e\u304b\u306e\u3088\u3046\u306b\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u4e0a\u8ff0\u3057\u305f\u3088\u3046\u306b API \u3068\u3044\u3046\u7528\u8a9e\u306f\u5358\u306a\u308b\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u4ed5\u69d8\u3084\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u904e\u304e\u307e\u305b\u3093\uff0e\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u306f\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3068\u3057\u3066\u8a8d\u8b58\u3067\u304d\u308b\u3082\u306e\u306e\u3053\u3068\u3092\u6f20\u7136\u3068\u6307\u3059\u7528\u8a9e\u3067\u3042\u308a\uff0c\u898f\u6a21\u306e\u5c0f\u3055\u3044\u3082\u306e\u3067\u306f\u5909\u6570\u3084\u95a2\u6570\uff0c\u5927\u304d\u3044\u3082\u306e\u3067\u306f Goole \u3084 Amazon\uff0cFacebook \u306a\u3069\u304c\u63d0\u4f9b\u3059\u308b\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u4e0a\u306e\u5927\u898f\u6a21\u306a\u30b5\u30fc\u30d3\u30b9\u306a\u3069\u304c\u3042\u308a\u307e\u3059\uff0e\u3061\u306a\u307f\u306b\uff0c\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u3069\u306e\u30af\u30e9\u30b9\u3084\u95a2\u6570\u306e\u4ed5\u69d8\u3092\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5316\u3057\u305f\u3082\u306e\u306f API \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3084 API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u547c\u3070\u308c\u305f\u308a\u3057\u307e\u3059\uff0e Web API (\u4ee5\u4e0b\u5358\u306b API) \u306f\u300c\u30c7\u30fc\u30bf\u306e\u5165\u529b\u304a\u3088\u3073\u51fa\u529b\u306f\u3053\u3046\u3042\u308b\u3079\u304d\u3060\u3068\u3044\u3046\u898f\u5247\u300d\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u304c\u3053\u306e\u898f\u5247\u306b\u5f93\u308f\u306a\u3044\u30c7\u30fc\u30bf\u3092\u9001\u3063\u3066\u304d\u305f\u5834\u5408\uff0c\u30b5\u30fc\u30d0\u30fc\u5074\u3067\u306f\u305d\u306e\u30c7\u30fc\u30bf\u3092\u6b63\u3057\u304f\u89e3\u6790\u3067\u304d\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\u9006\u306b\uff0c\u30b5\u30fc\u30d0\u30fc\u5074\u304c API \u306b\u5f93\u308f\u306a\u3044\u30c7\u30fc\u30bf\u3092\u30ec\u30b9\u30dd\u30f3\u30b9\u3068\u3057\u3066\u9001\u3063\u3066\u3082\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306f\u4e8b\u524d\u306b\u6c7a\u3081\u3089\u308c\u3066\u3044\u305f\u898f\u5247\u306b\u305d\u3050\u308f\u306a\u3044\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u3063\u3066\u6b63\u3057\u304f\u51e6\u7406\u3059\u308b\u3053\u3068\u306f\u56f0\u96e3\u306b\u306a\u308a\u307e\u3059\uff0e\u3053\u306e\u3088\u3046\u306a\u3053\u3068\u304b\u3089\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u4e0a\u3067 API \u3092\u66d6\u6627\u3055\u306a\u304f\u5b9a\u7fa9\u3057\uff0c\u305d\u308c\u3092\u660e\u78ba\u5316\u3057\u3066\u304a\u304f\u3053\u3068\u306f\u91cd\u8981\u3068\u8a00\u3048\u307e\u3059\uff0e \u3053\u3053\u3067\u306f\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u304a\u3088\u3073\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f JSON \u3068\u3057\u3066\u8a71\u3092\u9032\u3081\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0e\u3059\u308b\u3068\uff0cWeb API \u3092\u5b9a\u7fa9\u3059\u308b\u3068\u306f\uff0c\u5165\u51fa\u529b\u306b\u5229\u7528\u3055\u308c\u308b JSON \u306e\u30b9\u30ad\u30fc\u30de \uff0c\u3059\u306a\u308f\u3061\uff0c\u3069\u3093\u306a\u30ad\u30fc\u304c\u3042\u3063\u3066\u305d\u3053\u306b\u306f\u3069\u3093\u306a\u578b\u306e\u30c7\u30fc\u30bf\u304c\u5165\u308b\u304b\u3068\u3044\u3046\u898f\u5247\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3068\u540c\u3058\u3067\u3059\uff0ebamboo \u3067\u306f\u3053\u306e\u30b9\u30ad\u30fc\u30de\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u306b JsonApiData \u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3068\uff0c\u4f8b\u3048\u3070 { name: \"user_name\", age: 20, email: \"hoge@example.com\" } \u3068\u3044\u3046 JSON \u30c7\u30fc\u30bf\u3092\u6271\u3044\u305f\u3044\u3068\u3057\u307e\u3057\u3087\u3046\uff0e\u3059\u308b\u3068\uff0c\u4e0a\u8a18\u306e\u30c7\u30fc\u30bf\u306e\u30ad\u30fc\u3068\u578b\u306f from bamboo import JsonApiData class Account ( JsonApiData ): name : str age : int email : str \u3068\u5b9a\u7fa9\u3067\u304d\u307e\u3059\uff0e\u3053\u308c\u306f JSON \u30b9\u30ad\u30fc\u30de\u3092\u5b9a\u7fa9\u3059\u308b\u4e0a\u3067\u5927\u304d\u306a\u52a9\u3051\u3068\u306a\u308b\u3067\u3057\u3087\u3046\uff0e\u307e\u305f\uff0c\u5f8c\u8ff0\u3059\u308b data_format \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u578b\u5b89\u5168\u3092\u4fdd\u8a3c\u3067\u304d\u307e\u3059\uff0e","title":"API \u306e\u5b9a\u7fa9"},{"location":"tutorials/sample_app/#_7","text":"\u305d\u308c\u3067\u306f\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9 do_GET() \u306e\u5b9f\u88c5\u306b\u79fb\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff0e\u3053\u308c\u307e\u3067\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u547d\u540d\u898f\u5247\uff0cAPI \u306e\u5b9a\u7fa9\u306e\u8b70\u8ad6\u3092\u8e0f\u307e\u3048\u3066\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\uff0e from bamboo import WSGIApp , WSGIEndpoint , JsonApiData from bamboo.sticky.http import data_format app = WSGIApp () # \u30ea\u30af\u30a8\u30b9\u30c8\uff0c\u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u306eJSON\u30b9\u30ad\u30fc\u30de\u306e\u5b9a\u7fa9 class UpsideDownRequest ( JsonApiData ): token : str class UpsideDownResponse ( JsonApiData ): result : str # \u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u5b9a\u7fa9 @app . route ( \"upsidedown\" ) class UpsideDownEndpoint ( WSGIEndpoint ): # \u5165\u51fa\u529b\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u767b\u9332 @bamboo . data_format ( input = UpsideDownRequest , output = UpsideDownResponse ) def do_GET ( self , req_body : UpsideDownRequest ) -> None : # \u53cd\u8ee2\u51e6\u7406 result = req_body . token [:: - 1 ] # \u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u4f5c\u6210 body = { \"result\" : result } self . send_json ( body ) \u4e0a\u306e\u4f8b\u3067\uff0c do_GET() \u304c data_format() \u3068\u3044\u3046\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u30c7\u30b3\u30ec\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u306e\u306b\u6c17\u304c\u4ed8\u3044\u305f\u3067\u3057\u3087\u3046\u304b\uff0e\u3053\u306e\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4f7f\u3046\u3068\uff0c\u5165\u51fa\u529b\u30c7\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u767b\u9332\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u7279\u306b\uff0c input \u5f15\u6570\u306b\u767b\u9332\u3059\u308b\u3068\uff0c\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u3092\u30c7\u30b3\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u3092\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308c\u307e\u3059\uff0e\u305d\u306e\u5f15\u6570\u306f\u65e2\u306b\u30d0\u30a4\u30ca\u30ea\u304b\u3089\u30c7\u30b3\u30fc\u30c9\u3055\u308c\uff0c\u578b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3 (\u578b\u306e\u691c\u8a3c) \u307e\u3067\u5b9f\u884c\u3057\u307e\u3059\uff0e\u3082\u3057\uff0c\u578b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u6bb5\u968e\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u30b3\u30fc\u30c9 415 (Unsupported Media Type) \u304c\u8fd4\u3055\u308c\u307e\u3059\uff0e Tip data_format() \u30c7\u30b3\u30ec\u30fc\u30bf\u306e input \u304a\u3088\u3073 output \u5f15\u6570\u306b\u306f ApiData \u30af\u30e9\u30b9\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u8a73\u3057\u304f\u306f API \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e","title":"\u30ec\u30b9\u30dd\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5"},{"location":"tutorials/sample_app/#_8","text":"\u6700\u5f8c\u306b\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u307e\u3059\uff0e\u4eca\u56de\u306f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306a\u306e\u3067\uff0c\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u3067\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3057\u307e\u3057\u3087\u3046\uff0ebamboo \u306b\u306f\u30c6\u30b9\u30c8\u7528\u306b TestExecutor \u3068\u3044\u3046\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u304a\u308a\uff0c\u3053\u306e\u30af\u30e9\u30b9\u3092\u7528\u3044\u3066\u7c21\u5358\u306b\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u3067\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3067\u304d\u307e\u3059\uff0e\u4ee5\u4e0b\u306f\u4eca\u56de\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3067\u4f5c\u6210\u3059\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u5b8c\u5168\u306a\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u3059\uff0e from bamboo import WSGIApp , WSGIEndpoint , JsonApiData , TestExecutor from bamboo.sticky.http import data_format app = WSGIApp () class UpsideDownRequest ( JsonApiData ): token : str class UpsideDownResponse ( JsonApiData ): result : str @app . route ( \"upsidedown\" ) class UpsideDownEndpoint ( WSGIEndpoint ): @data_format ( input = UpsideDownRequest , output = UpsideDownResponse ) def do_GET ( self , req_body : UpsideDownRequest ) -> None : result = req_body . token [:: - 1 ] body = { \"result\" : result } self . send_json ( body ) if __name__ == \"__main__\" : TestExecutor . debug ( app , \"debug_app.log\" )","title":"\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3059\u308b"},{"location":"tutorials/sample_app/#_9","text":"\u3053\u3053\u307e\u3067\u306f bamboo \u306b\u3088\u308b\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306e\u51e6\u7406\u3067\u3057\u305f\uff0e\u5b9f\u9a13\u3092\u3059\u308b\u305f\u3081\u306b\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u306e\u51e6\u7406\u3082\u5f53\u7136\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\uff0e\u4eca\u56de\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306e\u5b9f\u88c5\u306e\u89e3\u8aac\u306f\u5272\u611b\u3057\u307e\u3059\uff0e import sys from bamboo import JsonApiData from bamboo.request import http class UpsideDownResponse ( JsonApiData ): result : str def request ( uri : str , token : str ) -> None : body = { \"token\" : token } with http . get ( uri , json = body , datacls = UpsideDownResponse ) as res : # \u30ec\u30b9\u30dd\u30f3\u30b9\u30d8\u30c3\u30c0\u306e\u8868\u793a print ( \"Headers\" ) print ( \"-------\" ) for k , v in res . headers . items (): print ( f \" { k } : { v } \" ) print () # \u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u306e\u8868\u793a body = res . attach () print ( \"Bodies\" ) print ( \"------\" ) print ( body . result ) if __name__ == \"__main__\" : URI = \"http://localhost:8000/upsidedown\" token = sys . argv [ 1 ] # \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u3057\u3066\u9001\u4fe1\u3059\u308b\u30c8\u30fc\u30af\u30f3\u3092\u6307\u5b9a request ( URI , token ) \u5b9f\u88c5\u3067\u306f\uff0c\u30b5\u30fc\u30d0\u30fc\u306b\u9001\u308b\u30c8\u30fc\u30af\u30f3\u3092\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3068\u3057\u3066\u6307\u5b9a\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\uff0e\u3053\u308c\u3067\u3044\u308d\u3093\u306a\u30c8\u30fc\u30af\u30f3\u3092\u6307\u5b9a\u3057\u3066\uff0c\u5168\u3066\u9006\u3055\u307e\u306b\u306a\u3063\u3066\u8fd4\u3063\u3066\u304f\u308b\u304b\u78ba\u304b\u3081\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e","title":"\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u306e\u51e6\u7406"},{"location":"tutorials/sample_app/#_10","text":"","title":"\u5b9f\u884c"},{"location":"tutorials/sample_app/#_11","text":"\u5148\u7a0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092 serve.py \u3068\u3044\u3046\u540d\u524d\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u4fdd\u5b58\u3057\u305f\u3068\u3057\u307e\u3057\u3087\u3046\uff0e\u305d\u306e\u5834\u5408\uff0c\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e python serve.py \u5b9f\u884c\u3057\uff0c\u6b63\u5e38\u306b\u52d5\u4f5c\u3059\u308b\u3068 Hosting on localhost:8000 ... WARNING: This is debug mode. Do not use it in your production deployment. \u3068\u8868\u793a\u3055\u308c\u307e\u3059\uff0e","title":"\u30b5\u30fc\u30d0\u30fc\u5074"},{"location":"tutorials/sample_app/#_12","text":"\u30b5\u30fc\u30d0\u30fc\u5074\u306e\u5b9f\u884c\u304c\u7d42\u308f\u3063\u305f\u3089\uff0c\u5225\u306e\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3057\u3087\u3046\uff0e\u305f\u3060\u3057\uff0c\u5148\u7a0b\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f request.py \u3067\u4fdd\u5b58\u3057\u305f\u3068\u4eee\u5b9a\u3057\u307e\u3059\uff0e python request.py abcdefg \u5b9f\u884c\u5f8c\uff0c\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u305f\u3089\u6210\u529f\u3067\u3059\uff0e Headers ------- Date : Thu, 18 Feb 2021 07:07:58 GMT Server : WSGIServer/0.2 CPython/3.8.5 Content-Type : application/json; charset=UTF-8 Content-Length : 21 Bodies ------ gfedcba \u30ec\u30b9\u30dd\u30f3\u30b9\u30dc\u30c7\u30a3\u306e\u7d50\u679c\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u6307\u5b9a\u3057\u305f\u30c8\u30fc\u30af\u30f3 (\u4e0a\u306e\u4f8b\u3067\u306f abcdefg) \u304c\u9006\u3055\u307e\u306b\u306a\u3063\u3066\u8fd4\u3063\u3066\u304d\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\uff0e\u307e\u305f\uff0c\u4ed6\u306e\u30c8\u30fc\u30af\u30f3\u3092\u6307\u5b9a\u3057\u3066\u3082\u540c\u69d8\u306e\u7d50\u679c\u306b\u306a\u308b\u304b\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e","title":"\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074"},{"location":"tutorials/security/","text":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u5f37\u5316\u3059\u308b","title":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u5f37\u5316\u3059\u308b"},{"location":"tutorials/security/#_1","text":"","title":"\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u5f37\u5316\u3059\u308b"},{"location":"tutorials/sticky/","text":"\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u4fee\u98fe","title":"\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u4fee\u98fe"},{"location":"tutorials/sticky/#_1","text":"","title":"\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u4fee\u98fe"},{"location":"tutorials/test/","text":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30c6\u30b9\u30c8 \u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u958b\u767a\u306e\u969b\u306b\u6b20\u304b\u305b\u306a\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u8ff0\u3079\u307e\u3059\uff0ebamboo \u3067\u306f\u30ed\u30fc\u30ab\u30eb\u3067\u306e\u30b5\u30fc\u30d0\u30fc\u306e\u30c6\u30b9\u30c8\u306e\u305f\u3081\u306e\u3044\u304f\u3089\u304b\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\uff0e\u4ee5\u4e0b\u3067\u306f\uff0c\u3053\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u5229\u7528\u3057\u305f\u30c6\u30b9\u30c8\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e \u6982\u8981 \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u305f\u3089\u307e\u305a\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3057\u3087\u3046\uff0e\u3057\u304b\u3057\uff0c\u30b5\u30fc\u30d0\u30fc\u306e\u30c6\u30b9\u30c8\u306f\u5c11\u3057\u5384\u4ecb\u3067\u3059\uff0e\u306a\u305c\u306a\u3089\uff0c\u30b5\u30fc\u30d0\u30fc\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u3044\u3046\u5c11\u306a\u304f\u3068\u30822\u3064\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u5b58\u5728\u3059\u308b\u304b\u3089\u3067\u3059\uff0e\u307e\u3057\u3066\u3084\uff0c\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u306e\u3088\u3046\u306a\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u8907\u6570\u306e\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30db\u30b9\u30c6\u30a3\u30f3\u30b0\u3057\u3066\u3044\u308b\u72b6\u614b\u3067\u306f\uff0c1\u3064\u306e\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3064\u304d\u30b3\u30de\u30f3\u30c9\u3092\u53e9\u3044\u3066\u8d77\u52d5\u3057\u3066\u3044\u3066\u306f\u30c7\u30d0\u30c3\u30b0\u3082\u6357\u308a\u307e\u305b\u3093\uff0e \u3053\u306e\u3088\u3046\u306a\u4e8b\u614b\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\uff0cbamboo \u3067\u306f TestExecutor \u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\uff0c\u30c6\u30b9\u30c8\u7528\u306e1\u3064\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u4ee5\u4e0b\u3067\u306f\u3053\u306e TestExecutor \u3068 Python \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e unittest \u3092\u7528\u3044\u305f\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u4f5c\u6210\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e TestExecutor \u3068 ServerForm TestExecutor \u306f\u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\u6642\u306b\u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30fc\u30e0\u3092\u5b9a\u7fa9\u3059\u308b ServerForm \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u767b\u9332\u3059\u308b\u3053\u3068\u3067\uff0c\u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\uff0e ServerForm \u306f\u5358\u306a\u308b dataclass \u3067\u3042\u308a\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3092\u6301\u3061\u307e\u3059: \u30db\u30b9\u30c8\u540d (IP \u30a2\u30c9\u30ec\u30b9) hostname \u30dd\u30fc\u30c8\u756a\u53f7 port \u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 app \u30ed\u30b0\u51fa\u529b\u7528\u306e\u30d1\u30b9 path_log \u7279\u306b\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u306f bamboo \u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u305f App \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u3053\u3068\u3067\u3059\uff0e\u307e\u305f\uff0c path_log \u306b\u6307\u5b9a\u3055\u308c\u305f\u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u306f\uff0c\u30b5\u30fc\u30d0\u30fc\u304c\u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u8d77\u52d5\u3055\u308c\u305f\u5f8c\u306b\u305d\u306e\u30d7\u30ed\u30bb\u30b9\u306e\u6a19\u6e96\u51fa\u529b\uff0c\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u3078\u63a5\u7d9a\u3055\u308c\u307e\u3059\uff0e \u4f5c\u6210\u3057\u305f\u30d5\u30a9\u30fc\u30e0\u306f TestExecutor \u751f\u6210\u6642\u306b\u6307\u5b9a\u3067\u304d\u307e\u3059\uff0e\u4ee5\u4e0b\u3067\u306f app1 \u3068 app2 \u3068\u3044\u30462\u3064\u306e\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u30c6\u30b9\u30c8\u3059\u308b\u3068\u4eee\u5b9a\u3057\u3066 TestExecutor \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u4f8b\u3092\u793a\u3057\u3066\u3044\u307e\u3059: from bamboo import ServerForm , TestExecutor form1 = ServerForm ( \"localhost\" , 8000 , app1 , \"test_app1.log\" ) form2 = ServerForm ( \"localhost\" , 8001 , app2 , \"test_app2.log\" ) executor = TestExecutor ( form1 , form2 ) \u3053\u3053\u307e\u3067\u6765\u308c\u3070\u6e96\u5099\u5b8c\u4e86\u3067\u3059\uff0e TestExecutor \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u3067\u3082\u3042\u308a\uff0c with \u6587\u3092\u4f7f\u3063\u3066\u30d6\u30ed\u30c3\u30af\u5185\u90e8\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u51e6\u7406\u3092\u884c\u3046\u9593\u306e\u307f\u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u30d5\u30a9\u30fc\u30e0\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u30d5\u30a9\u30fc\u30e0\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8d77\u52d5\u306b\u306f\uff0c TestExecutor.start_serve() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u307e\u3059: with executor . start_serve (): # \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u51e6\u7406 with \u6587\u306e\u30d6\u30ed\u30c3\u30af\u5185\u306b\u5b9a\u7fa9\u3059\u308b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u51e6\u7406\u306f\u30c6\u30b9\u30c8\u3057\u305f\u3044\u51e6\u7406\u306b\u4f9d\u308a\u307e\u3059\uff0e with \u6587\u3092\u4f7f\u7528\u3057\u306a\u3044\u5834\u5408\uff0c start_serve() \u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\uff0c close() \u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u8d77\u52d5\u3057\u305f\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u307e\u305f\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u51e6\u7406\u304c\u5358\u4e00\u306e\u95a2\u6570\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\uff0c TestExecutor.exec() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059: def client_test (): # \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u51e6\u7406 # \u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u51e6\u7406\u3092\u5b9f\u884c # \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u51e6\u7406\u306e\u5b9f\u884c\u5f8c\u306b\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86 executor . exec ( client_test ) \u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u4f5c\u6210\u3068\u30c6\u30b9\u30c8\u306e\u5b9f\u884c \u4e0a\u8ff0\u3057\u305f TestExecutor \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5229\u7528\u3057\u3066\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\uff0e\u3053\u3053\u3067\u306f Python \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b unittest \u3092\u4f7f\u7528\u3057\u305f\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u4f5c\u6210\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e unittest \u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u306f\u884c\u3044\u307e\u305b\u3093\u306e\u3067\uff0c\u305d\u306e\u8a73\u7d30\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e unittest \u3067\u306f unittest.TestCase \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e1\u3064\u306e\u30b1\u30fc\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff0e TestCase \u30af\u30e9\u30b9\u306b\u306f setUpClass() \u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u3068 tearDownClass() \u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\uff0c\u305d\u308c\u305e\u308c\u30c6\u30b9\u30c8\u958b\u59cb\u6642\uff0c\u7d42\u4e86\u6642\u306b\u4e00\u5ea6\u3060\u3051\u5b9f\u884c\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\uff0e\u3053\u306e2\u3064\u306e\u30e1\u30bd\u30c3\u30c9\u3068 TestExecutor \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b unittest \u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u5373\u3057\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059: import unittest class UselessTest ( unittest . TestCase ): @classmethod def setUpClass ( self ): # \u30c6\u30b9\u30c8\u5b9f\u884c\u524d\u306b\u5b9f\u884c\u3055\u308c\u308b # \u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5 form1 = ServerForm ( \"localhost\" , 8000 , app1 , \"test_app1.log\" ) form2 = ServerForm ( \"localhost\" , 8001 , app2 , \"test_app2.log\" ) self . executor = TestExecutor ( form1 , form2 ) self . executor . start_serve () @classmethod def tearDownClass ( self ): # \u30c6\u30b9\u30c8\u5b9f\u884c\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u308b # \u30b5\u30fc\u30d0\u30fc\u3092\u505c\u6b62 self . executor . close () # \u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5b9a\u7fa9 # \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u306e\u51e6\u7406\u3092\u8a18\u8ff0 def test_something ( self ): ... if __name__ == \"__main__\" : unittest . main () \u3053\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067 unittest \u306e\u6a5f\u80fd\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u306f\u4f5c\u6210\u3057\u305f\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3059\uff0ebamboo \u958b\u767a\u7528\u306e\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u307b\u3068\u3093\u3069\u304c\u3053\u306e\u65b9\u6cd5\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\uff0e bamboo/test \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u304b\u3089\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u4f5c\u6210\u306e\u30d2\u30f3\u30c8\u304c\u5f97\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30c6\u30b9\u30c8"},{"location":"tutorials/test/#_1","text":"\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u958b\u767a\u306e\u969b\u306b\u6b20\u304b\u305b\u306a\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30c6\u30b9\u30c8\u306b\u3064\u3044\u3066\u8ff0\u3079\u307e\u3059\uff0ebamboo \u3067\u306f\u30ed\u30fc\u30ab\u30eb\u3067\u306e\u30b5\u30fc\u30d0\u30fc\u306e\u30c6\u30b9\u30c8\u306e\u305f\u3081\u306e\u3044\u304f\u3089\u304b\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\uff0e\u4ee5\u4e0b\u3067\u306f\uff0c\u3053\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u5229\u7528\u3057\u305f\u30c6\u30b9\u30c8\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\uff0e","title":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30c6\u30b9\u30c8"},{"location":"tutorials/test/#_2","text":"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u305f\u3089\u307e\u305a\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3057\u3087\u3046\uff0e\u3057\u304b\u3057\uff0c\u30b5\u30fc\u30d0\u30fc\u306e\u30c6\u30b9\u30c8\u306f\u5c11\u3057\u5384\u4ecb\u3067\u3059\uff0e\u306a\u305c\u306a\u3089\uff0c\u30b5\u30fc\u30d0\u30fc\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u3044\u3046\u5c11\u306a\u304f\u3068\u30822\u3064\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u5b58\u5728\u3059\u308b\u304b\u3089\u3067\u3059\uff0e\u307e\u3057\u3066\u3084\uff0c\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u306e\u3088\u3046\u306a\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u8907\u6570\u306e\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30db\u30b9\u30c6\u30a3\u30f3\u30b0\u3057\u3066\u3044\u308b\u72b6\u614b\u3067\u306f\uff0c1\u3064\u306e\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3064\u304d\u30b3\u30de\u30f3\u30c9\u3092\u53e9\u3044\u3066\u8d77\u52d5\u3057\u3066\u3044\u3066\u306f\u30c7\u30d0\u30c3\u30b0\u3082\u6357\u308a\u307e\u305b\u3093\uff0e \u3053\u306e\u3088\u3046\u306a\u4e8b\u614b\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\uff0cbamboo \u3067\u306f TestExecutor \u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u306e\u30af\u30e9\u30b9\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\uff0c\u30c6\u30b9\u30c8\u7528\u306e1\u3064\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u30c6\u30b9\u30c8\u3092\u884c\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u4ee5\u4e0b\u3067\u306f\u3053\u306e TestExecutor \u3068 Python \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e unittest \u3092\u7528\u3044\u305f\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u4f5c\u6210\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e","title":"\u6982\u8981"},{"location":"tutorials/test/#testexecutor-serverform","text":"TestExecutor \u306f\u30b5\u30fc\u30d0\u30fc\u8d77\u52d5\u6642\u306b\u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30fc\u30e0\u3092\u5b9a\u7fa9\u3059\u308b ServerForm \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u767b\u9332\u3059\u308b\u3053\u3068\u3067\uff0c\u5b50\u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\uff0e ServerForm \u306f\u5358\u306a\u308b dataclass \u3067\u3042\u308a\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u3092\u6301\u3061\u307e\u3059: \u30db\u30b9\u30c8\u540d (IP \u30a2\u30c9\u30ec\u30b9) hostname \u30dd\u30fc\u30c8\u756a\u53f7 port \u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 app \u30ed\u30b0\u51fa\u529b\u7528\u306e\u30d1\u30b9 path_log \u7279\u306b\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u306f bamboo \u306b\u3088\u3063\u3066\u5b9f\u88c5\u3055\u308c\u305f App \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u3053\u3068\u3067\u3059\uff0e\u307e\u305f\uff0c path_log \u306b\u6307\u5b9a\u3055\u308c\u305f\u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u306f\uff0c\u30b5\u30fc\u30d0\u30fc\u304c\u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u8d77\u52d5\u3055\u308c\u305f\u5f8c\u306b\u305d\u306e\u30d7\u30ed\u30bb\u30b9\u306e\u6a19\u6e96\u51fa\u529b\uff0c\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u3078\u63a5\u7d9a\u3055\u308c\u307e\u3059\uff0e \u4f5c\u6210\u3057\u305f\u30d5\u30a9\u30fc\u30e0\u306f TestExecutor \u751f\u6210\u6642\u306b\u6307\u5b9a\u3067\u304d\u307e\u3059\uff0e\u4ee5\u4e0b\u3067\u306f app1 \u3068 app2 \u3068\u3044\u30462\u3064\u306e\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u30c6\u30b9\u30c8\u3059\u308b\u3068\u4eee\u5b9a\u3057\u3066 TestExecutor \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u4f8b\u3092\u793a\u3057\u3066\u3044\u307e\u3059: from bamboo import ServerForm , TestExecutor form1 = ServerForm ( \"localhost\" , 8000 , app1 , \"test_app1.log\" ) form2 = ServerForm ( \"localhost\" , 8001 , app2 , \"test_app2.log\" ) executor = TestExecutor ( form1 , form2 ) \u3053\u3053\u307e\u3067\u6765\u308c\u3070\u6e96\u5099\u5b8c\u4e86\u3067\u3059\uff0e TestExecutor \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u3067\u3082\u3042\u308a\uff0c with \u6587\u3092\u4f7f\u3063\u3066\u30d6\u30ed\u30c3\u30af\u5185\u90e8\u3067\u5b9a\u7fa9\u3055\u308c\u305f\u51e6\u7406\u3092\u884c\u3046\u9593\u306e\u307f\u5b50\u30d7\u30ed\u30bb\u30b9\u3067\u30d5\u30a9\u30fc\u30e0\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u30d5\u30a9\u30fc\u30e0\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8d77\u52d5\u306b\u306f\uff0c TestExecutor.start_serve() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u307e\u3059: with executor . start_serve (): # \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u51e6\u7406 with \u6587\u306e\u30d6\u30ed\u30c3\u30af\u5185\u306b\u5b9a\u7fa9\u3059\u308b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u51e6\u7406\u306f\u30c6\u30b9\u30c8\u3057\u305f\u3044\u51e6\u7406\u306b\u4f9d\u308a\u307e\u3059\uff0e with \u6587\u3092\u4f7f\u7528\u3057\u306a\u3044\u5834\u5408\uff0c start_serve() \u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\uff0c close() \u30e1\u30bd\u30c3\u30c9\u306b\u3088\u3063\u3066\u8d77\u52d5\u3057\u305f\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86\u3055\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u307e\u305f\uff0c\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u51e6\u7406\u304c\u5358\u4e00\u306e\u95a2\u6570\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\uff0c TestExecutor.exec() \u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059: def client_test (): # \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u51e6\u7406 # \u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u51e6\u7406\u3092\u5b9f\u884c # \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u51e6\u7406\u306e\u5b9f\u884c\u5f8c\u306b\u30b5\u30fc\u30d0\u30fc\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u7d42\u4e86 executor . exec ( client_test )","title":"TestExecutor \u3068 ServerForm"},{"location":"tutorials/test/#_3","text":"\u4e0a\u8ff0\u3057\u305f TestExecutor \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5229\u7528\u3057\u3066\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3067\u304d\u307e\u3059\uff0e\u3053\u3053\u3067\u306f Python \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b unittest \u3092\u4f7f\u7528\u3057\u305f\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u4f5c\u6210\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e unittest \u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u306f\u884c\u3044\u307e\u305b\u3093\u306e\u3067\uff0c\u305d\u306e\u8a73\u7d30\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e unittest \u3067\u306f unittest.TestCase \u30b5\u30d6\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e1\u3064\u306e\u30b1\u30fc\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff0e TestCase \u30af\u30e9\u30b9\u306b\u306f setUpClass() \u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u3068 tearDownClass() \u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\uff0c\u305d\u308c\u305e\u308c\u30c6\u30b9\u30c8\u958b\u59cb\u6642\uff0c\u7d42\u4e86\u6642\u306b\u4e00\u5ea6\u3060\u3051\u5b9f\u884c\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\uff0e\u3053\u306e2\u3064\u306e\u30e1\u30bd\u30c3\u30c9\u3068 TestExecutor \u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b unittest \u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306b\u5373\u3057\u305f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059: import unittest class UselessTest ( unittest . TestCase ): @classmethod def setUpClass ( self ): # \u30c6\u30b9\u30c8\u5b9f\u884c\u524d\u306b\u5b9f\u884c\u3055\u308c\u308b # \u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5 form1 = ServerForm ( \"localhost\" , 8000 , app1 , \"test_app1.log\" ) form2 = ServerForm ( \"localhost\" , 8001 , app2 , \"test_app2.log\" ) self . executor = TestExecutor ( form1 , form2 ) self . executor . start_serve () @classmethod def tearDownClass ( self ): # \u30c6\u30b9\u30c8\u5b9f\u884c\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u308b # \u30b5\u30fc\u30d0\u30fc\u3092\u505c\u6b62 self . executor . close () # \u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5b9a\u7fa9 # \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b5\u30a4\u30c9\u306e\u51e6\u7406\u3092\u8a18\u8ff0 def test_something ( self ): ... if __name__ == \"__main__\" : unittest . main () \u3053\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067 unittest \u306e\u6a5f\u80fd\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u306f\u4f5c\u6210\u3057\u305f\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3059\uff0ebamboo \u958b\u767a\u7528\u306e\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u307b\u3068\u3093\u3069\u304c\u3053\u306e\u65b9\u6cd5\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\uff0e bamboo/test \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u304b\u3089\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u4f5c\u6210\u306e\u30d2\u30f3\u30c8\u304c\u5f97\u3089\u308c\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e","title":"\u30c6\u30b9\u30c8\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u4f5c\u6210\u3068\u30c6\u30b9\u30c8\u306e\u5b9f\u884c"},{"location":"tutorials/various_endpoints/","text":"\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u7a2e\u985e","title":"\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u7a2e\u985e"},{"location":"tutorials/various_endpoints/#_1","text":"","title":"\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u7a2e\u985e"},{"location":"tutorials/websocket/","text":"WebSocket \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5","title":"WebSocket \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5"},{"location":"tutorials/websocket/#websocket","text":"","title":"WebSocket \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5"}]}